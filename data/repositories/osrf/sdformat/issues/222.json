{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/222/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/222.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/222/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/222/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/222/converter-map-only-maps-first-of-sibling"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/222/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "Converter::Map only maps first of sibling elements", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The `Converter::Map` functionality was added to libsdformat9 in pull request #580. It maps values from elements/attributes into other elements/attributes. It is currently limited to only mapping the first of sibling elements of the same type.\r\n\r\nFor example, consider the following xml from a `.convert ` file:\r\n\r\n~~~\r\n<map>\r\n  <from name='elemD'>\r\n    <value>d</value>\r\n    <value>D</value>\r\n  </from>\r\n  <to name='elemF'>\r\n    <value>f</value>\r\n    <value>F</value>\r\n  </to>\r\n</map>\r\n~~~\r\n\r\nthat operates on the following xml:\r\n\r\n~~~\r\n<elemC attrC='C'>\r\n  <elemD>D</elemD>\r\n  <elemD>D</elemD>\r\n  <elemD>d</elemD>\r\n  <elemD>d</elemD>\r\n</elemC>\r\n~~~\r\n\r\nCurrently it only maps the first element, so the output would be the following (all the original `elemD` elements plus one new `elemF` element):\r\n\r\n~~~\r\n<elemC attrC='C'>\r\n  <elemD>D</elemD>\r\n  <elemD>D</elemD>\r\n  <elemD>d</elemD>\r\n  <elemD>d</elemD>\r\n  <elemF>F</elemF>\r\n</elemC>\r\n~~~\r\n\r\nI've added a failing test to the following branch that expects all sibling elements to be mapped in the converted xml:\r\n\r\n* #!/osrf/sdformat/branch/converter_map_multiple_siblings", "markup": "markdown", "html": "<p>The <code>Converter::Map</code> functionality was added to libsdformat9 in <a href=\"#!/osrf/sdformat/pull-requests/580/converter-add-element-for-converting-fixed\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #580</a>. It maps values from elements/attributes into other elements/attributes. It is currently limited to only mapping the first of sibling elements of the same type.</p>\n<p>For example, consider the following xml from a <code>.convert</code> file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;map&gt;</span>\n  <span class=\"nt\">&lt;from</span> <span class=\"na\">name=</span><span class=\"s\">&#39;elemD&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>d<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>D<span class=\"nt\">&lt;/value&gt;</span>\n  <span class=\"nt\">&lt;/from&gt;</span>\n  <span class=\"nt\">&lt;to</span> <span class=\"na\">name=</span><span class=\"s\">&#39;elemF&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>f<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>F<span class=\"nt\">&lt;/value&gt;</span>\n  <span class=\"nt\">&lt;/to&gt;</span>\n<span class=\"nt\">&lt;/map&gt;</span>\n</pre></div>\n\n\n<p>that operates on the following xml:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;elemC</span> <span class=\"na\">attrC=</span><span class=\"s\">&#39;C&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n<span class=\"nt\">&lt;/elemC&gt;</span>\n</pre></div>\n\n\n<p>Currently it only maps the first element, so the output would be the following (all the original <code>elemD</code> elements plus one new <code>elemF</code> element):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;elemC</span> <span class=\"na\">attrC=</span><span class=\"s\">&#39;C&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemF&gt;</span>F<span class=\"nt\">&lt;/elemF&gt;</span>\n<span class=\"nt\">&lt;/elemC&gt;</span>\n</pre></div>\n\n\n<p>I've added a failing test to the following branch that expects all sibling elements to be mapped in the converted xml:</p>\n<ul>\n<li><a href=\"#!/osrf/sdformat/branch/converter_map_multiple_siblings\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/sdformat/branch/converter_map_multiple_siblings</a></li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-11-15T21:05:51.940329+00:00", "milestone": null, "updated_on": "2019-11-15T21:05:51.940329+00:00", "type": "issue", "id": 222}