{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/130/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/130.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/130/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/130/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/130/position-part-of-force_torque-sensor-pose"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/130/vote"}}, "reporter": {"display_name": "Silvio Traversaro", "uuid": "{34f404cb-5642-4f27-a032-e04c7143d776}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D"}, "html": {"href": "https://bitbucket.org/%7B34f404cb-5642-4f27-a032-e04c7143d776%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6/578caaa1-056c-45a2-8bf9-bee94c3bebef/128"}}, "nickname": "traversaro", "type": "user", "account_id": "557058:e1c3e6a0-9a64-4e5f-a668-feebc191c5b6"}, "title": "Position part of force_torque sensor pose is ignored and this may be confusing or impractical", "component": null, "votes": 1, "watches": 1, "content": {"raw": "**TL; DR: There is bug in Valkyrie F/T sensor model that could cause up to 20 Nm of error between the simulated F/T measure and the real one.**\r\n\r\nBack in https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc , the semantics for force_torque sensor pose tag was defined.\r\n\r\nIn particular it was decided (probably for back-compatibility) that the point with respect to which the measured torque is expressed was always the origin of the \"joint\" frame, regardless of the sensor pose and of the frame tag (see https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9473056).\r\n\r\nPersonally I was ok with this, because I always modeled six axis force torque sensors as \"fixed\" joints (as described in https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9485945), for which the origin of the joint frame can be freely assigned without any other constraint.\r\n\r\nHowever recently I was porting some estimation software to the Walkman robot ( https://www.walk-man.eu/ ) and I noticed that in building their SDF they choose a different option: they modeled their F/T sensors as sensors measuring the force transmitted over a non-fixed joint. The Walkman model is not public, but then I noticed that the same choice was done in the SDF of the Valkyrie robot, see for example:\r\n~~~xml\r\n    <gazebo reference=\"${joint_to_attach_sensor_to}\">\r\n      <sensor name=\"${sensorName}\" type=\"force_torque\">\r\n        <pose>${origin_xyz} ${origin_rpy}</pose>\r\n        <sensor_number id=\"${sensor_number}\" />\r\n        <node id=\"${sensor_node}\" />\r\n        <api name=\"${sensor_api}\" />\r\n        <always_on>true</always_on>\r\n        <update_rate>500.0</update_rate>\r\n        <force_torque>\r\n          <frame>sensor</frame>\r\n          <measure_direction>parent_to_child</measure_direction>\r\n        </force_torque>\r\n    \t</sensor>\r\n    </gazebo>\r\n~~~\r\nSee https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/sensors/ati_force_torque.xacro#L16 .\r\n\r\nAs in the case of the Walkman, even here the `force_torque` sensor is instantiated with a non-zero origin_xyz in \r\n~~~xml\r\n<xacro:ati_force_torque_sensor sensorName=\"${prefix}FootSixAxis\"\r\n                               parentLink=\"${AnkleRollLinkName}\"\r\n                               joint_to_attach_sensor_to=\"${AnkleRollJointName}\"                          \r\n                               origin_xyz=\"0.0215646 0.0 -0.051054\"                        \r\n                               origin_rpy=\"3.14 0.0 0.0\"                \r\n                               sensor_number=\"${ATI_serial_number}\"                                \r\n                               sensor_node=\"${ATI_node}\"                           \r\n                               sensor_api=\"${ForceTorqueSensorApi}\" />\r\n~~~\r\nSee https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/leg/leg.xacro#L173 .\r\n\r\nModelling the F/T sensor as attached to a non-fixed joint can make sense if the mass of the flange connecting the F/T sensor with its revolute joint is small enough and its weight and dynamical effect can be safely disregarded. However the presence of a non-fixed joints constraints the joint frame origin to be on the joint's revolution axis, and prevents to correctly simulate a sensor whose origin does not lie on the revolution axis. As far as I understood is the case in Walkman/Valkyrie, and the authors of those models tried to encode the position offset between the joint frame and the sensor frame using the sensor pose, apparently ignoring that the position part would be ignored. \r\n\r\nI don't know if there is an easy way to fix this issue in these models. Two possible ways can be:\r\n\r\n* create a new value for the [`frame` tag](http://sdformat.org/spec?ver=1.6&elem=sensor#force_torque_frame): a `sensor_posandrot` (better name preferable) that means  that the sensor orientation is used to express the wrench, and the sensor origin is used as the point with respect to which the torque is expressed,\r\n\r\n* or considering that any model with a non-zero sensor position offset for a `force_torque` sensor is broken, we can just modify the definition of `<frame>sensor</frame>` to \"the sensor orientation is used to express the wrench, and the sensor origin is used as the point with respect to which the torque is expressed\".", "markup": "markdown", "html": "<p><strong>TL; DR: There is bug in Valkyrie F/T sensor model that could cause up to 20 Nm of error between the simulated F/T measure and the real one.</strong></p>\n<p>Back in <a href=\"https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc</a> , the semantics for force_torque sensor pose tag was defined.</p>\n<p>In particular it was decided (probably for back-compatibility) that the point with respect to which the measured torque is expressed was always the origin of the \"joint\" frame, regardless of the sensor pose and of the frame tag (see <a href=\"https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9473056\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9473056</a>).</p>\n<p>Personally I was ok with this, because I always modeled six axis force torque sensors as \"fixed\" joints (as described in <a href=\"https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9485945\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/issues/940/force-torque-sensor-forcetorquesensorcc#comment-9485945</a>), for which the origin of the joint frame can be freely assigned without any other constraint.</p>\n<p>However recently I was porting some estimation software to the Walkman robot ( <a href=\"https://www.walk-man.eu/\" rel=\"nofollow\" class=\"ap-connect-link\">https://www.walk-man.eu/</a> ) and I noticed that in building their SDF they choose a different option: they modeled their F/T sensors as sensors measuring the force transmitted over a non-fixed joint. The Walkman model is not public, but then I noticed that the same choice was done in the SDF of the Valkyrie robot, see for example:</p>\n<div class=\"codehilite language-xml\"><pre><span></span>    <span class=\"nt\">&lt;gazebo</span> <span class=\"na\">reference=</span><span class=\"s\">&quot;${joint_to_attach_sensor_to}&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;sensor</span> <span class=\"na\">name=</span><span class=\"s\">&quot;${sensorName}&quot;</span> <span class=\"na\">type=</span><span class=\"s\">&quot;force_torque&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>${origin_xyz} ${origin_rpy}<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;sensor_number</span> <span class=\"na\">id=</span><span class=\"s\">&quot;${sensor_number}&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;node</span> <span class=\"na\">id=</span><span class=\"s\">&quot;${sensor_node}&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;api</span> <span class=\"na\">name=</span><span class=\"s\">&quot;${sensor_api}&quot;</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;always_on&gt;</span>true<span class=\"nt\">&lt;/always_on&gt;</span>\n        <span class=\"nt\">&lt;update_rate&gt;</span>500.0<span class=\"nt\">&lt;/update_rate&gt;</span>\n        <span class=\"nt\">&lt;force_torque&gt;</span>\n          <span class=\"nt\">&lt;frame&gt;</span>sensor<span class=\"nt\">&lt;/frame&gt;</span>\n          <span class=\"nt\">&lt;measure_direction&gt;</span>parent_to_child<span class=\"nt\">&lt;/measure_direction&gt;</span>\n        <span class=\"nt\">&lt;/force_torque&gt;</span>\n        <span class=\"nt\">&lt;/sensor&gt;</span>\n    <span class=\"nt\">&lt;/gazebo&gt;</span>\n</pre></div>\n\n\n<p>See <a href=\"https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/sensors/ati_force_torque.xacro#L16\" rel=\"nofollow\" class=\"ap-connect-link\">https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/sensors/ati_force_torque.xacro#L16</a> .</p>\n<p>As in the case of the Walkman, even here the <code>force_torque</code> sensor is instantiated with a non-zero origin_xyz in </p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;xacro:ati_force_torque_sensor</span> <span class=\"na\">sensorName=</span><span class=\"s\">&quot;${prefix}FootSixAxis&quot;</span>\n                               <span class=\"na\">parentLink=</span><span class=\"s\">&quot;${AnkleRollLinkName}&quot;</span>\n                               <span class=\"na\">joint_to_attach_sensor_to=</span><span class=\"s\">&quot;${AnkleRollJointName}&quot;</span>                          \n                               <span class=\"na\">origin_xyz=</span><span class=\"s\">&quot;0.0215646 0.0 -0.051054&quot;</span>                        \n                               <span class=\"na\">origin_rpy=</span><span class=\"s\">&quot;3.14 0.0 0.0&quot;</span>                \n                               <span class=\"na\">sensor_number=</span><span class=\"s\">&quot;${ATI_serial_number}&quot;</span>                                \n                               <span class=\"na\">sensor_node=</span><span class=\"s\">&quot;${ATI_node}&quot;</span>                           \n                               <span class=\"na\">sensor_api=</span><span class=\"s\">&quot;${ForceTorqueSensorApi}&quot;</span> <span class=\"nt\">/&gt;</span>\n</pre></div>\n\n\n<p>See <a href=\"https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/leg/leg.xacro#L173\" rel=\"nofollow\" class=\"ap-connect-link\">https://gitlab.com/nasa-jsc-robotics/val_description/blob/master/model/robots/common/xacro/leg/leg.xacro#L173</a> .</p>\n<p>Modelling the F/T sensor as attached to a non-fixed joint can make sense if the mass of the flange connecting the F/T sensor with its revolute joint is small enough and its weight and dynamical effect can be safely disregarded. However the presence of a non-fixed joints constraints the joint frame origin to be on the joint's revolution axis, and prevents to correctly simulate a sensor whose origin does not lie on the revolution axis. As far as I understood is the case in Walkman/Valkyrie, and the authors of those models tried to encode the position offset between the joint frame and the sensor frame using the sensor pose, apparently ignoring that the position part would be ignored. </p>\n<p>I don't know if there is an easy way to fix this issue in these models. Two possible ways can be:</p>\n<ul>\n<li>\n<p>create a new value for the <a data-is-external-link=\"true\" href=\"http://sdformat.org/spec?ver=1.6&amp;elem=sensor#force_torque_frame\" rel=\"nofollow\"><code>frame</code> tag</a>: a <code>sensor_posandrot</code> (better name preferable) that means  that the sensor orientation is used to express the wrench, and the sensor origin is used as the point with respect to which the torque is expressed,</p>\n</li>\n<li>\n<p>or considering that any model with a non-zero sensor position offset for a <code>force_torque</code> sensor is broken, we can just modify the definition of <code>&lt;frame&gt;sensor&lt;/frame&gt;</code> to \"the sensor orientation is used to express the wrench, and the sensor origin is used as the point with respect to which the torque is expressed\".</p>\n</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-10-30T23:22:22.681760+00:00", "milestone": null, "updated_on": "2018-08-26T11:00:09.195686+00:00", "type": "issue", "id": 130}