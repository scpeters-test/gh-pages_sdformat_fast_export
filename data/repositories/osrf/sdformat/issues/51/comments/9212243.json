{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/51/comments/9212243.json"}, "html": {"href": "#!/osrf/sdformat/issues/51#comment-9212243"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/51.json"}}, "type": "issue", "id": 51, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "SDF_VERSION need to distinguish between protocol version and pkg version."}, "content": {"raw": "There are a good number of variables exported:\n```\n#define SDF_MAJOR_VERSION ${SDF_MAJOR_VERSION}\n#define SDF_MINOR_VERSION ${SDF_MINOR_VERSION}\n#define SDF_PATCH_VERSION ${SDF_PATCH_VERSION}\n\n#define SDF_VERSION \"${SDF_VERSION}\"\n#define SDF_VERSION_FULL \"${SDF_VERSION_FULL}\"\n#define SDF_VERSION_NAME ${SDF_VERSION_NAME}\n```\nThe cleanest way of implement this would be to introduce a new ```SDF_PROTOCOL_VERSION``` exported together with the rest of variables that speak about the package version, but that will force to all the software consuming sdformat to be fixed. \n\nAs said in the description, the way to keep backwards compatibility (at least for gazebo), would be to preserve (at least) SDF_VERSION keeping the protocol version. but I'm not sure about what to do with the rest of variables (SDF_MAJOR, SDF_MINOR, etc.).\n\nIdeas?", "markup": "markdown", "html": "<p>There are a good number of variables exported:</p>\n<div class=\"codehilite\"><pre><span></span>#define SDF_MAJOR_VERSION <span class=\"cp\">${</span><span class=\"n\">SDF_MAJOR_VERSION</span><span class=\"cp\">}</span>\n#define SDF_MINOR_VERSION <span class=\"cp\">${</span><span class=\"n\">SDF_MINOR_VERSION</span><span class=\"cp\">}</span>\n#define SDF_PATCH_VERSION <span class=\"cp\">${</span><span class=\"n\">SDF_PATCH_VERSION</span><span class=\"cp\">}</span>\n\n#define SDF_VERSION &quot;<span class=\"cp\">${</span><span class=\"n\">SDF_VERSION</span><span class=\"cp\">}</span>&quot;\n#define SDF_VERSION_FULL &quot;<span class=\"cp\">${</span><span class=\"n\">SDF_VERSION_FULL</span><span class=\"cp\">}</span>&quot;\n#define SDF_VERSION_NAME <span class=\"cp\">${</span><span class=\"n\">SDF_VERSION_NAME</span><span class=\"cp\">}</span>\n</pre></div>\n\n\n<p>The cleanest way of implement this would be to introduce a new <code>SDF_PROTOCOL_VERSION</code> exported together with the rest of variables that speak about the package version, but that will force to all the software consuming sdformat to be fixed. </p>\n<p>As said in the description, the way to keep backwards compatibility (at least for gazebo), would be to preserve (at least) SDF_VERSION keeping the protocol version. but I'm not sure about what to do with the rest of variables (SDF_MAJOR, SDF_MINOR, etc.).</p>\n<p>Ideas?</p>", "type": "rendered"}, "created_on": "2014-03-19T16:40:39.349031+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 9212243}