{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/213/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/213.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/213/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/213/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/213/element-get-ignores-default-input-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/213/vote"}}, "reporter": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "title": "Element::Get ignores default input for elements", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Prerequisites\r\n\r\n* [ X ] Put an X between the brackets on this line if you have done all of the following:\r\n    * Checked the Q&A board for common solutions: http://answers.gazebosim.org\r\n    * Checked that your issue isn't already filed.\r\n    * Checked that there is not already an Ignition package that provides the described functionality: https://ignitionrobotics.org/libs\r\n\r\n# Description \r\n\r\nThe `Element::Get` function which accepts an optional default value will always ignore that value in favour of the default value defined in the spec.\r\n\r\n# Steps to Reproduce\r\n\r\nI would expect the following tests to pass:\r\n\r\n~~~\r\ndiff -r 301cecc99c22 src/Root_TEST.cc\r\n--- a/src/Root_TEST.cc  Thu Jan 31 20:37:41 2019 +0000\r\n+++ b/src/Root_TEST.cc  Tue Feb 26 18:42:00 2019 -0800\r\n@@ -23,6 +23,7 @@\r\n #include \"sdf/Light.hh\"\r\n #include \"sdf/Model.hh\"\r\n #include \"sdf/Root.hh\"\r\n+#include \"sdf/Sensor.hh\"\r\n \r\n /////////////////////////////////////////////////\r\n TEST(DOMRoot, Construction)\r\n@@ -63,6 +64,13 @@\r\n     \"           </box>\"\r\n     \"         </geometry>\"\r\n     \"       </collision>\"\r\n+    \"       <sensor name='sensor_contact' type='contact'>\"\r\n+    \"         <contact>\"\r\n+    \"           <collision>box_col</collision>\"\r\n+    \"         </contact>\"\r\n+    \"         <always_on>1</always_on>\"\r\n+    \"         <update_rate>100</update_rate>\"\r\n+    \"       </sensor>\"\r\n     \"     </link>\"\r\n     \"   </model>\"\r\n     \"   <light type='directional' name='sun'>\"\r\n@@ -95,6 +103,16 @@\r\n   EXPECT_NE(nullptr, collision->Element());\r\n   EXPECT_EQ(\"box_col\", collision->Name());\r\n \r\n+  const sdf::Sensor *sensor = link->SensorByIndex(0);\r\n+  ASSERT_NE(nullptr, sensor);\r\n+  EXPECT_EQ(\"sensor_contact\", sensor->Name());\r\n+  ASSERT_NE(nullptr, sensor->Element());\r\n+  EXPECT_TRUE(sensor->Element()->HasElement(\"always_on\"));\r\n+  EXPECT_FALSE(sensor->Element()->HasElement(\"topic\"));\r\n+  auto [topic, success] = sensor->Element()->Get<std::string>(\"topic\", \"default_value\");\r\n+  EXPECT_EQ(\"default_value\", topic);\r\n+  EXPECT_FALSE(success);\r\n+\r\n   EXPECT_TRUE(root.LightNameExists(\"sun\"));\r\n   EXPECT_EQ(1u, root.LightCount());\r\n   const sdf::Light *light = root.LightByIndex(0);\r\n\r\ndiff -r 301cecc99c22 src/SDF_TEST.cc\r\n--- a/src/SDF_TEST.cc   Thu Jan 31 20:37:41 2019 +0000\r\n+++ b/src/SDF_TEST.cc   Tue Feb 26 18:42:00 2019 -0800\r\n@@ -173,6 +173,20 @@\r\n   EXPECT_EQ(elem->Get<std::string>(\"name\", \"default_value\").first, \"model2\");\r\n   EXPECT_TRUE(elem->Get<std::string>(\"name\", \"default_value\").second);\r\n \r\n+  {\r\n+    EXPECT_TRUE(elem->HasElement(\"static\"));\r\n+    auto [value, success] = elem->Get<bool>(\"static\", true);\r\n+    EXPECT_FALSE(value);\r\n+    EXPECT_TRUE(success);\r\n+  }\r\n+\r\n+  {\r\n+    EXPECT_FALSE(elem->HasElement(\"self_collide\"));\r\n+    auto [value, success] = elem->Get<bool>(\"self_collide\", true);\r\n+    EXPECT_TRUE(value);\r\n+    EXPECT_FALSE(success);\r\n+  }\r\n+\r\n   // Remove model2\r\n   elem->RemoveFromParent();\r\n~~~\r\n\r\nHowever, they fail because the function will always fallback to the default value from the spec, rather than using the passed value.\r\n\r\n**Expected behavior:**  \r\n\r\nI'd expect the default value passed by the user to override the default from the spec, otherwise there's no point on calling this function.\r\n\r\n**Actual behavior:**\r\n\r\nThe tests fail:\r\n\r\n~~~\r\n[ RUN      ] DOMRoot.StringParse\r\n/home/developer/sdformat/src/Root_TEST.cc:113: Failure\r\nExpected equality of these values:\r\n  \"default_value\"\r\n  topic\r\n    Which is: \"__default__\"\r\n/home/developer/sdformat/src/Root_TEST.cc:114: Failure\r\nValue of: success\r\n  Actual: true\r\nExpected: false\r\n[  FAILED  ] DOMRoot.StringParse (37 ms)\r\n~~~\r\n\r\n~~~\r\n[ RUN      ] SDF.ElementRemoveFromParent\r\nWarning [parser.cc:528] Converting a deprecated SDF source[data-string].\r\n/home/developer/sdformat/src/SDF_TEST.cc:186: Failure\r\nValue of: value\r\n  Actual: false\r\nExpected: true\r\n/home/developer/sdformat/src/SDF_TEST.cc:187: Failure\r\nValue of: success\r\n  Actual: true\r\nExpected: false\r\n[  FAILED  ] SDF.ElementRemoveFromParent (35 ms)\r\n~~~\r\n\r\n**Reproduces how often:** \r\n\r\nAlways\r\n\r\n# Versions\r\n\r\nsdf8\r\n\r\n# Additional Information\r\n\r\nOne way to solve this issue is to remove the line that uses the default value from the spec:\r\n\r\n~~~\r\ndiff -r 301cecc99c22 include/sdf/Element.hh\r\n--- a/include/sdf/Element.hh    Thu Jan 31 20:37:41 2019 +0000\r\n+++ b/include/sdf/Element.hh    Tue Feb 26 18:42:00 2019 -0800\r\n@@ -470,10 +470,6 @@              \r\n       {                                 \r\n         result.first = this->GetElementImpl(_key)->Get<T>();\r\n       }                                                                                                                                                \r\n-      else if (this->HasElementDescription(_key))\r\n-      {                                                                                                                    \r\n-        result.first = this->GetElementDescription(_key)->Get<T>();                                                                                     \r\n-      }                             \r\n       else                                                                                                                  \r\n       {                          \r\n         result.second = false;  \r\n~~~\r\n\r\nHowever, that causes tests which use the `Get` version that doesn't accept a default value to fail, like:\r\n\r\n~~~\r\n/home/developer/sdformat/test/integration/fixed_joint_reduction.cc:334: Failure\r\nExpected equality of these values:\r\n  urdf_child_link_2_col->Get<int>(\"max_contacts\")\r\n    Which is: 0\r\n  10\r\n~~~\r\n\r\n That's because that function is calling the other one, passing a default value:\r\n\r\n~~~\r\n    ///////////////////////////////////////////////\r\n    template<typename T>\r\n    T Element::Get(const std::string &_key) const\r\n    {\r\n      T result = T();\r\n  \r\n      std::pair<T, bool> ret = this->Get<T>(_key, result);\r\n  \r\n      return ret.first;\r\n    }\r\n~~~\r\n\r\nI first wanted to check if this is the expected behaviour. If it isn't, I can make a PR fixing all cases.", "markup": "markdown", "html": "<h1 id=\"markdown-header-prerequisites\">Prerequisites</h1>\n<ul>\n<li>[ X ] Put an X between the brackets on this line if you have done all of the following:<ul>\n<li>Checked the Q&amp;A board for common solutions: <a href=\"http://answers.gazebosim.org\" rel=\"nofollow\" class=\"ap-connect-link\">http://answers.gazebosim.org</a></li>\n<li>Checked that your issue isn't already filed.</li>\n<li>Checked that there is not already an Ignition package that provides the described functionality: <a href=\"https://ignitionrobotics.org/libs\" rel=\"nofollow\" class=\"ap-connect-link\">https://ignitionrobotics.org/libs</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"markdown-header-description\">Description</h1>\n<p>The <code>Element::Get</code> function which accepts an optional default value will always ignore that value in favour of the default value defined in the spec.</p>\n<h1 id=\"markdown-header-steps-to-reproduce\">Steps to Reproduce</h1>\n<p>I would expect the following tests to pass:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 301cecc99c22 src/Root_TEST.cc</span>\n<span class=\"gd\">--- a/src/Root_TEST.cc  Thu Jan 31 20:37:41 2019 +0000</span>\n<span class=\"gi\">+++ b/src/Root_TEST.cc  Tue Feb 26 18:42:00 2019 -0800</span>\n<span class=\"gu\">@@ -23,6 +23,7 @@</span>\n #include &quot;sdf/Light.hh&quot;\n #include &quot;sdf/Model.hh&quot;\n #include &quot;sdf/Root.hh&quot;\n<span class=\"gi\">+#include &quot;sdf/Sensor.hh&quot;</span>\n\n /////////////////////////////////////////////////\n TEST(DOMRoot, Construction)\n<span class=\"gu\">@@ -63,6 +64,13 @@</span>\n     &quot;           &lt;/box&gt;&quot;\n     &quot;         &lt;/geometry&gt;&quot;\n     &quot;       &lt;/collision&gt;&quot;\n<span class=\"gi\">+    &quot;       &lt;sensor name=&#39;sensor_contact&#39; type=&#39;contact&#39;&gt;&quot;</span>\n<span class=\"gi\">+    &quot;         &lt;contact&gt;&quot;</span>\n<span class=\"gi\">+    &quot;           &lt;collision&gt;box_col&lt;/collision&gt;&quot;</span>\n<span class=\"gi\">+    &quot;         &lt;/contact&gt;&quot;</span>\n<span class=\"gi\">+    &quot;         &lt;always_on&gt;1&lt;/always_on&gt;&quot;</span>\n<span class=\"gi\">+    &quot;         &lt;update_rate&gt;100&lt;/update_rate&gt;&quot;</span>\n<span class=\"gi\">+    &quot;       &lt;/sensor&gt;&quot;</span>\n     &quot;     &lt;/link&gt;&quot;\n     &quot;   &lt;/model&gt;&quot;\n     &quot;   &lt;light type=&#39;directional&#39; name=&#39;sun&#39;&gt;&quot;\n<span class=\"gu\">@@ -95,6 +103,16 @@</span>\n   EXPECT_NE(nullptr, collision-&gt;Element());\n   EXPECT_EQ(&quot;box_col&quot;, collision-&gt;Name());\n\n<span class=\"gi\">+  const sdf::Sensor *sensor = link-&gt;SensorByIndex(0);</span>\n<span class=\"gi\">+  ASSERT_NE(nullptr, sensor);</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;sensor_contact&quot;, sensor-&gt;Name());</span>\n<span class=\"gi\">+  ASSERT_NE(nullptr, sensor-&gt;Element());</span>\n<span class=\"gi\">+  EXPECT_TRUE(sensor-&gt;Element()-&gt;HasElement(&quot;always_on&quot;));</span>\n<span class=\"gi\">+  EXPECT_FALSE(sensor-&gt;Element()-&gt;HasElement(&quot;topic&quot;));</span>\n<span class=\"gi\">+  auto [topic, success] = sensor-&gt;Element()-&gt;Get&lt;std::string&gt;(&quot;topic&quot;, &quot;default_value&quot;);</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;default_value&quot;, topic);</span>\n<span class=\"gi\">+  EXPECT_FALSE(success);</span>\n<span class=\"gi\">+</span>\n   EXPECT_TRUE(root.LightNameExists(&quot;sun&quot;));\n   EXPECT_EQ(1u, root.LightCount());\n   const sdf::Light *light = root.LightByIndex(0);\n\n<span class=\"gh\">diff -r 301cecc99c22 src/SDF_TEST.cc</span>\n<span class=\"gd\">--- a/src/SDF_TEST.cc   Thu Jan 31 20:37:41 2019 +0000</span>\n<span class=\"gi\">+++ b/src/SDF_TEST.cc   Tue Feb 26 18:42:00 2019 -0800</span>\n<span class=\"gu\">@@ -173,6 +173,20 @@</span>\n   EXPECT_EQ(elem-&gt;Get&lt;std::string&gt;(&quot;name&quot;, &quot;default_value&quot;).first, &quot;model2&quot;);\n   EXPECT_TRUE(elem-&gt;Get&lt;std::string&gt;(&quot;name&quot;, &quot;default_value&quot;).second);\n\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    EXPECT_TRUE(elem-&gt;HasElement(&quot;static&quot;));</span>\n<span class=\"gi\">+    auto [value, success] = elem-&gt;Get&lt;bool&gt;(&quot;static&quot;, true);</span>\n<span class=\"gi\">+    EXPECT_FALSE(value);</span>\n<span class=\"gi\">+    EXPECT_TRUE(success);</span>\n<span class=\"gi\">+  }</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  {</span>\n<span class=\"gi\">+    EXPECT_FALSE(elem-&gt;HasElement(&quot;self_collide&quot;));</span>\n<span class=\"gi\">+    auto [value, success] = elem-&gt;Get&lt;bool&gt;(&quot;self_collide&quot;, true);</span>\n<span class=\"gi\">+    EXPECT_TRUE(value);</span>\n<span class=\"gi\">+    EXPECT_FALSE(success);</span>\n<span class=\"gi\">+  }</span>\n<span class=\"gi\">+</span>\n   // Remove model2\n   elem-&gt;RemoveFromParent();\n</pre></div>\n\n\n<p>However, they fail because the function will always fallback to the default value from the spec, rather than using the passed value.</p>\n<p><strong>Expected behavior:</strong>  </p>\n<p>I'd expect the default value passed by the user to override the default from the spec, otherwise there's no point on calling this function.</p>\n<p><strong>Actual behavior:</strong></p>\n<p>The tests fail:</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] DOMRoot.StringParse\n/home/developer/sdformat/src/Root_TEST.cc:113: Failure\nExpected equality of these values:\n  &quot;default_value&quot;\n  topic\n    Which is: &quot;__default__&quot;\n/home/developer/sdformat/src/Root_TEST.cc:114: Failure\nValue of: success\n  Actual: true\nExpected: false\n[  FAILED  ] DOMRoot.StringParse (37 ms)\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] SDF.ElementRemoveFromParent\nWarning [parser.cc:528] Converting a deprecated SDF source[data-string].\n/home/developer/sdformat/src/SDF_TEST.cc:186: Failure\nValue of: value\n  Actual: false\nExpected: true\n/home/developer/sdformat/src/SDF_TEST.cc:187: Failure\nValue of: success\n  Actual: true\nExpected: false\n[  FAILED  ] SDF.ElementRemoveFromParent (35 ms)\n</pre></div>\n\n\n<p><strong>Reproduces how often:</strong> </p>\n<p>Always</p>\n<h1 id=\"markdown-header-versions\">Versions</h1>\n<p>sdf8</p>\n<h1 id=\"markdown-header-additional-information\">Additional Information</h1>\n<p>One way to solve this issue is to remove the line that uses the default value from the spec:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 301cecc99c22 include/sdf/Element.hh</span>\n<span class=\"gd\">--- a/include/sdf/Element.hh    Thu Jan 31 20:37:41 2019 +0000</span>\n<span class=\"gi\">+++ b/include/sdf/Element.hh    Tue Feb 26 18:42:00 2019 -0800</span>\n<span class=\"gu\">@@ -470,10 +470,6 @@              </span>\n       {                                 \n         result.first = this-&gt;GetElementImpl(_key)-&gt;Get&lt;T&gt;();\n       }                                                                                                                                                \n<span class=\"gd\">-      else if (this-&gt;HasElementDescription(_key))</span>\n<span class=\"gd\">-      {                                                                                                                    </span>\n<span class=\"gd\">-        result.first = this-&gt;GetElementDescription(_key)-&gt;Get&lt;T&gt;();                                                                                     </span>\n<span class=\"gd\">-      }                             </span>\n       else                                                                                                                  \n       {                          \n         result.second = false;  \n</pre></div>\n\n\n<p>However, that causes tests which use the <code>Get</code> version that doesn't accept a default value to fail, like:</p>\n<div class=\"codehilite\"><pre><span></span>/home/developer/sdformat/test/integration/fixed_joint_reduction.cc:334: Failure\nExpected equality of these values:\n  urdf_child_link_2_col-&gt;Get&lt;int&gt;(&quot;max_contacts&quot;)\n    Which is: 0\n  10\n</pre></div>\n\n\n<p>That's because that function is calling the other one, passing a default value:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"o\">///////////////////////////////////////////////</span>\n    <span class=\"nt\">template</span><span class=\"o\">&lt;</span><span class=\"nt\">typename</span> <span class=\"nt\">T</span><span class=\"o\">&gt;</span>\n    <span class=\"nt\">T</span> <span class=\"nt\">Element</span><span class=\"p\">::</span><span class=\"nd\">Get</span><span class=\"o\">(</span><span class=\"nt\">const</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">string</span> <span class=\"o\">&amp;</span><span class=\"nt\">_key</span><span class=\"o\">)</span> <span class=\"nt\">const</span>\n    <span class=\"p\">{</span>\n      <span class=\"err\">T</span> <span class=\"err\">result</span> <span class=\"err\">=</span> <span class=\"err\">T()</span><span class=\"p\">;</span>\n\n      <span class=\"n\">std</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">bool</span><span class=\"o\">&gt;</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">this-</span><span class=\"o\">&gt;</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_key</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n\n      <span class=\"err\">return</span> <span class=\"err\">ret.first</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I first wanted to check if this is the expected behaviour. If it isn't, I can make a PR fixing all cases.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-02-27T02:52:24.945184+00:00", "milestone": null, "updated_on": "2019-02-27T02:52:24.945184+00:00", "type": "issue", "id": 213}