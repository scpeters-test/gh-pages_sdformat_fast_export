{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/104/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/104.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/104/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/104/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/104/memory-leak-in-element"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/104/vote"}}, "reporter": {"display_name": "Elte Hupkes", "uuid": "{f23aa1a9-ae57-493f-8169-fbb59b3eae43}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D"}, "html": {"href": "https://bitbucket.org/%7Bf23aa1a9-ae57-493f-8169-fbb59b3eae43%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8560ee94d50ba277c411499a45b3d732d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsEH-5.png"}}, "nickname": "ElteHupkes", "type": "user", "account_id": "557058:b758f523-bdaa-4718-964c-03b825bdea8d"}, "title": "Memory leak in `Element`", "component": null, "votes": 0, "watches": 3, "content": {"raw": "Because `this->Reset()` is commented out in `Element::~Element()`, SDF elements that contain any children whatsoever now have a memory leak. This is quite straightforward to show using the following program:\r\n\r\n```\r\n#!c++\r\n\r\n#include <iostream>\r\n#include <sdf/sdf.hh>\r\n\r\nint main()\r\n{\r\n\tfor (unsigned int i = 0; i < 1000; ++i) {\r\n\t\tsdf::SDF modelSDF;\r\n\t\tmodelSDF.SetFromString(\"<?xml version=\\\"1.0\\\"?>\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"<sdf version=\\\"1.5\\\">\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"    <model name=\\\"break_bot\\\">\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"        <link name=\\\"root-link\\\">\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"           <sensor type=\\\"gps\\\" name=\\\"mysensor\\\" />\"\r\n\t\t\t\t\t\t\t\t\t   \"        </link>\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"    </model>\\n\"\r\n\t\t\t\t\t\t\t\t\t   \"</sdf>\");\r\n\r\n\t\t// Uncomment this line to make the memory leak disappear\r\n//\t\tmodelSDF.Root()->Reset();\r\n\r\n\t\tstd::cout << \"Iteration \" << i << std::endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\r\nCompile, run `top` in one terminal, this program in the other and see the memory usage move up quickly, even though `modelSDF` goes out of scope and should be deleted in its entirety every iteration. Uncomment the `Reset()` line and memory usage stays constant.\r\n\r\n`Element::~Element()` only clears the smart pointers of its direct descendants. However, these descendants hold circular parent/child references to each other, meaning their reference counters do not actually go to zero and their memory is never freed. I believe `Element::Reset()` is supposed to take care of that, but is never called unless this is done manually.", "markup": "markdown", "html": "<p>Because <code>this-&gt;Reset()</code> is commented out in <code>Element::~Element()</code>, SDF elements that contain any children whatsoever now have a memory leak. This is quite straightforward to show using the following program:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sdf/sdf.hh&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">SDF</span> <span class=\"n\">modelSDF</span><span class=\"p\">;</span>\n        <span class=\"n\">modelSDF</span><span class=\"p\">.</span><span class=\"n\">SetFromString</span><span class=\"p\">(</span><span class=\"s\">&quot;&lt;?xml version=</span><span class=\"se\">\\&quot;</span><span class=\"s\">1.0</span><span class=\"se\">\\&quot;</span><span class=\"s\">?&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;&lt;sdf version=</span><span class=\"se\">\\&quot;</span><span class=\"s\">1.5</span><span class=\"se\">\\&quot;</span><span class=\"s\">&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;    &lt;model name=</span><span class=\"se\">\\&quot;</span><span class=\"s\">break_bot</span><span class=\"se\">\\&quot;</span><span class=\"s\">&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;        &lt;link name=</span><span class=\"se\">\\&quot;</span><span class=\"s\">root-link</span><span class=\"se\">\\&quot;</span><span class=\"s\">&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;           &lt;sensor type=</span><span class=\"se\">\\&quot;</span><span class=\"s\">gps</span><span class=\"se\">\\&quot;</span><span class=\"s\"> name=</span><span class=\"se\">\\&quot;</span><span class=\"s\">mysensor</span><span class=\"se\">\\&quot;</span><span class=\"s\"> /&gt;&quot;</span>\n                                       <span class=\"s\">&quot;        &lt;/link&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;    &lt;/model&gt;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span>\n                                       <span class=\"s\">&quot;&lt;/sdf&gt;&quot;</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Uncomment this line to make the memory leak disappear</span>\n<span class=\"c1\">//      modelSDF.Root()-&gt;Reset();</span>\n\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Iteration &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Compile, run <code>top</code> in one terminal, this program in the other and see the memory usage move up quickly, even though <code>modelSDF</code> goes out of scope and should be deleted in its entirety every iteration. Uncomment the <code>Reset()</code> line and memory usage stays constant.</p>\n<p><code>Element::~Element()</code> only clears the smart pointers of its direct descendants. However, these descendants hold circular parent/child references to each other, meaning their reference counters do not actually go to zero and their memory is never freed. I believe <code>Element::Reset()</code> is supposed to take care of that, but is never called unless this is done manually.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-08-23T13:42:07.033274+00:00", "milestone": null, "updated_on": "2015-10-06T20:20:17.572941+00:00", "type": "issue", "id": 104}