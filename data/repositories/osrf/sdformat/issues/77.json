{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/77/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/77.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/77/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/77/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/77/integration_provide_feedback-test-is"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/77/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "INTEGRATION_provide_feedback test is broken", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I was planning to expand the `INTEGRATION_provide_feedback` test to test more joint parameters, but I discovered that the test isn't working properly. I've added some additional expectations in the patch below, and the test currently fails, possibly because the links have no inertial values.\r\n~~~\r\ndiff -r e1bb1bc70356 test/integration/provide_feedback.cc\r\n--- a/test/integration/provide_feedback.cc\tWed Oct 29 17:40:36 2014 -0700\r\n+++ b/test/integration/provide_feedback.cc\tWed Oct 29 17:47:19 2014 -0700\r\n@@ -46,17 +46,23 @@\r\n   }\r\n \r\n   sdf::ElementPtr model = robot->root->GetElement(\"model\");\r\n+  ASSERT_TRUE(model->HasElement(\"joint\"));\r\n+  unsigned int jointBitMask = 0;\r\n   for (sdf::ElementPtr joint = model->GetElement(\"joint\"); joint;\r\n        joint = joint->GetNextElement(\"joint\"))\r\n   {\r\n     std::string jointName = joint->Get<std::string>(\"name\");\r\n     if (jointName == \"jointw0\")\r\n     {\r\n+      jointBitMask |= 0x1;\r\n+\r\n       // No provide_feedback tag was specified\r\n       EXPECT_FALSE(joint->HasElement(\"physics\"));\r\n     }\r\n     else if (jointName == \"joint01\")\r\n     {\r\n+      jointBitMask |= 0x2;\r\n+\r\n       // provide_feedback = 0\r\n       ASSERT_TRUE(joint->HasElement(\"physics\"));\r\n       sdf::ElementPtr physics = joint->GetElement(\"physics\");\r\n@@ -65,11 +71,18 @@\r\n     }\r\n     else if (jointName == \"joint12\")\r\n     {\r\n+      jointBitMask |= 0x4;\r\n+\r\n       // provide_feedback = 1\r\n       ASSERT_TRUE(joint->HasElement(\"physics\"));\r\n       sdf::ElementPtr physics = joint->GetElement(\"physics\");\r\n       ASSERT_TRUE(physics->HasElement(\"provide_feedback\"));\r\n       EXPECT_TRUE(physics->Get<bool>(\"provide_feedback\"));\r\n     }\r\n+    else\r\n+    {\r\n+      FAIL() << \"Unexpected joint name[\" << jointName << \"]\";\r\n+    }\r\n   }\r\n+  EXPECT_EQ(jointBitMask, 0x7u);\r\n }\r\n~~~", "markup": "markdown", "html": "<p>I was planning to expand the <code>INTEGRATION_provide_feedback</code> test to test more joint parameters, but I discovered that the test isn't working properly. I've added some additional expectations in the patch below, and the test currently fails, possibly because the links have no inertial values.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r e1bb1bc70356 test/integration/provide_feedback.cc</span>\n<span class=\"gd\">--- a/test/integration/provide_feedback.cc  Wed Oct 29 17:40:36 2014 -0700</span>\n<span class=\"gi\">+++ b/test/integration/provide_feedback.cc  Wed Oct 29 17:47:19 2014 -0700</span>\n<span class=\"gu\">@@ -46,17 +46,23 @@</span>\n   }\n\n   sdf::ElementPtr model = robot-&gt;root-&gt;GetElement(&quot;model&quot;);\n<span class=\"gi\">+  ASSERT_TRUE(model-&gt;HasElement(&quot;joint&quot;));</span>\n<span class=\"gi\">+  unsigned int jointBitMask = 0;</span>\n   for (sdf::ElementPtr joint = model-&gt;GetElement(&quot;joint&quot;); joint;\n        joint = joint-&gt;GetNextElement(&quot;joint&quot;))\n   {\n     std::string jointName = joint-&gt;Get&lt;std::string&gt;(&quot;name&quot;);\n     if (jointName == &quot;jointw0&quot;)\n     {\n<span class=\"gi\">+      jointBitMask |= 0x1;</span>\n<span class=\"gi\">+</span>\n       // No provide_feedback tag was specified\n       EXPECT_FALSE(joint-&gt;HasElement(&quot;physics&quot;));\n     }\n     else if (jointName == &quot;joint01&quot;)\n     {\n<span class=\"gi\">+      jointBitMask |= 0x2;</span>\n<span class=\"gi\">+</span>\n       // provide_feedback = 0\n       ASSERT_TRUE(joint-&gt;HasElement(&quot;physics&quot;));\n       sdf::ElementPtr physics = joint-&gt;GetElement(&quot;physics&quot;);\n<span class=\"gu\">@@ -65,11 +71,18 @@</span>\n     }\n     else if (jointName == &quot;joint12&quot;)\n     {\n<span class=\"gi\">+      jointBitMask |= 0x4;</span>\n<span class=\"gi\">+</span>\n       // provide_feedback = 1\n       ASSERT_TRUE(joint-&gt;HasElement(&quot;physics&quot;));\n       sdf::ElementPtr physics = joint-&gt;GetElement(&quot;physics&quot;);\n       ASSERT_TRUE(physics-&gt;HasElement(&quot;provide_feedback&quot;));\n       EXPECT_TRUE(physics-&gt;Get&lt;bool&gt;(&quot;provide_feedback&quot;));\n     }\n<span class=\"gi\">+    else</span>\n<span class=\"gi\">+    {</span>\n<span class=\"gi\">+      FAIL() &lt;&lt; &quot;Unexpected joint name[&quot; &lt;&lt; jointName &lt;&lt; &quot;]&quot;;</span>\n<span class=\"gi\">+    }</span>\n   }\n<span class=\"gi\">+  EXPECT_EQ(jointBitMask, 0x7u);</span>\n }\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-30T00:49:21.434468+00:00", "milestone": null, "updated_on": "2017-03-01T14:51:50.840282+00:00", "type": "issue", "id": 77}