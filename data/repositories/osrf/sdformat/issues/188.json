{"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/188/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/188.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/188/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/188/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/188/const-accessors-in-sdformat"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/188/vote"}}, "reporter": {"display_name": "Alejandro Castro", "uuid": "{f78f4af9-eed7-49c4-b222-5b3dc10d5093}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bf78f4af9-eed7-49c4-b222-5b3dc10d5093%7D"}, "html": {"href": "https://bitbucket.org/%7Bf78f4af9-eed7-49c4-b222-5b3dc10d5093%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9958cefe61157cc05fbc6d1a77d68a2fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsAC-3.png"}}, "nickname": "amcastro0622", "type": "user", "account_id": "557058:82e5965f-3de7-463a-8d2f-5eb310e3ca12"}, "title": "Const accessors in sdformat.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We had a [use case in our Drake code base](https://reviewable.io/reviews/robotlocomotion/drake/8828#-LD2bp_9--hRPdZXTAQL) in which we only needed const access to an `sdf::Element`. Right now the current API only offers `sdf::Element::GetElement()` which returns a mutable shared pointer to a mutable element object.\r\nIdeally we'd also like having `const Element& GetElement(const std::string&)`.\r\nMost likely similar const access would be needed in other places.", "markup": "markdown", "html": "<p>We had a <a data-is-external-link=\"true\" href=\"https://reviewable.io/reviews/robotlocomotion/drake/8828#-LD2bp_9--hRPdZXTAQL\" rel=\"nofollow\">use case in our Drake code base</a> in which we only needed const access to an <code>sdf::Element</code>. Right now the current API only offers <code>sdf::Element::GetElement()</code> which returns a mutable shared pointer to a mutable element object.\nIdeally we'd also like having <code>const Element&amp; GetElement(const std::string&amp;)</code>.\nMost likely similar const access would be needed in other places.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-05-21T19:33:28.205333+00:00", "milestone": null, "updated_on": "2018-05-21T19:33:28.205333+00:00", "type": "issue", "id": 188}