{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/204/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/204.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/204/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/204/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/204/joint-support-specifying-frames-in-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/204/vote"}}, "reporter": {"display_name": "Eric Cousineau", "uuid": "{71c9fc05-02c8-45e1-adfa-13c8ac3399dc}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D"}, "html": {"href": "https://bitbucket.org/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557057:f3a199b9-5784-4964-9644-6ef224bc7dc1/28a4d748-0fd4-4038-bf3d-55a77eb73ede/128"}}, "nickname": "eacousineau", "type": "user", "account_id": "557057:f3a199b9-5784-4964-9644-6ef224bc7dc1"}, "title": "joint: Support specifying frames in `<child>` and `<parent>`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "# Summary\r\n\r\nAt present, the `<child>` and `<parent>` elements of `<joint>` are constrained to be links:\r\nhttp://sdformat.org/spec?ver=1.6&elem=joint#joint_parent\r\n\r\nIt would be excellent if the specification permitted using frames. Per #200, if a link creates an implicit frame, then this change will be backwards-compatible at a specification level.\r\n\r\n# Motivation\r\n\r\nWhen specifying a world in SDF, it would be nice to specify joints with more semantics than just a link and an offset; e.g. if I want to weld a mug to the top of a table, I can specify two frames (completely invariant of the model frames) on the mug and table, and then just weld those two frames together. For a robot with revolute joints, you can embed better semantics when assembling the robot.\r\n\r\nI am willing to provide a draft change to the spec, and possibly to the API as well to accommodate this change while considering backwards compatibility.\r\n\r\n# Describe alternatives you've considered\r\n\r\nTTBOMK, the alternative is to use the present state, which is to manually compute the kinematics; while feasible, this is brittle due to numerics. Xacros / ruby templates shouldn't be necessary for conveniently joining things.\r\n\r\n# Additional context\r\n\r\nIf this proposal is accepted, I would like to ensure that this feature is implemented in Drake here:\r\nhttps://drake.mit.edu/doxygen_cxx/namespacedrake_1_1multibody_1_1parsing.html#a3e9bff0197c6c7f86f9ff6f8854def53\r\nhttps://drake.mit.edu/pydrake/pydrake.multibody.multibody_tree.parsing.html#pydrake.multibody.multibody_tree.parsing.AddModelFromSdfFile\r\nDownstream issue: https://github.com/RobotLocomotion/drake/issues/9910\r\n\r\n\\cc @nkoenig", "markup": "markdown", "html": "<h1 id=\"markdown-header-summary\">Summary</h1>\n<p>At present, the <code>&lt;child&gt;</code> and <code>&lt;parent&gt;</code> elements of <code>&lt;joint&gt;</code> are constrained to be links:\n<a href=\"http://sdformat.org/spec?ver=1.6&amp;elem=joint#joint_parent\" rel=\"nofollow\" class=\"ap-connect-link\">http://sdformat.org/spec?ver=1.6&amp;elem=joint#joint_parent</a></p>\n<p>It would be excellent if the specification permitted using frames. Per <a href=\"#!/osrf/sdformat/issues/200/support-multiple-frames-in-a-single-parent\" rel=\"nofollow\" title=\"&lt;frame/&gt;: Support multiple frames in a single parent? Intended scope of frames? Use link names as frames?\" class=\"ap-connect-link\"><s>#200</s></a>, if a link creates an implicit frame, then this change will be backwards-compatible at a specification level.</p>\n<h1 id=\"markdown-header-motivation\">Motivation</h1>\n<p>When specifying a world in SDF, it would be nice to specify joints with more semantics than just a link and an offset; e.g. if I want to weld a mug to the top of a table, I can specify two frames (completely invariant of the model frames) on the mug and table, and then just weld those two frames together. For a robot with revolute joints, you can embed better semantics when assembling the robot.</p>\n<p>I am willing to provide a draft change to the spec, and possibly to the API as well to accommodate this change while considering backwards compatibility.</p>\n<h1 id=\"markdown-header-describe-alternatives-youve-considered\">Describe alternatives you've considered</h1>\n<p>TTBOMK, the alternative is to use the present state, which is to manually compute the kinematics; while feasible, this is brittle due to numerics. Xacros / ruby templates shouldn't be necessary for conveniently joining things.</p>\n<h1 id=\"markdown-header-additional-context\">Additional context</h1>\n<p>If this proposal is accepted, I would like to ensure that this feature is implemented in Drake here:\n<a href=\"https://drake.mit.edu/doxygen_cxx/namespacedrake_1_1multibody_1_1parsing.html#a3e9bff0197c6c7f86f9ff6f8854def53\" rel=\"nofollow\" class=\"ap-connect-link\">https://drake.mit.edu/doxygen_cxx/namespacedrake_1_1multibody_1_1parsing.html#a3e9bff0197c6c7f86f9ff6f8854def53</a>\n<a href=\"https://drake.mit.edu/pydrake/pydrake.multibody.multibody_tree.parsing.html#pydrake.multibody.multibody_tree.parsing.AddModelFromSdfFile\" rel=\"nofollow\" class=\"ap-connect-link\">https://drake.mit.edu/pydrake/pydrake.multibody.multibody_tree.parsing.html#pydrake.multibody.multibody_tree.parsing.AddModelFromSdfFile</a>\nDownstream issue: <a href=\"https://github.com/RobotLocomotion/drake/issues/9910\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/RobotLocomotion/drake/issues/9910</a></p>\n<p>\\cc @nkoenig</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-11-02T15:15:37.553553+00:00", "milestone": null, "updated_on": "2018-11-02T15:17:51.045731+00:00", "type": "issue", "id": 204}