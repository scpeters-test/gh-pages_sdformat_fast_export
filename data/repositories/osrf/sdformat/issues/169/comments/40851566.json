{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/169/comments/40851566.json"}, "html": {"href": "#!/osrf/sdformat/issues/169#comment-40851566"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/169.json"}}, "type": "issue", "id": 169, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Proposal: Make <joint>::<axis>::<limit>::<lower>/<upper> elements optional and default to unbounded"}, "content": {"raw": "Yeah, we could continue to allow `-1` to mean `inf` for `effort` and `velocity` values.\n\nI think if/when we want to support asymmetric limits, we would need to add `<lower>` and `<upper>` elements to `<effort>` and `<velocity>`. (Unless we want those to be attributes instead? But elements would probably be better for consistency.) So even if we move to supporting asymmetric limits, we could continue to support backwards compatibility.\n\nWe could consider deprecating the use of `-1` since I think it could become confusing once asymmetric limits are supported (plus, personally, seeing a limit of `-1` when a positive value is expected gives off the appearance of a typo to me), but I wouldn't complain about just leaving not-deprecated if people generally like the use of `-1` in this context.", "markup": "markdown", "html": "<p>Yeah, we could continue to allow <code>-1</code> to mean <code>inf</code> for <code>effort</code> and <code>velocity</code> values.</p>\n<p>I think if/when we want to support asymmetric limits, we would need to add <code>&lt;lower&gt;</code> and <code>&lt;upper&gt;</code> elements to <code>&lt;effort&gt;</code> and <code>&lt;velocity&gt;</code>. (Unless we want those to be attributes instead? But elements would probably be better for consistency.) So even if we move to supporting asymmetric limits, we could continue to support backwards compatibility.</p>\n<p>We could consider deprecating the use of <code>-1</code> since I think it could become confusing once asymmetric limits are supported (plus, personally, seeing a limit of <code>-1</code> when a positive value is expected gives off the appearance of a typo to me), but I wouldn't complain about just leaving not-deprecated if people generally like the use of <code>-1</code> in this context.</p>", "type": "rendered"}, "created_on": "2017-10-27T21:25:21.905468+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 40851566}