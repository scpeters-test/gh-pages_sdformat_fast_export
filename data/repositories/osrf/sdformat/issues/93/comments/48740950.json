{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/93/comments/48740950.json"}, "html": {"href": "#!/osrf/sdformat/issues/93#comment-48740950"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/93.json"}}, "type": "issue", "id": 93, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Change the SDF spec to make <plugin> less gazebo-specific"}, "content": {"raw": "Discussion in [`gazebo-yarp-plugins`](https://github.com/robotology/gazebo-yarp-plugins/issues/392#issuecomment-434851652) points out another possible use of `SDF <plugin>` when detached from a `gazebo plugin`.\n\nThe aim here is to add a custom `SDF Element` to a `<model>` (that will be then used to override an element of a plugin), but a custom element can be add only trough a `<plugin>`.  \nA possible solution is to create a dummy plugin (e.g. `gazebo_yarp_dummy.so`)  just to be able to define the custom elements inside the plugin:\n```\n<model name=\"myModelOverriden\">\n  <plugin name=\"plugin_override\" filename=\"gazebo_yarp_dummy.so\">\n    <yarpPluginConfigurationOverride plugin_name='overriden_plugin'> </yarpPluginConfigurationOverride>\n  </plugin>\n  <include>\n    <uri>model://myModel</uri>\n  </include>\n</model>\n```\n  \nMaking the attribute `filename` optional, it would avoid the use of a dummy plugin.", "markup": "markdown", "html": "<p>Discussion in <a data-is-external-link=\"true\" href=\"https://github.com/robotology/gazebo-yarp-plugins/issues/392#issuecomment-434851652\" rel=\"nofollow\"><code>gazebo-yarp-plugins</code></a> points out another possible use of <code>SDF &lt;plugin&gt;</code> when detached from a <code>gazebo plugin</code>.</p>\n<p>The aim here is to add a custom <code>SDF Element</code> to a <code>&lt;model&gt;</code> (that will be then used to override an element of a plugin), but a custom element can be add only trough a <code>&lt;plugin&gt;</code>.<br />\nA possible solution is to create a dummy plugin (e.g. <code>gazebo_yarp_dummy.so</code>)  just to be able to define the custom elements inside the plugin:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;myModelOverriden&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;plugin</span> <span class=\"na\">name=</span><span class=\"s\">&quot;plugin_override&quot;</span> <span class=\"na\">filename=</span><span class=\"s\">&quot;gazebo_yarp_dummy.so&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;yarpPluginConfigurationOverride</span> <span class=\"na\">plugin_name=</span><span class=\"s\">&#39;overriden_plugin&#39;</span><span class=\"nt\">&gt;</span> <span class=\"nt\">&lt;/yarpPluginConfigurationOverride&gt;</span>\n  <span class=\"nt\">&lt;/plugin&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://myModel<span class=\"nt\">&lt;/uri&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>Making the attribute <code>filename</code> optional, it would avoid the use of a dummy plugin.</p>", "type": "rendered"}, "created_on": "2018-11-05T11:44:22.068369+00:00", "user": {"display_name": "Lorenzo Rapetti", "uuid": "{163ad6dd-2725-4cbb-9d5f-7078d8891005}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B163ad6dd-2725-4cbb-9d5f-7078d8891005%7D"}, "html": {"href": "https://bitbucket.org/%7B163ad6dd-2725-4cbb-9d5f-7078d8891005%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a42e8a6e30920121a4955f5/eb43c756-42e6-493a-a268-482525c964d7/128"}}, "nickname": "lorrapetti", "type": "user", "account_id": "5a42e8a6e30920121a4955f5"}, "updated_on": "2018-11-05T14:06:41.001798+00:00", "type": "issue_comment", "id": 48740950}