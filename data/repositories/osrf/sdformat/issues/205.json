{"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/205/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/205.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/205/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/205/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/205/pass-parameter-to-plugin-from-parent-model"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/205/vote"}}, "reporter": {"display_name": "Lorenzo Rapetti", "uuid": "{163ad6dd-2725-4cbb-9d5f-7078d8891005}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B163ad6dd-2725-4cbb-9d5f-7078d8891005%7D"}, "html": {"href": "https://bitbucket.org/%7B163ad6dd-2725-4cbb-9d5f-7078d8891005%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/5a42e8a6e30920121a4955f5/eb43c756-42e6-493a-a268-482525c964d7/128"}}, "nickname": "lorrapetti", "type": "user", "account_id": "5a42e8a6e30920121a4955f5"}, "title": "Pass parameter to plugin from parent model", "component": null, "votes": 1, "watches": 2, "content": {"raw": "When using nested models, I have the necessity of changing the parameters of a plugin directly from the parent model SDF without changing the SDF of the model that is included (e.g. if I want multiple instances of the same model but with different parameters).\r\n\r\nA possible solution is having a plugin that search for the configuration not only in the `plugin SDF`,  but also looking a the parent `model SDF` using [GetParent()](http://osrf-distributions.s3.amazonaws.com/sdformat/api/3.0/classsdf_1_1Element.html#a38fd0c101a51816d5ef5a9e179ae4525):  \r\ne.g.\r\n\r\n**original model**\r\n```xml\r\n<model name=\"myModel\">\r\n  <plugin name=\"myPlugin\" filename=\"myPlugin.so\">\r\n    <PluginConfiguration> ... </PluginConfiguration>\r\n  </plugin>\r\n  ...\r\n</model>\r\n```\r\n\r\n**overritten model**\r\n```xml\r\n<model name=\"overritenModel\">\r\n  <configurationOverride plugin_name='myPlugin'> ... </configurationOverride>\r\n  <include>\r\n    <uri>model://myModel</uri>\r\n  </include>\r\n</model>\r\n```\r\nHowever, this is not feasible since it is not possible to add a custom SDF <element> to a model. \r\nA custom SDF <element> can be add only in a <plugin> (thanks to special class defined in [plugin.sdf](#!/osrf/sdformat/src/d5372e7cf352d09586f6e08d60a624597f2bd4c0/sdf/1.6/plugin.sdf?at=sdf6&fileviewer=file-view-default#plugin.sdf-10)), so at the moment the solution works only using a dummy plugin that doesn't do anything:  \r\n**overritten model**\r\n```xml\r\n<model name=\"overritenModel\">\r\n  <plugin name='override_plugin' filename='dummy_plugin.so'>\r\n    <configurationOverride plugin_name='myPlugin'> ... </configurationOverride>\r\n  </plugin>\r\n  <include>\r\n    <uri>model://myModel</uri>\r\n  </include>\r\n</model>\r\n```\r\n\r\nIt would be great to have a clean way to pass parameters to a plugin in a nested model. A good way might be having those parameters as element of the <model>, and reading them from the plugin.\r\n\r\n(original discussion in gazebo-yarp-plugin at https://github.com/robotology/gazebo-yarp-plugins/issues/392)", "markup": "markdown", "html": "<p>When using nested models, I have the necessity of changing the parameters of a plugin directly from the parent model SDF without changing the SDF of the model that is included (e.g. if I want multiple instances of the same model but with different parameters).</p>\n<p>A possible solution is having a plugin that search for the configuration not only in the <code>plugin SDF</code>,  but also looking a the parent <code>model SDF</code> using <a data-is-external-link=\"true\" href=\"http://osrf-distributions.s3.amazonaws.com/sdformat/api/3.0/classsdf_1_1Element.html#a38fd0c101a51816d5ef5a9e179ae4525\" rel=\"nofollow\">GetParent()</a>:<br />\ne.g.</p>\n<p><strong>original model</strong></p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;myModel&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;plugin</span> <span class=\"na\">name=</span><span class=\"s\">&quot;myPlugin&quot;</span> <span class=\"na\">filename=</span><span class=\"s\">&quot;myPlugin.so&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;PluginConfiguration&gt;</span> ... <span class=\"nt\">&lt;/PluginConfiguration&gt;</span>\n  <span class=\"nt\">&lt;/plugin&gt;</span>\n  ...\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p><strong>overritten model</strong></p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;overritenModel&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;configurationOverride</span> <span class=\"na\">plugin_name=</span><span class=\"s\">&#39;myPlugin&#39;</span><span class=\"nt\">&gt;</span> ... <span class=\"nt\">&lt;/configurationOverride&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://myModel<span class=\"nt\">&lt;/uri&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>However, this is not feasible since it is not possible to add a custom SDF &lt;element&gt; to a model. \nA custom SDF &lt;element&gt; can be add only in a &lt;plugin&gt; (thanks to special class defined in <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/d5372e7cf352d09586f6e08d60a624597f2bd4c0/sdf/1.6/plugin.sdf?at=sdf6&amp;fileviewer=file-view-default#plugin.sdf-10\" rel=\"nofollow\">plugin.sdf</a>), so at the moment the solution works only using a dummy plugin that doesn't do anything:<br />\n<strong>overritten model</strong></p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;overritenModel&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;plugin</span> <span class=\"na\">name=</span><span class=\"s\">&#39;override_plugin&#39;</span> <span class=\"na\">filename=</span><span class=\"s\">&#39;dummy_plugin.so&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;configurationOverride</span> <span class=\"na\">plugin_name=</span><span class=\"s\">&#39;myPlugin&#39;</span><span class=\"nt\">&gt;</span> ... <span class=\"nt\">&lt;/configurationOverride&gt;</span>\n  <span class=\"nt\">&lt;/plugin&gt;</span>\n  <span class=\"nt\">&lt;include&gt;</span>\n    <span class=\"nt\">&lt;uri&gt;</span>model://myModel<span class=\"nt\">&lt;/uri&gt;</span>\n  <span class=\"nt\">&lt;/include&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>It would be great to have a clean way to pass parameters to a plugin in a nested model. A good way might be having those parameters as element of the &lt;model&gt;, and reading them from the plugin.</p>\n<p>(original discussion in gazebo-yarp-plugin at <a href=\"https://github.com/robotology/gazebo-yarp-plugins/issues/392\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/robotology/gazebo-yarp-plugins/issues/392</a>)</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-11-05T14:03:50.647799+00:00", "milestone": null, "updated_on": "2018-11-05T14:05:32.291904+00:00", "type": "issue", "id": 205}