{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/194/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/194.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/194/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/194/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/194/string-trimming-only-considers-space-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/194/vote"}}, "reporter": {"display_name": "Sean Curtis", "uuid": "{9c62c800-3df6-43f2-a552-2739fb7f01c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9c62c800-3df6-43f2-a552-2739fb7f01c4%7D"}, "html": {"href": "https://bitbucket.org/%7B9c62c800-3df6-43f2-a552-2739fb7f01c4%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/42eee233e68328248e50194d73e589afd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSC-3.png"}}, "nickname": "SeanCurtisTRI", "type": "user", "account_id": "5b6c663d2f51d429dce940d8"}, "title": "String trimming only considers space and tab", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In the [`sdf::trim`](#!/osrf/sdformat/src/2fa714812545abeb5ae05a8aebf0047aeb35d6a4/src/Types.cc?at=default&fileviewer=file-view-default#Types.cc-51) function, it is trimming off leading and trailing space and tab characters. I'd recommend going further in capturing *all* characters that C++ considers to be whitespace. Something like:\r\n\r\n\r\n```c++\r\nstd::string trim(const std::string& name) {\r\n  std::regex trim_regex(\"^\\\\s*(.*?)\\\\s*$\");\r\n  std::smatch matches;\r\n  std::regex_match(name, matches, trim_regex);\r\n  return matches[1].str();\r\n}\r\n```\r\n\r\nAlso, we might want to consider what whitespace is allowed *inside* strings. It would be silly to have a name: `\"a\\f\\vb\"`.", "markup": "markdown", "html": "<p>In the <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/2fa714812545abeb5ae05a8aebf0047aeb35d6a4/src/Types.cc?at=default&amp;fileviewer=file-view-default#Types.cc-51\" rel=\"nofollow\"><code>sdf::trim</code></a> function, it is trimming off leading and trailing space and tab characters. I'd recommend going further in capturing <em>all</em> characters that C++ considers to be whitespace. Something like:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">trim</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex</span> <span class=\"n\">trim_regex</span><span class=\"p\">(</span><span class=\"s\">&quot;^</span><span class=\"se\">\\\\</span><span class=\"s\">s*(.*?)</span><span class=\"se\">\\\\</span><span class=\"s\">s*$&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">smatch</span> <span class=\"n\">matches</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">regex_match</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">trim_regex</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">str</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Also, we might want to consider what whitespace is allowed <em>inside</em> strings. It would be silly to have a name: <code>\"a\\f\\vb\"</code>.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "1.5", "links": {"self": {"href": "data/repositories/osrf/sdformat/versions/90015.json"}}}, "edited_on": null, "created_on": "2018-08-09T16:08:33.723750+00:00", "milestone": null, "updated_on": "2018-08-09T16:08:33.723750+00:00", "type": "issue", "id": 194}