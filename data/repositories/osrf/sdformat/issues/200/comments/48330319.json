{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/200/comments/48330319.json"}, "html": {"href": "#!/osrf/sdformat/issues/200#comment-48330319"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/200.json"}}, "type": "issue", "id": 200, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "<frame/>: Support multiple frames in a single parent? Intended scope of frames? Use link names as frames?"}, "content": {"raw": "From interpreting the current code and the above answers, I've got a couple more questions whenever you have time:\n\n5) The elements that I see which have `<frames/>` listed as a child composite element are list below; however, the only place I saw this implemented seemed to be `link`. Is that a follow-up item in your current prototype branch?\n```\n$ grep -rnI -l 'filename=\"frame\\.sdf\"' sdf/1.6 | sort\nsdf/1.6/actor.sdf\nsdf/1.6/audio_source.sdf\nsdf/1.6/camera.sdf\nsdf/1.6/collision.sdf\nsdf/1.6/gui.sdf\nsdf/1.6/inertial.sdf\nsdf/1.6/joint.sdf\nsdf/1.6/light.sdf\nsdf/1.6/light_state.sdf\nsdf/1.6/link.sdf\nsdf/1.6/link_state.sdf\nsdf/1.6/model.sdf\nsdf/1.6/model_state.sdf\nsdf/1.6/population.sdf\nsdf/1.6/projector.sdf\nsdf/1.6/sensor.sdf\nsdf/1.6/visual.sdf\n```\n\n6) A frame added to any of these elements should be accessible by its parent; does this propagation stop at the\n`<model/>` level (e.g. a frame inside of `<model/>` should not refer to a frame outside of it, even if it's defined inline or a nested model)? e.g. the following is illegal:\n\n```xml\n<sdf version=\"1.6\">\n  <world name=\"default\">\n    <model name=\"box\">\n      <frame name=\"box_frame\">\n        <pose>...</pose>\n      </frame>\n      <model name=\"box_child\">\n        <frame name=\"box_child_frame_good\">...</frame>\n        <frame name=\"box_child_frame\">\n          <!-- BAD (b): Crossing model boundary, even if it's nested -> parent -->\n          <pose frame=\"box_frame\">...</pose>\n        </frame>\n      </model>\n      <frame name=\"box_frame_attached_to_child\">\n        <!-- BAD (c): Crossing model boundary, even if it's parent -> nested -->\n        <pose frame=\"box_child_frame_good\">...</frame>\n      </frame>\n    </model>\n    <model name=\"box_2\">\n      <frame name=\"box_frame_2\">\n       <!-- BAD (a): Crossing model boundary -->\n        <pose frame=\"box_frame\">...</pose>\n      </frame>\n    </model>\n  </world>\n</sdf>\n```\n\n7) The best way to avoid name collision among automatic frames would be to ensure that all non-frame elements have unique names; does SDF already require that all elements have unique names (aside from frames)? (e.g. you can have `/model//link[@name=\"my_link\"]` and implicitly `/model//frame[@name=\"my_link\"]`, but not `/model//camera[@name=\"my_link\"]`?)\n\nI'll be keeping tabs on your branch to see how things progress - thanks again!", "markup": "markdown", "html": "<p>From interpreting the current code and the above answers, I've got a couple more questions whenever you have time:</p>\n<p>5) The elements that I see which have <code>&lt;frames/&gt;</code> listed as a child composite element are list below; however, the only place I saw this implemented seemed to be <code>link</code>. Is that a follow-up item in your current prototype branch?</p>\n<div class=\"codehilite\"><pre><span></span>$ grep -rnI -l <span class=\"s1\">&#39;filename=&quot;frame\\.sdf&quot;&#39;</span> sdf/1.6 <span class=\"p\">|</span> sort\nsdf/1.6/actor.sdf\nsdf/1.6/audio_source.sdf\nsdf/1.6/camera.sdf\nsdf/1.6/collision.sdf\nsdf/1.6/gui.sdf\nsdf/1.6/inertial.sdf\nsdf/1.6/joint.sdf\nsdf/1.6/light.sdf\nsdf/1.6/light_state.sdf\nsdf/1.6/link.sdf\nsdf/1.6/link_state.sdf\nsdf/1.6/model.sdf\nsdf/1.6/model_state.sdf\nsdf/1.6/population.sdf\nsdf/1.6/projector.sdf\nsdf/1.6/sensor.sdf\nsdf/1.6/visual.sdf\n</pre></div>\n\n\n<p>6) A frame added to any of these elements should be accessible by its parent; does this propagation stop at the\n<code>&lt;model/&gt;</code> level (e.g. a frame inside of <code>&lt;model/&gt;</code> should not refer to a frame outside of it, even if it's defined inline or a nested model)? e.g. the following is illegal:</p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">&quot;1.6&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;world</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_frame&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>...<span class=\"nt\">&lt;/pose&gt;</span>\n      <span class=\"nt\">&lt;/frame&gt;</span>\n      <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_child&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_child_frame_good&quot;</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/frame&gt;</span>\n        <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_child_frame&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"c\">&lt;!-- BAD (b): Crossing model boundary, even if it&#39;s nested -&gt; parent --&gt;</span>\n          <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;box_frame&quot;</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;/frame&gt;</span>\n      <span class=\"nt\">&lt;/model&gt;</span>\n      <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_frame_attached_to_child&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!-- BAD (c): Crossing model boundary, even if it&#39;s parent -&gt; nested --&gt;</span>\n        <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;box_child_frame_good&quot;</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/frame&gt;</span>\n      <span class=\"nt\">&lt;/frame&gt;</span>\n    <span class=\"nt\">&lt;/model&gt;</span>\n    <span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_2&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;box_frame_2&quot;</span><span class=\"nt\">&gt;</span>\n       <span class=\"c\">&lt;!-- BAD (a): Crossing model boundary --&gt;</span>\n        <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;box_frame&quot;</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/pose&gt;</span>\n      <span class=\"nt\">&lt;/frame&gt;</span>\n    <span class=\"nt\">&lt;/model&gt;</span>\n  <span class=\"nt\">&lt;/world&gt;</span>\n<span class=\"nt\">&lt;/sdf&gt;</span>\n</pre></div>\n\n\n<p>7) The best way to avoid name collision among automatic frames would be to ensure that all non-frame elements have unique names; does SDF already require that all elements have unique names (aside from frames)? (e.g. you can have <code>/model//link[@name=\"my_link\"]</code> and implicitly <code>/model//frame[@name=\"my_link\"]</code>, but not <code>/model//camera[@name=\"my_link\"]</code>?)</p>\n<p>I'll be keeping tabs on your branch to see how things progress - thanks again!</p>", "type": "rendered"}, "created_on": "2018-10-13T17:26:41.619353+00:00", "user": {"display_name": "Eric Cousineau", "uuid": "{71c9fc05-02c8-45e1-adfa-13c8ac3399dc}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D"}, "html": {"href": "https://bitbucket.org/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557057:f3a199b9-5784-4964-9644-6ef224bc7dc1/28a4d748-0fd4-4038-bf3d-55a77eb73ede/128"}}, "nickname": "eacousineau", "type": "user", "account_id": "557057:f3a199b9-5784-4964-9644-6ef224bc7dc1"}, "updated_on": null, "type": "issue_comment", "id": 48330319}