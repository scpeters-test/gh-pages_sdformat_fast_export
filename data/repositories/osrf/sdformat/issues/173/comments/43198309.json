{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/173/comments/43198309.json"}, "html": {"href": "#!/osrf/sdformat/issues/173#comment-43198309"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/173.json"}}, "type": "issue", "id": 173, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Write a <geometry> once and reuse it"}, "content": {"raw": "*tl; dr: avoid duplicate ways of achieving the same thing, there are other ways to improve read/writability*\n\nI agree that this would address a real pain point with the creation of SDF files. But I'd like to point out that every addition to the SDF spec affects more than just the reference C++ parser (`libsdformat`) and Gazebo's parsing.  It affects other parsers such as [GzWeb's parser in javascript](https://bitbucket.org/osrf/gzweb/src/e09e1f1881d791bcccb3ca249f9d97c9b5fc7e2e/gz3d/src/gzsdfparser.js?at=default&fileviewer=file-view-default). The larger the spec is, the harder it is to keep all parsers agreeing with each other.\n\nI would vote against having more than one way of expressing the same thing. This proposal would add readability at a high parsing cost for something which is already doable. I actually think this is something which COLLADA is bad at; there are many ways of achieving the same thing so parsers often end up with different results, and files exported by one application fail to work properly on another.\n\nInstead, I would propose we encourage the use of templates to generate SDF files as a way to improve readability and writability. I don't think there is a need for the SDF file itself to be manually written. For example, here are two ways of generating your example with ERB:\n\n## In a single file\n\n~~~\n<%\n  geometry  = \"\"\"\n    <geometry>\n      <box><size>1 1 1</size></box>\n    </geometry>\n  \"\"\"\n%>\n\n<model name=\"my_car\">\n  <link name=\"some_link\">\n    <visual name=\"its_visual\">\n      <%= geometry %>\n    </visual>\n    <collision name=\"its_collision\">\n      <%= geometry %>\n    </collision>\n   </link>\n</model>\n~~~\n\n## Including from other files\n\ngeometry.erb\n\n~~~\n      <geometry>\n        <box><size>1 1 1</size></box>\n      </geometry>\n~~~\n\nmodel.erb\n\n~~~\n<%\n  # Relative path from where the script is being run to the script's directory\n  DIR = File.dirname(__FILE__)\n\n  # Helper function to import another erb file\n  def fromFile filename\n    return ERB.new(File.read(filename), nil, nil, '_sub01').result(binding)\n  end\n%>\n\n<model name=\"my_car\">\n  <link name=\"some_link\">\n    <visual name=\"its_visual\">\n      <%= fromFile(DIR + \"/geometry.erb\") %>\n    </visual>\n    <collision name=\"its_collision\">\n      <%= fromFile(DIR + \"/geometry.erb\") %>\n    </collision>\n   </link>\n</model>\n~~~", "markup": "markdown", "html": "<p><em>tl; dr: avoid duplicate ways of achieving the same thing, there are other ways to improve read/writability</em></p>\n<p>I agree that this would address a real pain point with the creation of SDF files. But I'd like to point out that every addition to the SDF spec affects more than just the reference C++ parser (<code>libsdformat</code>) and Gazebo's parsing.  It affects other parsers such as <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gzweb/src/e09e1f1881d791bcccb3ca249f9d97c9b5fc7e2e/gz3d/src/gzsdfparser.js?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">GzWeb's parser in javascript</a>. The larger the spec is, the harder it is to keep all parsers agreeing with each other.</p>\n<p>I would vote against having more than one way of expressing the same thing. This proposal would add readability at a high parsing cost for something which is already doable. I actually think this is something which COLLADA is bad at; there are many ways of achieving the same thing so parsers often end up with different results, and files exported by one application fail to work properly on another.</p>\n<p>Instead, I would propose we encourage the use of templates to generate SDF files as a way to improve readability and writability. I don't think there is a need for the SDF file itself to be manually written. For example, here are two ways of generating your example with ERB:</p>\n<h2 id=\"markdown-header-in-a-single-file\">In a single file</h2>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">&lt;%</span>\n  <span class=\"n\">geometry</span>  <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">    &lt;geometry&gt;</span>\n<span class=\"s2\">      &lt;box&gt;&lt;size&gt;1 1 1&lt;/size&gt;&lt;/box&gt;</span>\n<span class=\"s2\">    &lt;/geometry&gt;</span>\n<span class=\"s2\">  &quot;&quot;&quot;</span>\n<span class=\"cp\">%&gt;</span>\n\n<span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;my_car&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;some_link&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;visual</span> <span class=\"na\">name=</span><span class=\"s\">&quot;its_visual&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"cp\">&lt;%=</span> <span class=\"n\">geometry</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"nt\">&lt;/visual&gt;</span>\n    <span class=\"nt\">&lt;collision</span> <span class=\"na\">name=</span><span class=\"s\">&quot;its_collision&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"cp\">&lt;%=</span> <span class=\"n\">geometry</span> <span class=\"cp\">%&gt;</span>\n    <span class=\"nt\">&lt;/collision&gt;</span>\n   <span class=\"nt\">&lt;/link&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<h2 id=\"markdown-header-including-from-other-files\">Including from other files</h2>\n<p>geometry.erb</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"nt\">&lt;geometry&gt;</span>\n        <span class=\"nt\">&lt;box&gt;&lt;size&gt;</span>1 1 1<span class=\"nt\">&lt;/size&gt;&lt;/box&gt;</span>\n      <span class=\"nt\">&lt;/geometry&gt;</span>\n</pre></div>\n\n\n<p>model.erb</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&lt;%</span>\n  <span class=\"c1\"># Relative path from where the script is being run to the script&#39;s directory</span>\n  <span class=\"n\">DIR</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">__FILE__</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Helper function to import another erb file</span>\n  <span class=\"k\">def</span> <span class=\"nf\">fromFile</span> <span class=\"n\">filename</span>\n    <span class=\"k\">return</span> <span class=\"n\">ERB</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"n\">nil</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_sub01&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">binding</span><span class=\"p\">)</span>\n  <span class=\"n\">end</span>\n<span class=\"o\">%&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">model</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my_car&quot;</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">link</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;some_link&quot;</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">visual</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;its_visual&quot;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;%=</span> <span class=\"n\">fromFile</span><span class=\"p\">(</span><span class=\"n\">DIR</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/geometry.erb&quot;</span><span class=\"p\">)</span> <span class=\"o\">%&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">visual</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">collision</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;its_collision&quot;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;%=</span> <span class=\"n\">fromFile</span><span class=\"p\">(</span><span class=\"n\">DIR</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/geometry.erb&quot;</span><span class=\"p\">)</span> <span class=\"o\">%&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"n\">collision</span><span class=\"o\">&gt;</span>\n   <span class=\"o\">&lt;/</span><span class=\"n\">link</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">model</span><span class=\"o\">&gt;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-02-09T21:09:30.036216+00:00", "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "updated_on": null, "type": "issue_comment", "id": 43198309}