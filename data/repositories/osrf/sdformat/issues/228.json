{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/228/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/228.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/228/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/228/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/228/diagnostics-for-invalid-numeric-input"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/228/vote"}}, "reporter": {"display_name": "Jeremy Nimmer", "uuid": "{127cef5b-add8-4be7-9175-2c7214f56bcf}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B127cef5b-add8-4be7-9175-2c7214f56bcf%7D"}, "html": {"href": "https://bitbucket.org/%7B127cef5b-add8-4be7-9175-2c7214f56bcf%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/de15ec9b6a4e1718bcc2246bed83cb14d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJN-6.png"}}, "nickname": "Jeremy Nimmer", "type": "user", "account_id": "5ad664a1d8b95a2b34f24648"}, "title": "Diagnostics for invalid numeric input", "component": null, "votes": 1, "watches": 2, "content": {"raw": "\\# Summary\r\n\r\nWhen a user makes a mistake and provides invalid data, e.g., for a \\(link pose\\)\\[[http://sdformat.org/spec?ver=1.6&elem=link#link\\_pose](http://sdformat.org/spec?ver=1.6&elem=link#link_pose)\\], the sdformat parser should provide a diagnostic.\r\n\r\n\\# Motivation\r\n\r\nIn many cases \\`\\*.sdf\\` files are authored by hand, possibly even with xacro or related tools.  It is easy to accidentally make a typo and end up with a file that appears to be valid, but in fact will behave poorly in simulation for some unknown reason, e.g., if `1.O1e2` is parsed as \"1.\" instead of \"101.\".\r\n\r\n\\# Describe alternatives you've considered\r\n\r\nI would appreciate if the parser provided an API channel for errors, but I believe this isn't available yet \u2013 even for mistakes that it does provide diagnostics for.  Starting out with log printouts for numeric typos would be a step in the right direction.\r\n\r\n\\# Additional context\r\n\r\nHere is an example stanza that does not produce any diagnostics as of tag/sdformat9\\_9.1.0:\r\n\r\n```xml\r\n      <collision name='link1_collision1'>\r\n        <pose>foo foo foo foo foo foo foo foo -1e899999</pose>\r\n        <geometry>\r\n          <plane>\r\n            <normal>1.0 2.0 3.0 foo</normal>\r\n          </plane>\r\n        </geometry>\r\n        <surface>\r\n          <friction>\r\n            <ode>\r\n              <mu>0.8 gravitons</mu>\r\n              <mu2>0.3 muons</mu2>\r\n            </ode>\r\n          </friction>\r\n        </surface>\r\n      </collision>\r\n```\r\n\r\n\u200c", "markup": "markdown", "html": "<p># Summary</p>\n<p>When a user makes a mistake and provides invalid data, e.g., for a (link pose)[<a data-is-external-link=\"true\" href=\"http://sdformat.org/spec?ver=1.6&amp;elem=link#link_pose\" rel=\"nofollow\">http://sdformat.org/spec?ver=1.6&amp;elem=link#link_pose</a>], the sdformat parser should provide a diagnostic.</p>\n<p># Motivation</p>\n<p>In many cases `*.sdf` files are authored by hand, possibly even with xacro or related tools.  It is easy to accidentally make a typo and end up with a file that appears to be valid, but in fact will behave poorly in simulation for some unknown reason, e.g., if <code>1.O1e2</code> is parsed as \"1.\" instead of \"101.\".</p>\n<p># Describe alternatives you've considered</p>\n<p>I would appreciate if the parser provided an API channel for errors, but I believe this isn't available yet \u2013 even for mistakes that it does provide diagnostics for.  Starting out with log printouts for numeric typos would be a step in the right direction.</p>\n<p># Additional context</p>\n<p>Here is an example stanza that does not produce any diagnostics as of tag/sdformat9_9.1.0:</p>\n<div class=\"codehilite language-xml\"><pre><span></span>      <span class=\"nt\">&lt;collision</span> <span class=\"na\">name=</span><span class=\"s\">&#39;link1_collision1&#39;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;pose&gt;</span>foo foo foo foo foo foo foo foo -1e899999<span class=\"nt\">&lt;/pose&gt;</span>\n        <span class=\"nt\">&lt;geometry&gt;</span>\n          <span class=\"nt\">&lt;plane&gt;</span>\n            <span class=\"nt\">&lt;normal&gt;</span>1.0 2.0 3.0 foo<span class=\"nt\">&lt;/normal&gt;</span>\n          <span class=\"nt\">&lt;/plane&gt;</span>\n        <span class=\"nt\">&lt;/geometry&gt;</span>\n        <span class=\"nt\">&lt;surface&gt;</span>\n          <span class=\"nt\">&lt;friction&gt;</span>\n            <span class=\"nt\">&lt;ode&gt;</span>\n              <span class=\"nt\">&lt;mu&gt;</span>0.8 gravitons<span class=\"nt\">&lt;/mu&gt;</span>\n              <span class=\"nt\">&lt;mu2&gt;</span>0.3 muons<span class=\"nt\">&lt;/mu2&gt;</span>\n            <span class=\"nt\">&lt;/ode&gt;</span>\n          <span class=\"nt\">&lt;/friction&gt;</span>\n        <span class=\"nt\">&lt;/surface&gt;</span>\n      <span class=\"nt\">&lt;/collision&gt;</span>\n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-03-13T19:29:36.882254+00:00", "milestone": null, "updated_on": "2020-03-13T19:29:36.882254+00:00", "type": "issue", "id": 228}