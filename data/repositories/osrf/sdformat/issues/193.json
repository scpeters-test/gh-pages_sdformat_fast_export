{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/193/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/193.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/193/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/193/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/193/using-element-get-has-surprising-defaults"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/193/vote"}}, "reporter": {"display_name": "SeanCurtis-TRI", "uuid": "{fc23d5a9-ee84-4708-929f-c7bce7adc656}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfc23d5a9-ee84-4708-929f-c7bce7adc656%7D"}, "html": {"href": "https://bitbucket.org/%7Bfc23d5a9-ee84-4708-929f-c7bce7adc656%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/d777f5855922232497120ed301002a39d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsS-0.png"}}, "nickname": "SeanCurtis-TRI", "type": "user", "account_id": "5b3a4942ff95f12e1eab1e6b"}, "title": "Using Element::get<Color> has surprising defaults", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When parsing a `<material>`  tag for (e.g.,) diffuse color information, one can do the following (assuming that `material_element` is an `sdf::Element`):\r\n\r\n```c++\r\nColor default_color(0.25, 0.5, 0.75, 0.8);\r\nmaterial_element.Get<Color>(\"diffuse\", default_color);\r\n```\r\n\r\nThe specification suggests that the corresponding tag should look like:\r\n`<diffuse>r g b a</diffuse>`\r\n\r\nHowever, the following tags produce the following colors:\r\n`<diffuse>1</diffuse` --> 1 0 0 1\r\n`<diffuse>1 0.25</diffuse>` --> 1 0.25 0 1\r\n`<diffuse>1 0.25 0.5</diffuse>` --> 1 0.25 0.5 1\r\n`<diffuse>1 0.25 0.5 0.75 2</diffuse>` --> 1 0.25 0.5 0.75\r\n\r\nThe rules I infer are:\r\n\r\n1.   If a is missing, use the default value 1.\r\n2.  if r, g, or b are missing, use the default value 0\r\n3.  If there are two many values, simply truncate.\r\n\r\nI think this is *incredibly* counter-intuitive and not strictly helpful. One can make solid arguments that supplying rgb (in place of rgba) is a reasonable overload. But all of the rest seem kind of insane.", "markup": "markdown", "html": "<p>When parsing a <code>&lt;material&gt;</code>  tag for (e.g.,) diffuse color information, one can do the following (assuming that <code>material_element</code> is an <code>sdf::Element</code>):</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">Color</span> <span class=\"nf\">default_color</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">);</span>\n<span class=\"n\">material_element</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"o\">&lt;</span><span class=\"n\">Color</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;diffuse&quot;</span><span class=\"p\">,</span> <span class=\"n\">default_color</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>The specification suggests that the corresponding tag should look like:\n<code>&lt;diffuse&gt;r g b a&lt;/diffuse&gt;</code></p>\n<p>However, the following tags produce the following colors:\n<code>&lt;diffuse&gt;1&lt;/diffuse</code> --&gt; 1 0 0 1\n<code>&lt;diffuse&gt;1 0.25&lt;/diffuse&gt;</code> --&gt; 1 0.25 0 1\n<code>&lt;diffuse&gt;1 0.25 0.5&lt;/diffuse&gt;</code> --&gt; 1 0.25 0.5 1\n<code>&lt;diffuse&gt;1 0.25 0.5 0.75 2&lt;/diffuse&gt;</code> --&gt; 1 0.25 0.5 0.75</p>\n<p>The rules I infer are:</p>\n<ol>\n<li>If a is missing, use the default value 1.</li>\n<li>if r, g, or b are missing, use the default value 0</li>\n<li>If there are two many values, simply truncate.</li>\n</ol>\n<p>I think this is <em>incredibly</em> counter-intuitive and not strictly helpful. One can make solid arguments that supplying rgb (in place of rgba) is a reasonable overload. But all of the rest seem kind of insane.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-07-02T15:52:33.801042+00:00", "milestone": null, "updated_on": "2018-07-02T16:06:17.373427+00:00", "type": "issue", "id": 193}