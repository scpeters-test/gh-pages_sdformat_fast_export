{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/126/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/126.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/126/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/126/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/126/unresolved-symbols-when-compiling-with-qts"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/126/vote"}}, "reporter": {"display_name": "Federico Ferri", "uuid": "{477cc526-91b3-4ba1-aa68-153314ae0d06}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B477cc526-91b3-4ba1-aa68-153314ae0d06%7D"}, "html": {"href": "https://bitbucket.org/%7B477cc526-91b3-4ba1-aa68-153314ae0d06%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/70c26ef03afcef7dd3f3418097b38d80d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFF-6.png"}}, "nickname": "f_ferri", "type": "user", "account_id": "557058:ce22a76d-9e46-4e79-a421-5813d1d651af"}, "title": "unresolved symbols when compiling with Qt's qmake", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I get undefined symbols:\r\n\r\n* sdf::readFile(std::string const&, boost::shared_ptr<sdf::SDF>)\r\n* sdf::Element::HasElement(std::string const&) const\r\n\r\nwith this minimal testcase:\r\n\r\n    #include <sdf/sdf.hh>\r\n    int main(int argc, char **argv)\r\n    {\r\n        sdf::SDFPtr sdfParsed(new sdf::SDF);\r\n        sdf::init(sdfParsed);\r\n        if(sdf::readFile(argv[1], sdfParsed))\r\n        {\r\n            sdf::ElementPtr e = sdfParsed->root;\r\n            if(e->HasElement(\"model\"))\r\n            {\r\n                std::cout << \"the SDF contains a <model> element\" << std::endl;\r\n            }\r\n        }\r\n    }\r\n\r\nNote: platform is OSX, sdformat (2.3.2) is installed via homebrew.\r\n\r\nWhen compiling with plain make, no undefined symbols.\r\n\r\nqmakefile.pro:\r\n\r\n    QT += core\r\n    TARGET = sdftest\r\n    INCLUDEPATH += \"/usr/local/Cellar/boost/1.60.0_1/include\"\r\n    INCLUDEPATH += \"/usr/local/Cellar/sdformat/2.3.2/include/sdformat-2.3\"\r\n    INCLUDEPATH += \"/usr/local/Cellar/tinyxml/2.6.2/include\"\r\n    QMAKE_LIBDIR += \"/usr/local/Cellar/sdformat/2.3.2/lib\"\r\n    LIBS += \"-lsdformat\"\r\n    SOURCES += sdftest.cpp\r\n\r\nMakefile\r\n\r\n    CXXFLAGS=-I/usr/local/Cellar/sdformat/2.3.2/include/sdformat-2.3\r\n    sdftest: sdftest.o\r\n        $(CXX) -L/usr/local/Cellar/sdformat/2.3.2/lib -lsdformat $^ -o $@", "markup": "markdown", "html": "<p>I get undefined symbols:</p>\n<ul>\n<li>sdf::readFile(std::string const&amp;, boost::shared_ptr&lt;sdf::SDF&gt;)</li>\n<li>sdf::Element::HasElement(std::string const&amp;) const</li>\n</ul>\n<p>with this minimal testcase:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sdf/sdf.hh&gt;</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">SDFPtr</span> <span class=\"n\">sdfParsed</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">SDF</span><span class=\"p\">);</span>\n    <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">sdfParsed</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sdfParsed</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">ElementPtr</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">sdfParsed</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">-&gt;</span><span class=\"n\">HasElement</span><span class=\"p\">(</span><span class=\"s\">&quot;model&quot;</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;the SDF contains a &lt;model&gt; element&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Note: platform is OSX, sdformat (2.3.2) is installed via homebrew.</p>\n<p>When compiling with plain make, no undefined symbols.</p>\n<p>qmakefile.pro:</p>\n<div class=\"codehilite\"><pre><span></span>QT += core\nTARGET = sdftest\nINCLUDEPATH += &quot;/usr/local/Cellar/boost/1.60.0_1/include&quot;\nINCLUDEPATH += &quot;/usr/local/Cellar/sdformat/2.3.2/include/sdformat-2.3&quot;\nINCLUDEPATH += &quot;/usr/local/Cellar/tinyxml/2.6.2/include&quot;\nQMAKE_LIBDIR += &quot;/usr/local/Cellar/sdformat/2.3.2/lib&quot;\nLIBS += &quot;-lsdformat&quot;\nSOURCES += sdftest.cpp\n</pre></div>\n\n\n<p>Makefile</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nv\">CXXFLAGS</span><span class=\"o\">=</span>-I/usr/local/Cellar/sdformat/2.3.2/include/sdformat-2.3\n<span class=\"nf\">sdftest</span><span class=\"o\">:</span> <span class=\"n\">sdftest</span>.<span class=\"n\">o</span>\n    <span class=\"k\">$(</span>CXX<span class=\"k\">)</span> -L/usr/local/Cellar/sdformat/2.3.2/lib -lsdformat $^ -o <span class=\"nv\">$@</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-06-13T21:10:31.886509+00:00", "milestone": null, "updated_on": "2016-06-14T14:19:53.741841+00:00", "type": "issue", "id": 126}