{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/128/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/128.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/128/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/128/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/128/override-arbitrary-parts-of-included"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/128/vote"}}, "reporter": {"display_name": "Dirk Thomas", "uuid": "{a8effe61-90f2-4949-89a8-9c6972071de7}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba8effe61-90f2-4949-89a8-9c6972071de7%7D"}, "html": {"href": "https://bitbucket.org/%7Ba8effe61-90f2-4949-89a8-9c6972071de7%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2f77876936467715bd75258c967bcaa4d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDT-2.png"}}, "nickname": "Dirk Thomas", "type": "user", "account_id": "557058:763d049c-c4c6-4e59-85a5-2d7a8fbbdd58"}, "title": "override arbitrary parts of included models", "component": null, "votes": 3, "watches": 4, "content": {"raw": "Currently only the `pose` and the `static` flag can be overridden for an included model. It would be great if this would be possible for any element.\r\n\r\nAn example use case would be to override the visual material and give the model a different color.\r\n\r\nWithout this feature it is not possible to reuse an existing model without either:\r\n\r\n* converting it into a template (which you might not have write access to if it is a third-party model)\r\n* copy-n-paste it and then modify it (which is kind of sad)\r\n\r\nThe markup could look like this:\r\n\r\n```\r\n<include>\r\n  <uri>model://reused-model</uri>\r\n  <override>\r\n    <!-- allow anything here which is valid in a normal model -->\r\n  </override>\r\n</include>\r\n```\r\n\r\nIn order to determine if (nested) elements in the override section should be appended or actually override existing elements of the included model each tag (the tag name as well as its attributes) could be checked for equality. The override tag itself isn't necessary. The overriding elements could be direct children of `include`.", "markup": "markdown", "html": "<p>Currently only the <code>pose</code> and the <code>static</code> flag can be overridden for an included model. It would be great if this would be possible for any element.</p>\n<p>An example use case would be to override the visual material and give the model a different color.</p>\n<p>Without this feature it is not possible to reuse an existing model without either:</p>\n<ul>\n<li>converting it into a template (which you might not have write access to if it is a third-party model)</li>\n<li>copy-n-paste it and then modify it (which is kind of sad)</li>\n</ul>\n<p>The markup could look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;include&gt;</span>\n  <span class=\"nt\">&lt;uri&gt;</span>model://reused-model<span class=\"nt\">&lt;/uri&gt;</span>\n  <span class=\"nt\">&lt;override&gt;</span>\n    <span class=\"c\">&lt;!-- allow anything here which is valid in a normal model --&gt;</span>\n  <span class=\"nt\">&lt;/override&gt;</span>\n<span class=\"nt\">&lt;/include&gt;</span>\n</pre></div>\n\n\n<p>In order to determine if (nested) elements in the override section should be appended or actually override existing elements of the included model each tag (the tag name as well as its attributes) could be checked for equality. The override tag itself isn't necessary. The overriding elements could be direct children of <code>include</code>.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2016-07-13T19:34:45.378171+00:00", "milestone": null, "updated_on": "2017-06-26T22:30:59.385549+00:00", "type": "issue", "id": 128}