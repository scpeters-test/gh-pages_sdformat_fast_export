{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/202/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/202.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/202/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/202/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/202/bad_any_cast-after-element-getany-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/202/vote"}}, "reporter": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "title": "bad_any_cast after Element::GetAny with gz11 on homebrew", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There are [two failing tests](https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/) for the `gz11` branch on macOS mojave.\r\n\r\n* https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/UpdateElement/\r\n* https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/GetAny/\r\n\r\nI started by investigating the `GetAny` test failure from `UNIT_SDF_TEST`, which failed at [line 418](#!/osrf/sdformat/src/c8c23c1dc382d2eccb814bc3a857098048f58e61/src/SDF_TEST.cc#lines-418), which occurs when a `std::bad_any_cast` is thrown after calling `std::any_cast<ignition::math::Pose3d>(anyValue)`. I added some print statements to confirm that `anyValue` should have the right type:\r\n\r\n~~~\r\ndiff -r c8c23c1dc382 src/SDF_TEST.cc\r\n--- a/src/SDF_TEST.cc\tFri Sep 14 00:49:58 2018 +0000\r\n+++ b/src/SDF_TEST.cc\tThu Sep 13 17:59:35 2018 -0700\r\n@@ -410,6 +410,13 @@\r\n     std::any anyValue = poseElem->GetAny();\r\n     try\r\n     {\r\n+      using Pose = ignition::math::Pose3d;\r\n+      std::cerr << typeid(Pose).name()\r\n+                << \", \" << typeid(Pose).hash_code()\r\n+                << std::endl;\r\n+      std::cerr << anyValue.type().name()\r\n+                << \", \" << anyValue.type().hash_code()\r\n+                << std::endl;\r\n       EXPECT_EQ(std::any_cast<ignition::math::Pose3d>(anyValue),\r\n           ignition::math::Pose3d(0, 1, 2, 0, 0, 0));\r\n     }\r\n~~~\r\n\r\nwhich gives the following output, showing that the types have matching names, but different `hash_code`s.\r\n\r\n~~~\r\n[ RUN      ] SDF.GetAny\r\nN8ignition4math2v65Pose3IdEE, 4381304960\r\nN8ignition4math2v65Pose3IdEE, 4382335968\r\n/Users/jenkins/workspace/sdformat-ci-pr_any-homebrew-amd64-mojave/sdformat/src/SDF_TEST.cc:425: Failure\r\nFailed\r\n[  FAILED  ] SDF.GetAny (57 ms)\r\n~~~\r\n\r\nAfter some googling, I found an [issue with clang](https://bugs.llvm.org/show_bug.cgi?id=38485) with a reproducible test case (that was originally reported on [stackoverflow](https://stackoverflow.com/questions/51693605/clang-compiled-program-throws-stdbad-any-cast-during-stdany-cast)). I think it's an issue with `std::any` in clang, because the reproducible test case works with gcc or if you switch from `std::any` to `boost::any`.\r\n\r\nI think we see the issue because `ignition::math::Pose3d` is a template type, and it may be seeing different versions of of that type from different shared libraries and not recognizing that they are the same. I have requested a llvm.org account so that I can comment on that issue.", "markup": "markdown", "html": "<p>There are <a data-is-external-link=\"true\" href=\"https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/\" rel=\"nofollow\">two failing tests</a> for the <code>gz11</code> branch on macOS mojave.</p>\n<ul>\n<li><a href=\"https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/UpdateElement/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/UpdateElement/</a></li>\n<li><a href=\"https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/GetAny/\" rel=\"nofollow\" class=\"ap-connect-link\">https://build.osrfoundation.org/job/sdformat-ci-pr_any-homebrew-amd64-mojave/1/testReport/(root)/SDF/GetAny/</a></li>\n</ul>\n<p>I started by investigating the <code>GetAny</code> test failure from <code>UNIT_SDF_TEST</code>, which failed at <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/c8c23c1dc382d2eccb814bc3a857098048f58e61/src/SDF_TEST.cc#lines-418\" rel=\"nofollow\">line 418</a>, which occurs when a <code>std::bad_any_cast</code> is thrown after calling <code>std::any_cast&lt;ignition::math::Pose3d&gt;(anyValue)</code>. I added some print statements to confirm that <code>anyValue</code> should have the right type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r c8c23c1dc382 src/SDF_TEST.cc</span>\n<span class=\"gd\">--- a/src/SDF_TEST.cc   Fri Sep 14 00:49:58 2018 +0000</span>\n<span class=\"gi\">+++ b/src/SDF_TEST.cc   Thu Sep 13 17:59:35 2018 -0700</span>\n<span class=\"gu\">@@ -410,6 +410,13 @@</span>\n     std::any anyValue = poseElem-&gt;GetAny();\n     try\n     {\n<span class=\"gi\">+      using Pose = ignition::math::Pose3d;</span>\n<span class=\"gi\">+      std::cerr &lt;&lt; typeid(Pose).name()</span>\n<span class=\"gi\">+                &lt;&lt; &quot;, &quot; &lt;&lt; typeid(Pose).hash_code()</span>\n<span class=\"gi\">+                &lt;&lt; std::endl;</span>\n<span class=\"gi\">+      std::cerr &lt;&lt; anyValue.type().name()</span>\n<span class=\"gi\">+                &lt;&lt; &quot;, &quot; &lt;&lt; anyValue.type().hash_code()</span>\n<span class=\"gi\">+                &lt;&lt; std::endl;</span>\n       EXPECT_EQ(std::any_cast&lt;ignition::math::Pose3d&gt;(anyValue),\n           ignition::math::Pose3d(0, 1, 2, 0, 0, 0));\n     }\n</pre></div>\n\n\n<p>which gives the following output, showing that the types have matching names, but different <code>hash_code</code>s.</p>\n<div class=\"codehilite\"><pre><span></span>[ RUN      ] SDF.GetAny\nN8ignition4math2v65Pose3IdEE, 4381304960\nN8ignition4math2v65Pose3IdEE, 4382335968\n/Users/jenkins/workspace/sdformat-ci-pr_any-homebrew-amd64-mojave/sdformat/src/SDF_TEST.cc:425: Failure\nFailed\n[  FAILED  ] SDF.GetAny (57 ms)\n</pre></div>\n\n\n<p>After some googling, I found an <a data-is-external-link=\"true\" href=\"https://bugs.llvm.org/show_bug.cgi?id=38485\" rel=\"nofollow\">issue with clang</a> with a reproducible test case (that was originally reported on <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/questions/51693605/clang-compiled-program-throws-stdbad-any-cast-during-stdany-cast\" rel=\"nofollow\">stackoverflow</a>). I think it's an issue with <code>std::any</code> in clang, because the reproducible test case works with gcc or if you switch from <code>std::any</code> to <code>boost::any</code>.</p>\n<p>I think we see the issue because <code>ignition::math::Pose3d</code> is a template type, and it may be seeing different versions of of that type from different shared libraries and not recognizing that they are the same. I have requested a llvm.org account so that I can comment on that issue.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-09-14T01:12:33.564021+00:00", "milestone": null, "updated_on": "2019-03-06T06:33:34.881957+00:00", "type": "issue", "id": 202}