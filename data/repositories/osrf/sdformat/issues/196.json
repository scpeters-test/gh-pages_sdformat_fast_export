{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "links": {"attachments": {"href": "data/repositories/osrf/sdformat/issues/196/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/sdformat/issues/196.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/196/watch"}, "comments": {"href": "data/repositories/osrf/sdformat/issues/196/comments_page=1.json"}, "html": {"href": "#!/osrf/sdformat/issues/196/material-library-and-material-instances"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/issues/196/vote"}}, "reporter": {"display_name": "Sean Curtis", "uuid": "{9c62c800-3df6-43f2-a552-2739fb7f01c4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9c62c800-3df6-43f2-a552-2739fb7f01c4%7D"}, "html": {"href": "https://bitbucket.org/%7B9c62c800-3df6-43f2-a552-2739fb7f01c4%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/42eee233e68328248e50194d73e589afd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSC-3.png"}}, "nickname": "SeanCurtisTRI", "type": "user", "account_id": "5b6c663d2f51d429dce940d8"}, "title": "Material library and material instances.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Most tags have a *required* `name` tag. The `<material>` tag is one conspicuous exception (the other being `<geometry>`).  The assumption is that they don't have names because they aren't referenced by any other tags.\r\n\r\nHowever, if we named them, this would give us the ability to build a library of materials and then \"instance\" them, in some sense. This could be done formally (i.e., declare a material library tag and then define a bunch of materials that can be referenced by name) or in an ad hoc mechanism (I.e., one instance `<material name=\"green\">...</material>` can define a material and another reference could make use of it by sharing the name and defining no properties). This kind of library/instance paradigm would assist renderers in recognizing the same material being instanced (rather than having to infer it).\r\n\r\nThis is superficially related to #173 in that both would lead to a more compact representation of the robot in the SDF file. But the emphasis of this request is not on the *authoring* side, but on the consuming side -- it provides a meaningful basis for hashing materials (via name) at parse time rather than having to do it at implementation.\r\n\r\nIt obviously creates an increased burden on the parser (i.e., two definitions cannot exist for the same material name in the same scope), but that's a relatively trivial test and failing the test should indicate outright failure with an appropriate error message to the tune of \"malformed SDF, try again\".", "markup": "markdown", "html": "<p>Most tags have a <em>required</em> <code>name</code> tag. The <code>&lt;material&gt;</code> tag is one conspicuous exception (the other being <code>&lt;geometry&gt;</code>).  The assumption is that they don't have names because they aren't referenced by any other tags.</p>\n<p>However, if we named them, this would give us the ability to build a library of materials and then \"instance\" them, in some sense. This could be done formally (i.e., declare a material library tag and then define a bunch of materials that can be referenced by name) or in an ad hoc mechanism (I.e., one instance <code>&lt;material name=\"green\"&gt;...&lt;/material&gt;</code> can define a material and another reference could make use of it by sharing the name and defining no properties). This kind of library/instance paradigm would assist renderers in recognizing the same material being instanced (rather than having to infer it).</p>\n<p>This is superficially related to <a href=\"#!/osrf/sdformat/issues/173/write-a-once-and-reuse-it\" rel=\"nofollow\" title=\"Write a &lt;geometry&gt; once and reuse it\" class=\"ap-connect-link\">#173</a> in that both would lead to a more compact representation of the robot in the SDF file. But the emphasis of this request is not on the <em>authoring</em> side, but on the consuming side -- it provides a meaningful basis for hashing materials (via name) at parse time rather than having to do it at implementation.</p>\n<p>It obviously creates an increased burden on the parser (i.e., two definitions cannot exist for the same material name in the same scope), but that's a relatively trivial test and failing the test should indicate outright failure with an appropriate error message to the tune of \"malformed SDF, try again\".</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": {"name": "1.5", "links": {"self": {"href": "data/repositories/osrf/sdformat/versions/90015.json"}}}, "edited_on": null, "created_on": "2018-08-21T23:13:39.094979+00:00", "milestone": null, "updated_on": "2018-08-21T23:13:39.094979+00:00", "type": "issue", "id": 196}