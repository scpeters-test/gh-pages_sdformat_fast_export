{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7442492.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7442492"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "We should also make sure that these friction parameters are defined in both physics.sdf (default values) and surface.sdf (per-collision values).", "markup": "markdown", "html": "<p>We should also make sure that these friction parameters are defined in both physics.sdf (default values) and surface.sdf (per-collision values).</p>", "type": "rendered"}, "created_on": "2013-12-21T00:55:04.737465+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7442492}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7476426.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7476426"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "Starting work in branch issue_31 with 07e61dd", "markup": "markdown", "html": "<p>Starting work in branch issue_31 with <a href=\"#!/osrf/sdformat/commits/07e61dd\" rel=\"nofollow\" class=\"ap-connect-link\">07e61dd</a></p>", "type": "rendered"}, "created_on": "2013-12-23T23:45:17.479358+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7476426}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7542465.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7542465"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2013-12-31T23:57:49.962723+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7542465}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7675185.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7675185"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "Existing format:\n\n~~~\n<link>\n  <collision>\n    <surface>\n      <friction>\n        <ode>\n          <mu>1.0</mu>\n          <mu2>1.0</mu2>\n        </ode>\n      </friction>\n    </surface>\n  </collision>\n</link>\n~~~\n\nProposed:\n~~~\n<link>\n  <collision>\n    <surface>\n      <friction>\n\n        <!-- real world physical properties -->\n        <static_friction>1.0</static_friction>\n        <dynamic_friction>1.0</dynamic_friction>  <!-- do we need this now? only simbody uses it. -->\n        <viscous_friction>0.0</viscous_friction> <!-- do we need this now? only simbody uses it. -->\n\n        <!-- physics engine specific parameters -->\n        <ode>\n          <!-- ratios below are applied to static/dynamic friction coefficient of this collision body -->\n          <mu_ratio>1.0</mu_ratio>\n          <mu2_ratio>1.0</mu2_ratio>\n        </ode>\n        <simbody>\n          <!-- alternatively, put dynamic and viscous friction params in physics specific block -->\n          <dynamic_friction>1.0</dynamic_friction>\n          <viscous_friction>0.0</viscous_friction>\n        </simbody>\n\n      </friction>\n    </surface>\n  </collision>\n</link>\n~~~\n\nReference [simbody implementation of static / dynamic / viscous friction](#!/osrf/sdformat/src/4732294eb7aaccf279a1ae15590ac33e9c6e30d1/sdf/1.4/physics.sdf?at=default#cl-46).", "markup": "markdown", "html": "<p>Existing format:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;link&gt;</span>\n  <span class=\"nt\">&lt;collision&gt;</span>\n    <span class=\"nt\">&lt;surface&gt;</span>\n      <span class=\"nt\">&lt;friction&gt;</span>\n        <span class=\"nt\">&lt;ode&gt;</span>\n          <span class=\"nt\">&lt;mu&gt;</span>1.0<span class=\"nt\">&lt;/mu&gt;</span>\n          <span class=\"nt\">&lt;mu2&gt;</span>1.0<span class=\"nt\">&lt;/mu2&gt;</span>\n        <span class=\"nt\">&lt;/ode&gt;</span>\n      <span class=\"nt\">&lt;/friction&gt;</span>\n    <span class=\"nt\">&lt;/surface&gt;</span>\n  <span class=\"nt\">&lt;/collision&gt;</span>\n<span class=\"nt\">&lt;/link&gt;</span>\n</pre></div>\n\n\n<p>Proposed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;link&gt;</span>\n  <span class=\"nt\">&lt;collision&gt;</span>\n    <span class=\"nt\">&lt;surface&gt;</span>\n      <span class=\"nt\">&lt;friction&gt;</span>\n\n        <span class=\"c\">&lt;!-- real world physical properties --&gt;</span>\n        <span class=\"nt\">&lt;static_friction&gt;</span>1.0<span class=\"nt\">&lt;/static_friction&gt;</span>\n        <span class=\"nt\">&lt;dynamic_friction&gt;</span>1.0<span class=\"nt\">&lt;/dynamic_friction&gt;</span>  <span class=\"c\">&lt;!-- do we need this now? only simbody uses it. --&gt;</span>\n        <span class=\"nt\">&lt;viscous_friction&gt;</span>0.0<span class=\"nt\">&lt;/viscous_friction&gt;</span> <span class=\"c\">&lt;!-- do we need this now? only simbody uses it. --&gt;</span>\n\n        <span class=\"c\">&lt;!-- physics engine specific parameters --&gt;</span>\n        <span class=\"nt\">&lt;ode&gt;</span>\n          <span class=\"c\">&lt;!-- ratios below are applied to static/dynamic friction coefficient of this collision body --&gt;</span>\n          <span class=\"nt\">&lt;mu_ratio&gt;</span>1.0<span class=\"nt\">&lt;/mu_ratio&gt;</span>\n          <span class=\"nt\">&lt;mu2_ratio&gt;</span>1.0<span class=\"nt\">&lt;/mu2_ratio&gt;</span>\n        <span class=\"nt\">&lt;/ode&gt;</span>\n        <span class=\"nt\">&lt;simbody&gt;</span>\n          <span class=\"c\">&lt;!-- alternatively, put dynamic and viscous friction params in physics specific block --&gt;</span>\n          <span class=\"nt\">&lt;dynamic_friction&gt;</span>1.0<span class=\"nt\">&lt;/dynamic_friction&gt;</span>\n          <span class=\"nt\">&lt;viscous_friction&gt;</span>0.0<span class=\"nt\">&lt;/viscous_friction&gt;</span>\n        <span class=\"nt\">&lt;/simbody&gt;</span>\n\n      <span class=\"nt\">&lt;/friction&gt;</span>\n    <span class=\"nt\">&lt;/surface&gt;</span>\n  <span class=\"nt\">&lt;/collision&gt;</span>\n<span class=\"nt\">&lt;/link&gt;</span>\n</pre></div>\n\n\n<p>Reference <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/4732294eb7aaccf279a1ae15590ac33e9c6e30d1/sdf/1.4/physics.sdf?at=default#cl-46\" rel=\"nofollow\">simbody implementation of static / dynamic / viscous friction</a>.</p>", "type": "rendered"}, "created_on": "2014-01-10T18:12:56.620145+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": "2014-01-10T18:30:26.762300+00:00", "type": "issue_comment", "id": 7675185}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7675408.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7675408"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "Related issue, support material database in sdformat or gazebo?", "markup": "markdown", "html": "<p>Related issue, support material database in sdformat or gazebo?</p>", "type": "rendered"}, "created_on": "2014-01-10T18:33:23.744584+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 7675408}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7679149.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7679149"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "Also make sure to give bullet its own friction parameters (see [BulletSurfaceParams.cc:48](https://bitbucket.org/osrf/gazebo/src/1d11e4f3afaf/gazebo/physics/bullet/BulletSurfaceParams.cc#cl-48))", "markup": "markdown", "html": "<p>Also make sure to give bullet its own friction parameters (see <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/src/1d11e4f3afaf/gazebo/physics/bullet/BulletSurfaceParams.cc#cl-48\" rel=\"nofollow\">BulletSurfaceParams.cc:48</a>)</p>", "type": "rendered"}, "created_on": "2014-01-11T02:00:38.140818+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7679149}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/7792384.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-7792384"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "Waiting on [gazebo pull request for surface parameters](https://bitbucket.org/osrf/gazebo/pull-request/891/refactor-physics-surfaceparams-class-to/diff)", "markup": "markdown", "html": "<p>Waiting on <a data-is-external-link=\"true\" href=\"https://bitbucket.org/osrf/gazebo/pull-request/891/refactor-physics-surfaceparams-class-to/diff\" rel=\"nofollow\">gazebo pull request for surface parameters</a></p>", "type": "rendered"}, "created_on": "2014-01-17T17:39:21.392631+00:00", "user": {"display_name": "John Hsu", "uuid": "{0a186eae-abf0-4514-a951-23db5eccc286}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D"}, "html": {"href": "https://bitbucket.org/%7B0a186eae-abf0-4514-a951-23db5eccc286%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:f3968cd3-4910-4384-8349-482a6c7889ec/5445ce6e-6273-47f0-84eb-621c86ca11cb/128"}}, "nickname": "hsu", "type": "user", "account_id": "557058:f3968cd3-4910-4384-8349-482a6c7889ec"}, "updated_on": null, "type": "issue_comment", "id": 7792384}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/51225447.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-51225447"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "I was just talking about friction parameters today with @azeey and we talked about the following:\n\nIn the interests of simplicity for model creators who don't know what friction model they want to use, it's nice to have a single parameter to correspond roughly to a Coulumb friction coefficient. This is shown in the snippet below as `<mu>`.\n\nYou can also define named `<friction_model>` blocks with additional parameters, such as `mu2` for the pyramid model or `dynamic_friction` and `viscous_friction` for the Stribeck model, but each friction model should strive to use the `<mu>` parameter and define specifically what it means in that model.\n\n~~~\n<link>\n  <collision>\n    <surface>\n      <friction>\n        <mu>1.0</mu>\n\n        <friction_model name=\"pyramid\">\n          <!-- use generic mu for mu1 -->\n          <mu2>1.0</mu2>\n          <slip1>0.0</slip1>\n          <slip2>0.0</sliip2>\n          <fdir1 frame=\"\">1 0 0</fdir1>\n        </friction_model>\n\n        <friction_model name=\"cone\">\n          <!-- use generic mu for friction coefficient -->\n          <cone_parameter1/>\n        </friction_model>\n\n        <friction_model name=\"stribeck\">\n          <!-- use generic mu for static friction coefficient -->\n          <dynamic_friction>1.0</dynamic_friction>\n          <viscous_friction>0.0</viscous_friction>\n          <simbody>\n            <!-- can put physics-engine specific parameters inside a friction_model -->\n          </simbody>\n        </friction_model>\n\n        <ode>\n          <!-- or you can put physics-engine specific parameters directly under friction -->\n        </ode>\n\n      </friction>\n    </surface>\n  </collision>\n</link>\n~~~\n\ncc @mxgrey", "markup": "markdown", "html": "<p>I was just talking about friction parameters today with @azeey and we talked about the following:</p>\n<p>In the interests of simplicity for model creators who don't know what friction model they want to use, it's nice to have a single parameter to correspond roughly to a Coulumb friction coefficient. This is shown in the snippet below as <code>&lt;mu&gt;</code>.</p>\n<p>You can also define named <code>&lt;friction_model&gt;</code> blocks with additional parameters, such as <code>mu2</code> for the pyramid model or <code>dynamic_friction</code> and <code>viscous_friction</code> for the Stribeck model, but each friction model should strive to use the <code>&lt;mu&gt;</code> parameter and define specifically what it means in that model.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;link&gt;</span>\n  <span class=\"nt\">&lt;collision&gt;</span>\n    <span class=\"nt\">&lt;surface&gt;</span>\n      <span class=\"nt\">&lt;friction&gt;</span>\n        <span class=\"nt\">&lt;mu&gt;</span>1.0<span class=\"nt\">&lt;/mu&gt;</span>\n\n        <span class=\"nt\">&lt;friction_model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;pyramid&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"c\">&lt;!-- use generic mu for mu1 --&gt;</span>\n          <span class=\"nt\">&lt;mu2&gt;</span>1.0<span class=\"nt\">&lt;/mu2&gt;</span>\n          <span class=\"nt\">&lt;slip1&gt;</span>0.0<span class=\"nt\">&lt;/slip1&gt;</span>\n          <span class=\"nt\">&lt;slip2&gt;</span>0.0<span class=\"nt\">&lt;/sliip2&gt;</span>\n          <span class=\"nt\">&lt;fdir1</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;&quot;</span><span class=\"nt\">&gt;</span>1 0 0<span class=\"nt\">&lt;/fdir1&gt;</span>\n        <span class=\"nt\">&lt;/friction_model&gt;</span>\n\n        <span class=\"nt\">&lt;friction_model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;cone&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"c\">&lt;!-- use generic mu for friction coefficient --&gt;</span>\n          <span class=\"nt\">&lt;cone_parameter1/&gt;</span>\n        <span class=\"nt\">&lt;/friction_model&gt;</span>\n\n        <span class=\"nt\">&lt;friction_model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;stribeck&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"c\">&lt;!-- use generic mu for static friction coefficient --&gt;</span>\n          <span class=\"nt\">&lt;dynamic_friction&gt;</span>1.0<span class=\"nt\">&lt;/dynamic_friction&gt;</span>\n          <span class=\"nt\">&lt;viscous_friction&gt;</span>0.0<span class=\"nt\">&lt;/viscous_friction&gt;</span>\n          <span class=\"nt\">&lt;simbody&gt;</span>\n            <span class=\"c\">&lt;!-- can put physics-engine specific parameters inside a friction_model --&gt;</span>\n          <span class=\"nt\">&lt;/simbody&gt;</span>\n        <span class=\"nt\">&lt;/friction_model&gt;</span>\n\n        <span class=\"nt\">&lt;ode&gt;</span>\n          <span class=\"c\">&lt;!-- or you can put physics-engine specific parameters directly under friction --&gt;</span>\n        <span class=\"nt\">&lt;/ode&gt;</span>\n\n      <span class=\"nt\">&lt;/friction&gt;</span>\n    <span class=\"nt\">&lt;/surface&gt;</span>\n  <span class=\"nt\">&lt;/collision&gt;</span>\n<span class=\"nt\">&lt;/link&gt;</span>\n</pre></div>\n\n\n<p>cc @mxgrey</p>", "type": "rendered"}, "created_on": "2019-03-19T20:41:26.889452+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 51225447}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/51228316.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-51228316"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "I definitely like this concept. There are just a few thoughts that jump out at me:\n\n1. It might be confusing to define one parameter outside of the `friction_model` element while all the rest are defined inside of one. I understand the motivation and I'm not opposed to doing it, but I wanted to voice that concern.\n\n2. Are these friction models additive, or could they conflict with each other? I assume the user must choose only one. In that case, it might make more sense to do something like\n\n```\n<link>\n  <collision>\n    <surface>\n      <friction type=\"[coulomb|pyramid|cone|stribeck]\">\n        <mu>1.0</mu>\n\n        <!-- If and only if type is pyramid\n        <mu2>1.0</mu2>\n        <slip1>0.0</slip1>\n        <slip2>0.0</sliip2>\n        <fdir1 frame=\"\">1 0 0</fdir1>\n         -->\n\n         <!-- If and only if type is cone\n         <cone_parameter>1.0</cone_parameter>\n         -->\n\n        <!-- If and only if type is stribeck\n        <dynamic_friction>1.0</dynamic_friction>\n        <viscous_friction>0.0</viscous_friction>\n        -->\n\n        <simbody>\n          <!-- can put physics-engine specific parameters inside a friction_model -->\n        </simbody>\n\n        <ode>\n          <!-- or you can put physics-engine specific parameters directly under friction -->\n        </ode>\n\n      </friction>\n    </surface>\n  </collision>\n</link>\n```\n\nThe `type` attribute would default to `coulomb` when the type isn't specified.\n\n3. Whether or not we go with the suggestion I make in (2), the sdformat API might have some difficulty with converting the polymorphism into concrete data types. I suppose one option might be to give the `sdf::Surface` class various member functions like `const Coulomb* Surface::GetCoulomb() const` and `const Pyramid* Surface::GetPyramid() const`, etc, where everything returns a nullptr except the friction model that was requested by the user.", "markup": "markdown", "html": "<p>I definitely like this concept. There are just a few thoughts that jump out at me:</p>\n<ol>\n<li>\n<p>It might be confusing to define one parameter outside of the <code>friction_model</code> element while all the rest are defined inside of one. I understand the motivation and I'm not opposed to doing it, but I wanted to voice that concern.</p>\n</li>\n<li>\n<p>Are these friction models additive, or could they conflict with each other? I assume the user must choose only one. In that case, it might make more sense to do something like</p>\n</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;link&gt;</span>\n  <span class=\"nt\">&lt;collision&gt;</span>\n    <span class=\"nt\">&lt;surface&gt;</span>\n      <span class=\"nt\">&lt;friction</span> <span class=\"na\">type=</span><span class=\"s\">&quot;[coulomb|pyramid|cone|stribeck]&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;mu&gt;</span>1.0<span class=\"nt\">&lt;/mu&gt;</span>\n\n        <span class=\"c\">&lt;!-- If and only if type is pyramid</span>\n<span class=\"c\">        &lt;mu2&gt;1.0&lt;/mu2&gt;</span>\n<span class=\"c\">        &lt;slip1&gt;0.0&lt;/slip1&gt;</span>\n<span class=\"c\">        &lt;slip2&gt;0.0&lt;/sliip2&gt;</span>\n<span class=\"c\">        &lt;fdir1 frame=&quot;&quot;&gt;1 0 0&lt;/fdir1&gt;</span>\n<span class=\"c\">         --&gt;</span>\n\n         <span class=\"c\">&lt;!-- If and only if type is cone</span>\n<span class=\"c\">         &lt;cone_parameter&gt;1.0&lt;/cone_parameter&gt;</span>\n<span class=\"c\">         --&gt;</span>\n\n        <span class=\"c\">&lt;!-- If and only if type is stribeck</span>\n<span class=\"c\">        &lt;dynamic_friction&gt;1.0&lt;/dynamic_friction&gt;</span>\n<span class=\"c\">        &lt;viscous_friction&gt;0.0&lt;/viscous_friction&gt;</span>\n<span class=\"c\">        --&gt;</span>\n\n        <span class=\"nt\">&lt;simbody&gt;</span>\n          <span class=\"c\">&lt;!-- can put physics-engine specific parameters inside a friction_model --&gt;</span>\n        <span class=\"nt\">&lt;/simbody&gt;</span>\n\n        <span class=\"nt\">&lt;ode&gt;</span>\n          <span class=\"c\">&lt;!-- or you can put physics-engine specific parameters directly under friction --&gt;</span>\n        <span class=\"nt\">&lt;/ode&gt;</span>\n\n      <span class=\"nt\">&lt;/friction&gt;</span>\n    <span class=\"nt\">&lt;/surface&gt;</span>\n  <span class=\"nt\">&lt;/collision&gt;</span>\n<span class=\"nt\">&lt;/link&gt;</span>\n</pre></div>\n\n\n<p>The <code>type</code> attribute would default to <code>coulomb</code> when the type isn't specified.</p>\n<ol>\n<li>Whether or not we go with the suggestion I make in (2), the sdformat API might have some difficulty with converting the polymorphism into concrete data types. I suppose one option might be to give the <code>sdf::Surface</code> class various member functions like <code>const Coulomb* Surface::GetCoulomb() const</code> and <code>const Pyramid* Surface::GetPyramid() const</code>, etc, where everything returns a nullptr except the friction model that was requested by the user.</li>\n</ol>", "type": "rendered"}, "created_on": "2019-03-20T02:55:34.970886+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 51228316}, {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/55596021.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-55596021"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "more references:\n\n* OpenCOLLADA physics extension: https://www.khronos.org/collada/wiki/Physics_material_OpenCOLLADA_extension\n\n* Drake stribeck friction model: https://drake.mit.edu/doxygen_cxx/group__stribeck__approximation.html", "markup": "markdown", "html": "<p>more references:</p>\n<ul>\n<li>\n<p>OpenCOLLADA physics extension: <a href=\"https://www.khronos.org/collada/wiki/Physics_material_OpenCOLLADA_extension\" rel=\"nofollow\" class=\"ap-connect-link\">https://www.khronos.org/collada/wiki/Physics_material_OpenCOLLADA_extension</a></p>\n</li>\n<li>\n<p>Drake stribeck friction model: <a href=\"https://drake.mit.edu/doxygen_cxx/group\" rel=\"nofollow\" class=\"ap-connect-link\">https://drake.mit.edu/doxygen_cxx/group</a><strong>stribeck</strong>approximation.html</p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2020-01-09T20:05:57.082607+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 55596021}], "page": 1, "size": 10}