{"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31/comments/51228316.json"}, "html": {"href": "#!/osrf/sdformat/issues/31#comment-51228316"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/sdformat/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "title": "Use common friction parameters across physics engines"}, "content": {"raw": "I definitely like this concept. There are just a few thoughts that jump out at me:\n\n1. It might be confusing to define one parameter outside of the `friction_model` element while all the rest are defined inside of one. I understand the motivation and I'm not opposed to doing it, but I wanted to voice that concern.\n\n2. Are these friction models additive, or could they conflict with each other? I assume the user must choose only one. In that case, it might make more sense to do something like\n\n```\n<link>\n  <collision>\n    <surface>\n      <friction type=\"[coulomb|pyramid|cone|stribeck]\">\n        <mu>1.0</mu>\n\n        <!-- If and only if type is pyramid\n        <mu2>1.0</mu2>\n        <slip1>0.0</slip1>\n        <slip2>0.0</sliip2>\n        <fdir1 frame=\"\">1 0 0</fdir1>\n         -->\n\n         <!-- If and only if type is cone\n         <cone_parameter>1.0</cone_parameter>\n         -->\n\n        <!-- If and only if type is stribeck\n        <dynamic_friction>1.0</dynamic_friction>\n        <viscous_friction>0.0</viscous_friction>\n        -->\n\n        <simbody>\n          <!-- can put physics-engine specific parameters inside a friction_model -->\n        </simbody>\n\n        <ode>\n          <!-- or you can put physics-engine specific parameters directly under friction -->\n        </ode>\n\n      </friction>\n    </surface>\n  </collision>\n</link>\n```\n\nThe `type` attribute would default to `coulomb` when the type isn't specified.\n\n3. Whether or not we go with the suggestion I make in (2), the sdformat API might have some difficulty with converting the polymorphism into concrete data types. I suppose one option might be to give the `sdf::Surface` class various member functions like `const Coulomb* Surface::GetCoulomb() const` and `const Pyramid* Surface::GetPyramid() const`, etc, where everything returns a nullptr except the friction model that was requested by the user.", "markup": "markdown", "html": "<p>I definitely like this concept. There are just a few thoughts that jump out at me:</p>\n<ol>\n<li>\n<p>It might be confusing to define one parameter outside of the <code>friction_model</code> element while all the rest are defined inside of one. I understand the motivation and I'm not opposed to doing it, but I wanted to voice that concern.</p>\n</li>\n<li>\n<p>Are these friction models additive, or could they conflict with each other? I assume the user must choose only one. In that case, it might make more sense to do something like</p>\n</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;link&gt;</span>\n  <span class=\"nt\">&lt;collision&gt;</span>\n    <span class=\"nt\">&lt;surface&gt;</span>\n      <span class=\"nt\">&lt;friction</span> <span class=\"na\">type=</span><span class=\"s\">&quot;[coulomb|pyramid|cone|stribeck]&quot;</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;mu&gt;</span>1.0<span class=\"nt\">&lt;/mu&gt;</span>\n\n        <span class=\"c\">&lt;!-- If and only if type is pyramid</span>\n<span class=\"c\">        &lt;mu2&gt;1.0&lt;/mu2&gt;</span>\n<span class=\"c\">        &lt;slip1&gt;0.0&lt;/slip1&gt;</span>\n<span class=\"c\">        &lt;slip2&gt;0.0&lt;/sliip2&gt;</span>\n<span class=\"c\">        &lt;fdir1 frame=&quot;&quot;&gt;1 0 0&lt;/fdir1&gt;</span>\n<span class=\"c\">         --&gt;</span>\n\n         <span class=\"c\">&lt;!-- If and only if type is cone</span>\n<span class=\"c\">         &lt;cone_parameter&gt;1.0&lt;/cone_parameter&gt;</span>\n<span class=\"c\">         --&gt;</span>\n\n        <span class=\"c\">&lt;!-- If and only if type is stribeck</span>\n<span class=\"c\">        &lt;dynamic_friction&gt;1.0&lt;/dynamic_friction&gt;</span>\n<span class=\"c\">        &lt;viscous_friction&gt;0.0&lt;/viscous_friction&gt;</span>\n<span class=\"c\">        --&gt;</span>\n\n        <span class=\"nt\">&lt;simbody&gt;</span>\n          <span class=\"c\">&lt;!-- can put physics-engine specific parameters inside a friction_model --&gt;</span>\n        <span class=\"nt\">&lt;/simbody&gt;</span>\n\n        <span class=\"nt\">&lt;ode&gt;</span>\n          <span class=\"c\">&lt;!-- or you can put physics-engine specific parameters directly under friction --&gt;</span>\n        <span class=\"nt\">&lt;/ode&gt;</span>\n\n      <span class=\"nt\">&lt;/friction&gt;</span>\n    <span class=\"nt\">&lt;/surface&gt;</span>\n  <span class=\"nt\">&lt;/collision&gt;</span>\n<span class=\"nt\">&lt;/link&gt;</span>\n</pre></div>\n\n\n<p>The <code>type</code> attribute would default to <code>coulomb</code> when the type isn't specified.</p>\n<ol>\n<li>Whether or not we go with the suggestion I make in (2), the sdformat API might have some difficulty with converting the polymorphism into concrete data types. I suppose one option might be to give the <code>sdf::Surface</code> class various member functions like <code>const Coulomb* Surface::GetCoulomb() const</code> and <code>const Pyramid* Surface::GetPyramid() const</code>, etc, where everything returns a nullptr except the friction model that was requested by the user.</li>\n</ol>", "type": "rendered"}, "created_on": "2019-03-20T02:55:34.970886+00:00", "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}, "updated_on": null, "type": "issue_comment", "id": 51228316}