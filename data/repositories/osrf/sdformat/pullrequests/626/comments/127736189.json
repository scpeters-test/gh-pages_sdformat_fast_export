{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/626/comments/127736189.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:d7c07393bba9..2f0e932b1f1c?path=src%2FModel.cc"}, "html": {"href": "#!/osrf/sdformat/pull-requests/626/_/diff#comment-127736189"}}, "parent": {"id": 127726242, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/626/comments/127726242.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/626/_/diff#comment-127726242"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 626, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/626.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/626"}}, "title": "Allow static models without links"}, "content": {"raw": "in pr #622 and pr #623, we hid the frame semantics implementation, so none of the graphs or internal workings are in the public API. this will give us some flexibility in changing things without worrying about API/ABI breakages.\n\nin terms of what would need to be changed, I would add `STATIC_MODEL` to the [FrameType enum](#!/osrf/sdformat/src/a714c744e8f548159f6263e3e2a5ea3d2b3633f5/src/FrameSemantics.hh#lines-47:63) so dynamics and static `FrameAttachedToGraph`s in the `__model__` scope can be disambiguated. For `STATIC_MODEL`, I would ignore the canonical link and minimum link requirement and add a `world` frame in [buildFrameAttachedGraph](#!/osrf/sdformat/src/a714c744e8f548159f6263e3e2a5ea3d2b3633f5/src/FrameSemantics.cc#lines-167:169). The implicit `__model__` frame and all link frames would then be attached to `world`.\n\nThe `PoseRelativeToGraph` would remain unchanged.\n\nThat's my initial thought", "markup": "markdown", "html": "<p>in <a href=\"#!/osrf/sdformat/pull-requests/622/citadel-hide-frame-semantics\" rel=\"nofollow\" class=\"ap-connect-link\">pr #622</a> and <a href=\"#!/osrf/sdformat/pull-requests/623/citadel-hide-frame-semantics\" rel=\"nofollow\" class=\"ap-connect-link\">pr #623</a>, we hid the frame semantics implementation, so none of the graphs or internal workings are in the public API. this will give us some flexibility in changing things without worrying about API/ABI breakages.</p>\n<p>in terms of what would need to be changed, I would add <code>STATIC_MODEL</code> to the <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/a714c744e8f548159f6263e3e2a5ea3d2b3633f5/src/FrameSemantics.hh#lines-47:63\" rel=\"nofollow\">FrameType enum</a> so dynamics and static <code>FrameAttachedToGraph</code>s in the <code>__model__</code> scope can be disambiguated. For <code>STATIC_MODEL</code>, I would ignore the canonical link and minimum link requirement and add a <code>world</code> frame in <a data-is-external-link=\"true\" href=\"#!/osrf/sdformat/src/a714c744e8f548159f6263e3e2a5ea3d2b3633f5/src/FrameSemantics.cc#lines-167:169\" rel=\"nofollow\">buildFrameAttachedGraph</a>. The implicit <code>__model__</code> frame and all link frames would then be attached to <code>world</code>.</p>\n<p>The <code>PoseRelativeToGraph</code> would remain unchanged.</p>\n<p>That's my initial thought</p>", "type": "rendered"}, "created_on": "2019-12-06T06:54:41.849953+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": 328, "from": null, "outdated": false, "path": "src/Model.cc"}, "updated_on": "2019-12-06T06:54:41.858751+00:00", "type": "pullrequest_comment", "id": 127736189}