{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/249/comments/13068874.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/249/_/diff#comment-13068874"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 249, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/249.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/249"}}, "title": "Fix memory leaks"}, "content": {"raw": "One more thing, we should check if `valgrind` is found successfully. If not, give a console warning and skip the tests.\n\n~~~\ndiff -r 45adb5df704f cmake/SDFUtils.cmake\n--- a/cmake/SDFUtils.cmake\tMon Dec 28 23:39:04 2015 +0100\n+++ b/cmake/SDFUtils.cmake\tMon Dec 28 15:02:55 2015 -0800\n@@ -194,7 +194,7 @@\n                ${CMAKE_BINARY_DIR}/test_results/${BINARY_NAME}.xml)\n     endif()\n \n-    if(SDFORMAT_RUN_VALGRIND_TESTS)\n+    if(SDFORMAT_RUN_VALGRIND_TESTS AND VALGRIND_PROGRAM)\n       add_test(memcheck_${BINARY_NAME} ${VALGRIND_PROGRAM} --leak-check=full\n                --error-exitcode=1 --show-leak-kinds=all ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME})\n     endif()\ndiff -r 45adb5df704f cmake/SearchForStuff.cmake\n--- a/cmake/SearchForStuff.cmake\tMon Dec 28 23:39:04 2015 +0100\n+++ b/cmake/SearchForStuff.cmake\tMon Dec 28 15:02:55 2015 -0800\n@@ -107,6 +107,9 @@\n find_program(VALGRIND_PROGRAM NAMES valgrind PATH ${VALGRIND_ROOT}/bin)\n option(SDFORMAT_RUN_VALGRIND_TESTS \"Run sdformat tests with Valgrind\" FALSE)\n mark_as_advanced(SDFORMAT_RUN_VALGRIND_TESTS)\n+if (SDFORMAT_RUN_VALGRIND_TESTS AND NOT VALGRIND_PROGRAM)\n+  BUILD_WARNING(\"valgrind not found. Memory check tests will be skipped.\")\n+endif()\n \n ################################################\n # Find ruby executable to produce xml schemas\n~~~", "markup": "markdown", "html": "<p>One more thing, we should check if <code>valgrind</code> is found successfully. If not, give a console warning and skip the tests.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff -r 45adb5df704f cmake/SDFUtils.cmake</span>\n<span class=\"gd\">--- a/cmake/SDFUtils.cmake  Mon Dec 28 23:39:04 2015 +0100</span>\n<span class=\"gi\">+++ b/cmake/SDFUtils.cmake  Mon Dec 28 15:02:55 2015 -0800</span>\n<span class=\"gu\">@@ -194,7 +194,7 @@</span>\n                ${CMAKE_BINARY_DIR}/test_results/${BINARY_NAME}.xml)\n     endif()\n\n<span class=\"gd\">-    if(SDFORMAT_RUN_VALGRIND_TESTS)</span>\n<span class=\"gi\">+    if(SDFORMAT_RUN_VALGRIND_TESTS AND VALGRIND_PROGRAM)</span>\n       add_test(memcheck_${BINARY_NAME} ${VALGRIND_PROGRAM} --leak-check=full\n                --error-exitcode=1 --show-leak-kinds=all ${CMAKE_CURRENT_BINARY_DIR}/${BINARY_NAME})\n     endif()\n<span class=\"gh\">diff -r 45adb5df704f cmake/SearchForStuff.cmake</span>\n<span class=\"gd\">--- a/cmake/SearchForStuff.cmake    Mon Dec 28 23:39:04 2015 +0100</span>\n<span class=\"gi\">+++ b/cmake/SearchForStuff.cmake    Mon Dec 28 15:02:55 2015 -0800</span>\n<span class=\"gu\">@@ -107,6 +107,9 @@</span>\n find_program(VALGRIND_PROGRAM NAMES valgrind PATH ${VALGRIND_ROOT}/bin)\n option(SDFORMAT_RUN_VALGRIND_TESTS &quot;Run sdformat tests with Valgrind&quot; FALSE)\n mark_as_advanced(SDFORMAT_RUN_VALGRIND_TESTS)\n<span class=\"gi\">+if (SDFORMAT_RUN_VALGRIND_TESTS AND NOT VALGRIND_PROGRAM)</span>\n<span class=\"gi\">+  BUILD_WARNING(&quot;valgrind not found. Memory check tests will be skipped.&quot;)</span>\n<span class=\"gi\">+endif()</span>\n\n ################################################\n # Find ruby executable to produce xml schemas\n</pre></div>", "type": "rendered"}, "created_on": "2015-12-28T23:04:04.499452+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2015-12-28T23:04:04.501665+00:00", "type": "pullrequest_comment", "id": 13068874}