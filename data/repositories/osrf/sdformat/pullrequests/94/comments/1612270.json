{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/94/comments/1612270.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/94/_/diff#comment-1612270"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 94, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/94.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/94"}}, "title": "Fix make test before make install"}, "content": {"raw": "Looks like:\n\n * `sdf::Converter::Convert` is diving into `/usr/local/share` to find converters\n\nThis appears to be because SDF.cc: sdf::findFile checks the preprocessor define `SDF_SHARE_PATH` before the env var `SDF_PATH`\n\n```\n#!c++\n  // Next check the install path.\n  path = boost::filesystem::path(SDF_SHARE_PATH) / _filename;\n  if (boost::filesystem::exists(path))\n    return path.string();\n\n  // Next check the versioned install path.\n  path = boost::filesystem::path(SDF_SHARE_PATH) / \"sdformat\" /\n    sdf::SDF::version / _filename;\n  if (boost::filesystem::exists(path))\n    return path.string();\n\n  // Next check SDF_PATH environment variable\n  char *pathCStr = getenv(\"SDF_PATH\");\n  if (pathCStr)\n  {\n    std::vector<std::string> paths;\n    boost::split(paths, pathCStr, boost::is_any_of(\":\"));\n    for (std::vector<std::string>::iterator iter = paths.begin();\n         iter != paths.end(); ++iter)\n    {\n      path = boost::filesystem::path(*iter) / _filename;\n      if (boost::filesystem::exists(path))\n        return path.string();\n    }\n  }\n```\n\nI think this is a bug in `sdf::findFile` ant the checks should be re-ordered. \n\nI'll open a bug and submit a patch.\n\nIf the test works with the search reordered, I'd say this test fix is correct.", "markup": "markdown", "html": "<p>Looks like:</p>\n<ul>\n<li><code>sdf::Converter::Convert</code> is diving into <code>/usr/local/share</code> to find converters</li>\n</ul>\n<p>This appears to be because SDF.cc: sdf::findFile checks the preprocessor define <code>SDF_SHARE_PATH</code> before the env var <code>SDF_PATH</code></p>\n<div class=\"codehilite language-c++\"><pre><span></span>  <span class=\"c1\">// Next check the install path.</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">SDF_SHARE_PATH</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">_filename</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// Next check the versioned install path.</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">SDF_SHARE_PATH</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s\">&quot;sdformat&quot;</span> <span class=\"o\">/</span>\n    <span class=\"n\">sdf</span><span class=\"o\">::</span><span class=\"n\">SDF</span><span class=\"o\">::</span><span class=\"n\">version</span> <span class=\"o\">/</span> <span class=\"n\">_filename</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// Next check SDF_PATH environment variable</span>\n  <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">pathCStr</span> <span class=\"o\">=</span> <span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">&quot;SDF_PATH&quot;</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pathCStr</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">paths</span><span class=\"p\">;</span>\n    <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">pathCStr</span><span class=\"p\">,</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">is_any_of</span><span class=\"p\">(</span><span class=\"s\">&quot;:&quot;</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;::</span><span class=\"n\">iterator</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"n\">paths</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span>\n         <span class=\"n\">iter</span> <span class=\"o\">!=</span> <span class=\"n\">paths</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">iter</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">iter</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">_filename</span><span class=\"p\">;</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">boost</span><span class=\"o\">::</span><span class=\"n\">filesystem</span><span class=\"o\">::</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>I think this is a bug in <code>sdf::findFile</code> ant the checks should be re-ordered. </p>\n<p>I'll open a bug and submit a patch.</p>\n<p>If the test works with the search reordered, I'd say this test fix is correct.</p>", "type": "rendered"}, "created_on": "2014-04-08T20:35:08.306544+00:00", "user": {"display_name": "andy_somerville", "uuid": "{09fd5d4b-d90e-4416-9a6a-2e5cd638472c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B09fd5d4b-d90e-4416-9a6a-2e5cd638472c%7D"}, "html": {"href": "https://bitbucket.org/%7B09fd5d4b-d90e-4416-9a6a-2e5cd638472c%7D/"}, "avatar": {"href": "https://bitbucket.org/account/andy_somerville/avatar/"}}, "nickname": "andy_somerville", "type": "user", "account_id": null}, "updated_on": "2014-04-08T20:35:08.537967+00:00", "type": "pullrequest_comment", "id": 1612270}