{"rendered": {"description": {"raw": "cppcheck in Wily is reporting [some problems](http://build.osrfoundation.org/job/sdformat-ci-default-wily-amd64/12/cppcheckResult/). This PR [turns it blue](http://build.osrfoundation.org/job/sdformat-ci-pr_any-wily-amd64_temp/2/)\r\n\r\nI would say that the `test/integration/locale_fix` is a false positive on a pointer dereference which I think that is not really done.\r\n\r\nThe other two in constructors are more interesting. It is complaining about the lack of the keyword `explicit` in constructors with one parameter. IMHO, cppcheck is probably referring to [converting constructors](http://en.cppreference.com/w/cpp/language/converting_constructor) which involves implicit conversions, which, under some circumstances, could be consider dangerous.\r\n\r\nProbably the easiest way to see the difference is with an example:\r\n\r\n```\r\n#!c++\r\n\r\nstruct Foo\r\n{\r\n  Foo(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nstruct Bar\r\n{\r\n  explicit Bar(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nint main()\r\n{\r\n    Foo p1(1);   // fine\r\n    Foo p11 = 1; // converting 1 to constructor\r\n    Bar p2(1);   // fine\r\n    Bar p22 = 1; // error: conversion from \u2018int\u2019 to non-scalar type \u2018Bar\u2019 requested \r\n\r\n    return 1;\r\n}\r\n```\r\n\r\nThis can probably make downstream code to fail if it uses string_set or any_set classes.", "markup": "markdown", "html": "<p>cppcheck in Wily is reporting <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/sdformat-ci-default-wily-amd64/12/cppcheckResult/\" rel=\"nofollow\">some problems</a>. This PR <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/sdformat-ci-pr_any-wily-amd64_temp/2/\" rel=\"nofollow\">turns it blue</a></p>\n<p>I would say that the <code>test/integration/locale_fix</code> is a false positive on a pointer dereference which I think that is not really done.</p>\n<p>The other two in constructors are more interesting. It is complaining about the lack of the keyword <code>explicit</code> in constructors with one parameter. IMHO, cppcheck is probably referring to <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/converting_constructor\" rel=\"nofollow\">converting constructors</a> which involves implicit conversions, which, under some circumstances, could be consider dangerous.</p>\n<p>Probably the easiest way to see the difference is with an example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">Foo</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">_n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">_n</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Bar</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">explicit</span> <span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">_n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">_n</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">p1</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>   <span class=\"c1\">// fine</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">p11</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// converting 1 to constructor</span>\n    <span class=\"n\">Bar</span> <span class=\"n\">p2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>   <span class=\"c1\">// fine</span>\n    <span class=\"n\">Bar</span> <span class=\"n\">p22</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// error: conversion from \u2018int\u2019 to non-scalar type \u2018Bar\u2019 requested </span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This can probably make downstream code to fail if it uses string_set or any_set classes.</p>", "type": "rendered"}, "title": {"raw": "Fix problems related to cppcheck in Wily", "markup": "markdown", "html": "<p>Fix problems related to cppcheck in Wily</p>", "type": "rendered"}}, "type": "pullrequest", "description": "cppcheck in Wily is reporting [some problems](http://build.osrfoundation.org/job/sdformat-ci-default-wily-amd64/12/cppcheckResult/). This PR [turns it blue](http://build.osrfoundation.org/job/sdformat-ci-pr_any-wily-amd64_temp/2/)\r\n\r\nI would say that the `test/integration/locale_fix` is a false positive on a pointer dereference which I think that is not really done.\r\n\r\nThe other two in constructors are more interesting. It is complaining about the lack of the keyword `explicit` in constructors with one parameter. IMHO, cppcheck is probably referring to [converting constructors](http://en.cppreference.com/w/cpp/language/converting_constructor) which involves implicit conversions, which, under some circumstances, could be consider dangerous.\r\n\r\nProbably the easiest way to see the difference is with an example:\r\n\r\n```\r\n#!c++\r\n\r\nstruct Foo\r\n{\r\n  Foo(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nstruct Bar\r\n{\r\n  explicit Bar(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nint main()\r\n{\r\n    Foo p1(1);   // fine\r\n    Foo p11 = 1; // converting 1 to constructor\r\n    Bar p2(1);   // fine\r\n    Bar p22 = 1; // error: conversion from \u2018int\u2019 to non-scalar type \u2018Bar\u2019 requested \r\n\r\n    return 1;\r\n}\r\n```\r\n\r\nThis can probably make downstream code to fail if it uses string_set or any_set classes.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/254/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:c7cb3e2e302e%0D0202c1289b6a?from_pullrequest_id=254"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/254/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/254.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/254/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/254/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/254"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/254/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:c7cb3e2e302e%0D0202c1289b6a?from_pullrequest_id=254"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/254/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/254/statuses_page=1.json"}}, "title": "Fix problems related to cppcheck in Wily", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}], "id": 254, "destination": {"commit": {"hash": "0202c1289b6a", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/0202c1289b6a.json"}, "html": {"href": "#!/osrf/sdformat/commits/0202c1289b6a"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "sdf4"}}, "created_on": "2016-01-14T23:37:18.608378+00:00", "summary": {"raw": "cppcheck in Wily is reporting [some problems](http://build.osrfoundation.org/job/sdformat-ci-default-wily-amd64/12/cppcheckResult/). This PR [turns it blue](http://build.osrfoundation.org/job/sdformat-ci-pr_any-wily-amd64_temp/2/)\r\n\r\nI would say that the `test/integration/locale_fix` is a false positive on a pointer dereference which I think that is not really done.\r\n\r\nThe other two in constructors are more interesting. It is complaining about the lack of the keyword `explicit` in constructors with one parameter. IMHO, cppcheck is probably referring to [converting constructors](http://en.cppreference.com/w/cpp/language/converting_constructor) which involves implicit conversions, which, under some circumstances, could be consider dangerous.\r\n\r\nProbably the easiest way to see the difference is with an example:\r\n\r\n```\r\n#!c++\r\n\r\nstruct Foo\r\n{\r\n  Foo(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nstruct Bar\r\n{\r\n  explicit Bar(int x) :\r\n    _n(x)\r\n  { }\r\n\r\n  int _n;\r\n};\r\n\r\nint main()\r\n{\r\n    Foo p1(1);   // fine\r\n    Foo p11 = 1; // converting 1 to constructor\r\n    Bar p2(1);   // fine\r\n    Bar p22 = 1; // error: conversion from \u2018int\u2019 to non-scalar type \u2018Bar\u2019 requested \r\n\r\n    return 1;\r\n}\r\n```\r\n\r\nThis can probably make downstream code to fail if it uses string_set or any_set classes.", "markup": "markdown", "html": "<p>cppcheck in Wily is reporting <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/sdformat-ci-default-wily-amd64/12/cppcheckResult/\" rel=\"nofollow\">some problems</a>. This PR <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/sdformat-ci-pr_any-wily-amd64_temp/2/\" rel=\"nofollow\">turns it blue</a></p>\n<p>I would say that the <code>test/integration/locale_fix</code> is a false positive on a pointer dereference which I think that is not really done.</p>\n<p>The other two in constructors are more interesting. It is complaining about the lack of the keyword <code>explicit</code> in constructors with one parameter. IMHO, cppcheck is probably referring to <a data-is-external-link=\"true\" href=\"http://en.cppreference.com/w/cpp/language/converting_constructor\" rel=\"nofollow\">converting constructors</a> which involves implicit conversions, which, under some circumstances, could be consider dangerous.</p>\n<p>Probably the easiest way to see the difference is with an example:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">Foo</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">_n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">_n</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Bar</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">explicit</span> <span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">_n</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">int</span> <span class=\"n\">_n</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">p1</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>   <span class=\"c1\">// fine</span>\n    <span class=\"n\">Foo</span> <span class=\"n\">p11</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// converting 1 to constructor</span>\n    <span class=\"n\">Bar</span> <span class=\"n\">p2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>   <span class=\"c1\">// fine</span>\n    <span class=\"n\">Bar</span> <span class=\"n\">p22</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// error: conversion from \u2018int\u2019 to non-scalar type \u2018Bar\u2019 requested </span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>This can probably make downstream code to fail if it uses string_set or any_set classes.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c93868b86978", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/c93868b86978.json"}, "html": {"href": "#!/osrf/sdformat/commits/c93868b86978"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "cppcheck_wily"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2016-01-28T18:48:11.034053+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}, {"role": "REVIEWER", "participated_on": "2016-01-28T19:16:26.953860+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2016-02-04T21:47:15.925265+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2016-02-04T23:05:45.583269+00:00", "author": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "merge_commit": {"hash": "c7cb3e2e302e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/c7cb3e2e302e.json"}, "html": {"href": "#!/osrf/sdformat/commits/c7cb3e2e302e"}}}, "closed_by": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}}