{"rendered": {"description": {"raw": "Part of the [SDF frame semantics proposal](http://sdformat.org/tutorials?tut=pose_frame_semantics_proposal&cat=pose_semantics_docs&#replace-joint-axis-use_parent_model_frame-with-joint-axis-xyz-expressed_in) is replacing the `//axis/use_parent_model_frame` element with an attribute `//axis/@expressed_in`. The migration script should map `//axis[use_parent_model_frame='true'` to `//axis[@expressed_in='__model__'`, but there are no mechanisms in the `sdf::Converter` class to support this. So this pull request adds the `Converter::Map` function that reads `<map>` elements that specifies a map of fixed input values to fixed output values.\r\n\r\nFor example, a portion of the `<convert>` specification for the `//use_parent_model_frame` migration is as follows:\r\n\r\n~~~\r\n<convert name=\"model\">\r\n  <convert name=\"joint\">\r\n    <convert name=\"axis\">\r\n      <map>\r\n        <from name=\"use_parent_model_frame\">\r\n          <value>true</value>\r\n          <value>True</value>\r\n          <value>TRUE</value>\r\n          <value>1</value>\r\n        </from>\r\n        <to name=\"xyz/@expressed_in\">\r\n          <value>__model__</value>\r\n        </to>\r\n      </map>\r\n      <remove element=\"use_parent_model_frame\"/>\r\n    </convert>\r\n  </convert>\r\n</convert>\r\n~~~\r\n\r\nThe `//convert/map/from` element has a `@name` attribute that specifies the name of the source to convert from. The name is a little like XPATH, with `/` as a delimiter between parent and child elements, and `@` indicating an attribute. The `//from/value` elements specify input values that will trigger an output value to be created.\r\n\r\nThe `//convert/map/to` element also has a `@name` attribute that specifies the destination of the map operation, with the same interpretation of `/` and `@`. The `//to/value` elements specify output values corresponding to a `//from/value` input.\r\n\r\nIf there are an equal number of `//from/value` and `//to/value` elements, then the map is constructed with the `//from/value` mapped to `//to/value` based on the order they are specified (1st with 1st, 2nd with 2nd, etc).\r\n\r\nIf there are fewer `//from/value` elements than `//to/value` elements, then the excess `//to/value` elements are ignored, and the matching `//to/value` elements are mapped 1:1 with the available `//from/value` elements.\r\n\r\nIf there are more `//from/value` elements than `//to/value` elements, then the excess `//from/value` elements are mapped to the last `//to/value` element. This is the case for the `//use_parent_model_frame` example above in which all 4 `//from` values are mapped to a single `//to` value.\r\n\r\nUPDATE: re-targeted to default.", "markup": "markdown", "html": "<p>Part of the <a data-is-external-link=\"true\" href=\"http://sdformat.org/tutorials?tut=pose_frame_semantics_proposal&amp;cat=pose_semantics_docs&amp;#replace-joint-axis-use_parent_model_frame-with-joint-axis-xyz-expressed_in\" rel=\"nofollow\">SDF frame semantics proposal</a> is replacing the <code>//axis/use_parent_model_frame</code> element with an attribute <code>//axis/@expressed_in</code>. The migration script should map <code>//axis[use_parent_model_frame='true'</code> to <code>//axis[@expressed_in='__model__'</code>, but there are no mechanisms in the <code>sdf::Converter</code> class to support this. So this pull request adds the <code>Converter::Map</code> function that reads <code>&lt;map&gt;</code> elements that specifies a map of fixed input values to fixed output values.</p>\n<p>For example, a portion of the <code>&lt;convert&gt;</code> specification for the <code>//use_parent_model_frame</code> migration is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;model&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;axis&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;map&gt;</span>\n        <span class=\"nt\">&lt;from</span> <span class=\"na\">name=</span><span class=\"s\">&quot;use_parent_model_frame&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>true<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>True<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>TRUE<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>1<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/from&gt;</span>\n        <span class=\"nt\">&lt;to</span> <span class=\"na\">name=</span><span class=\"s\">&quot;xyz/@expressed_in&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>__model__<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/to&gt;</span>\n      <span class=\"nt\">&lt;/map&gt;</span>\n      <span class=\"nt\">&lt;remove</span> <span class=\"na\">element=</span><span class=\"s\">&quot;use_parent_model_frame&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/convert&gt;</span>\n  <span class=\"nt\">&lt;/convert&gt;</span>\n<span class=\"nt\">&lt;/convert&gt;</span>\n</pre></div>\n\n\n<p>The <code>//convert/map/from</code> element has a <code>@name</code> attribute that specifies the name of the source to convert from. The name is a little like XPATH, with <code>/</code> as a delimiter between parent and child elements, and <code>@</code> indicating an attribute. The <code>//from/value</code> elements specify input values that will trigger an output value to be created.</p>\n<p>The <code>//convert/map/to</code> element also has a <code>@name</code> attribute that specifies the destination of the map operation, with the same interpretation of <code>/</code> and <code>@</code>. The <code>//to/value</code> elements specify output values corresponding to a <code>//from/value</code> input.</p>\n<p>If there are an equal number of <code>//from/value</code> and <code>//to/value</code> elements, then the map is constructed with the <code>//from/value</code> mapped to <code>//to/value</code> based on the order they are specified (1st with 1st, 2nd with 2nd, etc).</p>\n<p>If there are fewer <code>//from/value</code> elements than <code>//to/value</code> elements, then the excess <code>//to/value</code> elements are ignored, and the matching <code>//to/value</code> elements are mapped 1:1 with the available <code>//from/value</code> elements.</p>\n<p>If there are more <code>//from/value</code> elements than <code>//to/value</code> elements, then the excess <code>//from/value</code> elements are mapped to the last <code>//to/value</code> element. This is the case for the <code>//use_parent_model_frame</code> example above in which all 4 <code>//from</code> values are mapped to a single <code>//to</code> value.</p>\n<p>UPDATE: re-targeted to default.</p>", "type": "rendered"}, "title": {"raw": "Converter: add `<map>` element for converting fixed values", "markup": "markdown", "html": "<p>Converter: add <code>&lt;map&gt;</code> element for converting fixed values</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Part of the [SDF frame semantics proposal](http://sdformat.org/tutorials?tut=pose_frame_semantics_proposal&cat=pose_semantics_docs&#replace-joint-axis-use_parent_model_frame-with-joint-axis-xyz-expressed_in) is replacing the `//axis/use_parent_model_frame` element with an attribute `//axis/@expressed_in`. The migration script should map `//axis[use_parent_model_frame='true'` to `//axis[@expressed_in='__model__'`, but there are no mechanisms in the `sdf::Converter` class to support this. So this pull request adds the `Converter::Map` function that reads `<map>` elements that specifies a map of fixed input values to fixed output values.\r\n\r\nFor example, a portion of the `<convert>` specification for the `//use_parent_model_frame` migration is as follows:\r\n\r\n~~~\r\n<convert name=\"model\">\r\n  <convert name=\"joint\">\r\n    <convert name=\"axis\">\r\n      <map>\r\n        <from name=\"use_parent_model_frame\">\r\n          <value>true</value>\r\n          <value>True</value>\r\n          <value>TRUE</value>\r\n          <value>1</value>\r\n        </from>\r\n        <to name=\"xyz/@expressed_in\">\r\n          <value>__model__</value>\r\n        </to>\r\n      </map>\r\n      <remove element=\"use_parent_model_frame\"/>\r\n    </convert>\r\n  </convert>\r\n</convert>\r\n~~~\r\n\r\nThe `//convert/map/from` element has a `@name` attribute that specifies the name of the source to convert from. The name is a little like XPATH, with `/` as a delimiter between parent and child elements, and `@` indicating an attribute. The `//from/value` elements specify input values that will trigger an output value to be created.\r\n\r\nThe `//convert/map/to` element also has a `@name` attribute that specifies the destination of the map operation, with the same interpretation of `/` and `@`. The `//to/value` elements specify output values corresponding to a `//from/value` input.\r\n\r\nIf there are an equal number of `//from/value` and `//to/value` elements, then the map is constructed with the `//from/value` mapped to `//to/value` based on the order they are specified (1st with 1st, 2nd with 2nd, etc).\r\n\r\nIf there are fewer `//from/value` elements than `//to/value` elements, then the excess `//to/value` elements are ignored, and the matching `//to/value` elements are mapped 1:1 with the available `//from/value` elements.\r\n\r\nIf there are more `//from/value` elements than `//to/value` elements, then the excess `//from/value` elements are mapped to the last `//to/value` element. This is the case for the `//use_parent_model_frame` example above in which all 4 `//from` values are mapped to a single `//to` value.\r\n\r\nUPDATE: re-targeted to default.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/580/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:608453d771bc%0D67f63fc0243c?from_pullrequest_id=580"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/580/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/580.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/580/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/580/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/580"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/580/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:608453d771bc%0D67f63fc0243c?from_pullrequest_id=580"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/580/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/580/statuses_page=1.json"}}, "title": "Converter: add `<map>` element for converting fixed values", "close_source_branch": true, "reviewers": [{"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}], "id": 580, "destination": {"commit": {"hash": "67f63fc0243c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/67f63fc0243c.json"}, "html": {"href": "#!/osrf/sdformat/commits/67f63fc0243c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "created_on": "2019-10-18T23:06:48.798345+00:00", "summary": {"raw": "Part of the [SDF frame semantics proposal](http://sdformat.org/tutorials?tut=pose_frame_semantics_proposal&cat=pose_semantics_docs&#replace-joint-axis-use_parent_model_frame-with-joint-axis-xyz-expressed_in) is replacing the `//axis/use_parent_model_frame` element with an attribute `//axis/@expressed_in`. The migration script should map `//axis[use_parent_model_frame='true'` to `//axis[@expressed_in='__model__'`, but there are no mechanisms in the `sdf::Converter` class to support this. So this pull request adds the `Converter::Map` function that reads `<map>` elements that specifies a map of fixed input values to fixed output values.\r\n\r\nFor example, a portion of the `<convert>` specification for the `//use_parent_model_frame` migration is as follows:\r\n\r\n~~~\r\n<convert name=\"model\">\r\n  <convert name=\"joint\">\r\n    <convert name=\"axis\">\r\n      <map>\r\n        <from name=\"use_parent_model_frame\">\r\n          <value>true</value>\r\n          <value>True</value>\r\n          <value>TRUE</value>\r\n          <value>1</value>\r\n        </from>\r\n        <to name=\"xyz/@expressed_in\">\r\n          <value>__model__</value>\r\n        </to>\r\n      </map>\r\n      <remove element=\"use_parent_model_frame\"/>\r\n    </convert>\r\n  </convert>\r\n</convert>\r\n~~~\r\n\r\nThe `//convert/map/from` element has a `@name` attribute that specifies the name of the source to convert from. The name is a little like XPATH, with `/` as a delimiter between parent and child elements, and `@` indicating an attribute. The `//from/value` elements specify input values that will trigger an output value to be created.\r\n\r\nThe `//convert/map/to` element also has a `@name` attribute that specifies the destination of the map operation, with the same interpretation of `/` and `@`. The `//to/value` elements specify output values corresponding to a `//from/value` input.\r\n\r\nIf there are an equal number of `//from/value` and `//to/value` elements, then the map is constructed with the `//from/value` mapped to `//to/value` based on the order they are specified (1st with 1st, 2nd with 2nd, etc).\r\n\r\nIf there are fewer `//from/value` elements than `//to/value` elements, then the excess `//to/value` elements are ignored, and the matching `//to/value` elements are mapped 1:1 with the available `//from/value` elements.\r\n\r\nIf there are more `//from/value` elements than `//to/value` elements, then the excess `//from/value` elements are mapped to the last `//to/value` element. This is the case for the `//use_parent_model_frame` example above in which all 4 `//from` values are mapped to a single `//to` value.\r\n\r\nUPDATE: re-targeted to default.", "markup": "markdown", "html": "<p>Part of the <a data-is-external-link=\"true\" href=\"http://sdformat.org/tutorials?tut=pose_frame_semantics_proposal&amp;cat=pose_semantics_docs&amp;#replace-joint-axis-use_parent_model_frame-with-joint-axis-xyz-expressed_in\" rel=\"nofollow\">SDF frame semantics proposal</a> is replacing the <code>//axis/use_parent_model_frame</code> element with an attribute <code>//axis/@expressed_in</code>. The migration script should map <code>//axis[use_parent_model_frame='true'</code> to <code>//axis[@expressed_in='__model__'</code>, but there are no mechanisms in the <code>sdf::Converter</code> class to support this. So this pull request adds the <code>Converter::Map</code> function that reads <code>&lt;map&gt;</code> elements that specifies a map of fixed input values to fixed output values.</p>\n<p>For example, a portion of the <code>&lt;convert&gt;</code> specification for the <code>//use_parent_model_frame</code> migration is as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;model&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;convert</span> <span class=\"na\">name=</span><span class=\"s\">&quot;axis&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;map&gt;</span>\n        <span class=\"nt\">&lt;from</span> <span class=\"na\">name=</span><span class=\"s\">&quot;use_parent_model_frame&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>true<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>True<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>TRUE<span class=\"nt\">&lt;/value&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>1<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/from&gt;</span>\n        <span class=\"nt\">&lt;to</span> <span class=\"na\">name=</span><span class=\"s\">&quot;xyz/@expressed_in&quot;</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;value&gt;</span>__model__<span class=\"nt\">&lt;/value&gt;</span>\n        <span class=\"nt\">&lt;/to&gt;</span>\n      <span class=\"nt\">&lt;/map&gt;</span>\n      <span class=\"nt\">&lt;remove</span> <span class=\"na\">element=</span><span class=\"s\">&quot;use_parent_model_frame&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/convert&gt;</span>\n  <span class=\"nt\">&lt;/convert&gt;</span>\n<span class=\"nt\">&lt;/convert&gt;</span>\n</pre></div>\n\n\n<p>The <code>//convert/map/from</code> element has a <code>@name</code> attribute that specifies the name of the source to convert from. The name is a little like XPATH, with <code>/</code> as a delimiter between parent and child elements, and <code>@</code> indicating an attribute. The <code>//from/value</code> elements specify input values that will trigger an output value to be created.</p>\n<p>The <code>//convert/map/to</code> element also has a <code>@name</code> attribute that specifies the destination of the map operation, with the same interpretation of <code>/</code> and <code>@</code>. The <code>//to/value</code> elements specify output values corresponding to a <code>//from/value</code> input.</p>\n<p>If there are an equal number of <code>//from/value</code> and <code>//to/value</code> elements, then the map is constructed with the <code>//from/value</code> mapped to <code>//to/value</code> based on the order they are specified (1st with 1st, 2nd with 2nd, etc).</p>\n<p>If there are fewer <code>//from/value</code> elements than <code>//to/value</code> elements, then the excess <code>//to/value</code> elements are ignored, and the matching <code>//to/value</code> elements are mapped 1:1 with the available <code>//from/value</code> elements.</p>\n<p>If there are more <code>//from/value</code> elements than <code>//to/value</code> elements, then the excess <code>//from/value</code> elements are mapped to the last <code>//to/value</code> element. This is the case for the <code>//use_parent_model_frame</code> example above in which all 4 <code>//from</code> values are mapped to a single <code>//to</code> value.</p>\n<p>UPDATE: re-targeted to default.</p>", "type": "rendered"}, "source": {"commit": {"hash": "15c1f23788a8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/15c1f23788a8.json"}, "html": {"href": "#!/osrf/sdformat/commits/15c1f23788a8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "converter_map"}}, "comment_count": 14, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-11-15T21:06:18.114837+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": "2019-11-13T22:06:35.984138+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "PARTICIPANT", "participated_on": "2019-11-14T23:39:27.989798+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}], "reason": "", "updated_on": "2019-11-15T21:06:43.705080+00:00", "author": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "merge_commit": {"hash": "608453d771bc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/608453d771bc.json"}, "html": {"href": "#!/osrf/sdformat/commits/608453d771bc"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}