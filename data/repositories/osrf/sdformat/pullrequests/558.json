{"rendered": {"description": {"raw": "tl;dr\r\n\r\nSupport using paths relative to the SDF file within:\r\n\r\n* `<mesh><uri>`\r\n* `<actor><skin><filename>`\r\n* `<actor><animation><filename>` \r\n\r\nThat is, for this file tree:\r\n\r\n```\r\nsome_model/\r\n\u251c\u2500\u2500 meshes\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 some_mesh.dae\r\n\u251c\u2500\u2500 model.config\r\n\u2514\u2500\u2500 model.sdf\r\n```\r\n\r\n`model.sdf` may reference the mesh as follows:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\n## Alternatives\r\n\r\nOn Gazebo classic, it would usually have been like this:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>model://some_model/meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\nWhere `model://` would get substituted by paths in the user's `GAZEBO_MODEL_PATH` until a valid file was found.\r\n\r\nAs we move to models hosted on Ignition Fuel, just the model name becomes insufficient to fully identify a model, so we need better ways of referring to resources.\r\n\r\nSome alternatives considered:\r\n\r\n* `https://`\r\n\r\n    * Status:\r\n    \r\n        * Partial support on Gazebo 9\r\n        * Supported within `<include><uri>` on Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Full URL must be known while creating model. When referring to resources belonging to the same model, it's a chicken and egg problem: how to know the resource URL before uploading the model to the site?\r\n        * Tied to an online service\r\n        \r\n    \r\n* Absolute path \\(`file:///`, `/`\\)\r\n\r\n    * Status:\r\n    \r\n        * Supported both on Gazebo 9 and Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Not easily portable from one computer to another\r\n        * Exposes creator's username \\(`/home/username/...`\\)\r\n        \r\n    \r\n* `model://`\r\n\r\n    * Status:\r\n    \r\n        * Full support on Gazebo 9\r\n        * Partial support for meshes on Ignition. Gets converted to absolute path after downloaded from Fuel.\r\n        \r\n    * Pros:\r\n    \r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Ambiguous, no owner / host site info\r\n        \r\n    \r\n* Relative path `meshes/`\r\n\r\n    * Status:\r\n    \r\n        * Support added on this PR, to be used by Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Hard to share resources across models\r\n        \r\n    \r\n\r\nGiven that all alternatives have pros and cons, there isn't one right answer, so we need to support multiple approaches. This pull request adds support for relative paths without breaking any of the previous use cases \\*\\*. We should still address its \"con\", which is the difficulty of sharing resources across models. But that isn't supported at all on Ignition yet, so I think it can be considered out of the scope of this PR.\r\n\r\nIt's also worth mentioning that we've already been using relative paths inside `DAE` and `OBJ` files for a while, so it's only natural to extend it to SDF.\r\n\r\n\\*\\* Except for relative paths to the directory `ign gazebo` is called from, which I don't think is a common case.\r\n\r\n## Try it out\r\n\r\nYou'll need [this](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/433/handle-relative-uris/diff) `ign-gazebo` PR.\r\n\r\nLaunch `ign gazebo`:\r\n\r\n`ign gazebo -v 3`\r\n\r\nSpawn an example model with relative paths that I uploaded to Fuel:\r\n\r\n```\r\nign service -s /world/default/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/X1 Config 1 - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"vehicle\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\nSee that all meshes are properly loaded.\r\n\r\nTo try actors, you'll need [this ign-gazebo PR](https://bitbucket.org/mingfeisun/ign-gazebo/pull-requests/4/support-spawning-actors-at-runtime/diff), and you can spawn an actor with relative paths like this (world must use ogre 1):\r\n\r\n```\r\nign service -s /world/actors/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/actor - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"person\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\n## Questions\r\n\r\n* ~~With the current implementation, `mesh->Element()->Get<std::string>(\"uri\")` will be different from `mesh->Uri()`. Is it better to also change the `uri` within the element to keep them consistent?~~ Now `Uri()` is the same as the raw `<uri>`\r\n* ~~It could be argued that SDFormat shouldn't be changing the URI value and instead just reading it and passing it along. I'm fine with that, but for downstream applications that can't rely on `mesh->Element()` \\(because the mesh object is serialized\\), we'd need to add things like `Mesh::FilePath`, a `filepath` field to the equivalent ign-msg, etc, which break ABI. \\(ok, this is not a question, more like a disclaimer :grimacing: \\)~~ Now SDF is only storing `FilePath` and `ign-gazebo` is combining them before populating the message.", "markup": "markdown", "html": "<p>tl;dr</p>\n<p>Support using paths relative to the SDF file within:</p>\n<ul>\n<li><code>&lt;mesh&gt;&lt;uri&gt;</code></li>\n<li><code>&lt;actor&gt;&lt;skin&gt;&lt;filename&gt;</code></li>\n<li><code>&lt;actor&gt;&lt;animation&gt;&lt;filename&gt;</code> </li>\n</ul>\n<p>That is, for this file tree:</p>\n<div class=\"codehilite\"><pre><span></span>some_model/\n\u251c\u2500\u2500 meshes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 some_mesh.dae\n\u251c\u2500\u2500 model.config\n\u2514\u2500\u2500 model.sdf\n</pre></div>\n\n\n<p><code>model.sdf</code> may reference the mesh as follows:</p>\n<div class=\"codehilite\"><pre><span></span>                <span class=\"nt\">&lt;geometry&gt;</span>\n                    <span class=\"nt\">&lt;mesh&gt;</span>\n                        <span class=\"nt\">&lt;uri&gt;</span>meshes/some_mesh.dae<span class=\"nt\">&lt;/uri&gt;</span>\n                    <span class=\"nt\">&lt;/mesh&gt;</span>\n                <span class=\"nt\">&lt;/geometry&gt;</span>\n</pre></div>\n\n\n<h2 id=\"markdown-header-alternatives\">Alternatives</h2>\n<p>On Gazebo classic, it would usually have been like this:</p>\n<div class=\"codehilite\"><pre><span></span>                <span class=\"nt\">&lt;geometry&gt;</span>\n                    <span class=\"nt\">&lt;mesh&gt;</span>\n                        <span class=\"nt\">&lt;uri&gt;</span>model://some_model/meshes/some_mesh.dae<span class=\"nt\">&lt;/uri&gt;</span>\n                    <span class=\"nt\">&lt;/mesh&gt;</span>\n                <span class=\"nt\">&lt;/geometry&gt;</span>\n</pre></div>\n\n\n<p>Where <code>model://</code> would get substituted by paths in the user's <code>GAZEBO_MODEL_PATH</code> until a valid file was found.</p>\n<p>As we move to models hosted on Ignition Fuel, just the model name becomes insufficient to fully identify a model, so we need better ways of referring to resources.</p>\n<p>Some alternatives considered:</p>\n<ul>\n<li>\n<p><code>https://</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Partial support on Gazebo 9</li>\n<li>Supported within <code>&lt;include&gt;&lt;uri&gt;</code> on Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Full URL must be known while creating model. When referring to resources belonging to the same model, it's a chicken and egg problem: how to know the resource URL before uploading the model to the site?</li>\n<li>Tied to an online service</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Absolute path (<code>file:///</code>, <code>/</code>)</p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Supported both on Gazebo 9 and Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Not easily portable from one computer to another</li>\n<li>Exposes creator's username (<code>/home/username/...</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>model://</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Full support on Gazebo 9</li>\n<li>Partial support for meshes on Ignition. Gets converted to absolute path after downloaded from Fuel.</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>Portable</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Ambiguous, no owner / host site info</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Relative path <code>meshes/</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Support added on this PR, to be used by Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n<li>Portable</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Hard to share resources across models</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Given that all alternatives have pros and cons, there isn't one right answer, so we need to support multiple approaches. This pull request adds support for relative paths without breaking any of the previous use cases **. We should still address its \"con\", which is the difficulty of sharing resources across models. But that isn't supported at all on Ignition yet, so I think it can be considered out of the scope of this PR.</p>\n<p>It's also worth mentioning that we've already been using relative paths inside <code>DAE</code> and <code>OBJ</code> files for a while, so it's only natural to extend it to SDF.</p>\n<p>** Except for relative paths to the directory <code>ign gazebo</code> is called from, which I don't think is a common case.</p>\n<h2 id=\"markdown-header-try-it-out\">Try it out</h2>\n<p>You'll need <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/433/handle-relative-uris/diff\" rel=\"nofollow\">this</a> <code>ign-gazebo</code> PR.</p>\n<p>Launch <code>ign gazebo</code>:</p>\n<p><code>ign gazebo -v 3</code></p>\n<p>Spawn an example model with relative paths that I uploaded to Fuel:</p>\n<div class=\"codehilite\"><pre><span></span>ign service -s /world/default/create \\\n--reqtype ignition.msgs.EntityFactory \\\n--reptype ignition.msgs.Boolean \\\n--timeout 5000 \\\n--req &#39;sdf: &#39;\\\n&#39;&quot;<span class=\"cp\">&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">\\&quot;1.6\\&quot;</span><span class=\"nt\">&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;uri&gt;</span>https://fuel.ignitionrobotics.org/1.0/chapulina/models/X1 Config 1 - relative paths<span class=\"nt\">&lt;/uri&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/sdf&gt;</span>&quot; &#39;\\\n&#39;pose: {position: {z: 1}} &#39;\\\n&#39;name: &quot;vehicle&quot; &#39;\\\n&#39;allow_renaming: true&#39;\n</pre></div>\n\n\n<p>See that all meshes are properly loaded.</p>\n<p>To try actors, you'll need <a data-is-external-link=\"true\" href=\"https://bitbucket.org/mingfeisun/ign-gazebo/pull-requests/4/support-spawning-actors-at-runtime/diff\" rel=\"nofollow\">this ign-gazebo PR</a>, and you can spawn an actor with relative paths like this (world must use ogre 1):</p>\n<div class=\"codehilite\"><pre><span></span>ign service -s /world/actors/create \\\n--reqtype ignition.msgs.EntityFactory \\\n--reptype ignition.msgs.Boolean \\\n--timeout 5000 \\\n--req &#39;sdf: &#39;\\\n&#39;&quot;<span class=\"cp\">&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">\\&quot;1.6\\&quot;</span><span class=\"nt\">&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;uri&gt;</span>https://fuel.ignitionrobotics.org/1.0/chapulina/models/actor - relative paths<span class=\"nt\">&lt;/uri&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/sdf&gt;</span>&quot; &#39;\\\n&#39;pose: {position: {z: 1}} &#39;\\\n&#39;name: &quot;person&quot; &#39;\\\n&#39;allow_renaming: true&#39;\n</pre></div>\n\n\n<h2 id=\"markdown-header-questions\">Questions</h2>\n<ul>\n<li><del>With the current implementation, <code>mesh-&gt;Element()-&gt;Get&lt;std::string&gt;(\"uri\")</code> will be different from <code>mesh-&gt;Uri()</code>. Is it better to also change the <code>uri</code> within the element to keep them consistent?</del> Now <code>Uri()</code> is the same as the raw <code>&lt;uri&gt;</code></li>\n<li><del>It could be argued that SDFormat shouldn't be changing the URI value and instead just reading it and passing it along. I'm fine with that, but for downstream applications that can't rely on <code>mesh-&gt;Element()</code> (because the mesh object is serialized), we'd need to add things like <code>Mesh::FilePath</code>, a <code>filepath</code> field to the equivalent ign-msg, etc, which break ABI. (ok, this is not a question, more like a disclaimer <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f62c.png\" alt=\"\ud83d\ude2c\" title=\":grimacing:\" data-emoji-short-name=\":grimacing:\" /> )</del> Now SDF is only storing <code>FilePath</code> and <code>ign-gazebo</code> is combining them before populating the message.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Accept relative path in <uri>", "markup": "markdown", "html": "<p>Accept relative path in &lt;uri&gt;</p>", "type": "rendered"}}, "type": "pullrequest", "description": "tl;dr\r\n\r\nSupport using paths relative to the SDF file within:\r\n\r\n* `<mesh><uri>`\r\n* `<actor><skin><filename>`\r\n* `<actor><animation><filename>` \r\n\r\nThat is, for this file tree:\r\n\r\n```\r\nsome_model/\r\n\u251c\u2500\u2500 meshes\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 some_mesh.dae\r\n\u251c\u2500\u2500 model.config\r\n\u2514\u2500\u2500 model.sdf\r\n```\r\n\r\n`model.sdf` may reference the mesh as follows:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\n## Alternatives\r\n\r\nOn Gazebo classic, it would usually have been like this:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>model://some_model/meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\nWhere `model://` would get substituted by paths in the user's `GAZEBO_MODEL_PATH` until a valid file was found.\r\n\r\nAs we move to models hosted on Ignition Fuel, just the model name becomes insufficient to fully identify a model, so we need better ways of referring to resources.\r\n\r\nSome alternatives considered:\r\n\r\n* `https://`\r\n\r\n    * Status:\r\n    \r\n        * Partial support on Gazebo 9\r\n        * Supported within `<include><uri>` on Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Full URL must be known while creating model. When referring to resources belonging to the same model, it's a chicken and egg problem: how to know the resource URL before uploading the model to the site?\r\n        * Tied to an online service\r\n        \r\n    \r\n* Absolute path \\(`file:///`, `/`\\)\r\n\r\n    * Status:\r\n    \r\n        * Supported both on Gazebo 9 and Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Not easily portable from one computer to another\r\n        * Exposes creator's username \\(`/home/username/...`\\)\r\n        \r\n    \r\n* `model://`\r\n\r\n    * Status:\r\n    \r\n        * Full support on Gazebo 9\r\n        * Partial support for meshes on Ignition. Gets converted to absolute path after downloaded from Fuel.\r\n        \r\n    * Pros:\r\n    \r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Ambiguous, no owner / host site info\r\n        \r\n    \r\n* Relative path `meshes/`\r\n\r\n    * Status:\r\n    \r\n        * Support added on this PR, to be used by Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Hard to share resources across models\r\n        \r\n    \r\n\r\nGiven that all alternatives have pros and cons, there isn't one right answer, so we need to support multiple approaches. This pull request adds support for relative paths without breaking any of the previous use cases \\*\\*. We should still address its \"con\", which is the difficulty of sharing resources across models. But that isn't supported at all on Ignition yet, so I think it can be considered out of the scope of this PR.\r\n\r\nIt's also worth mentioning that we've already been using relative paths inside `DAE` and `OBJ` files for a while, so it's only natural to extend it to SDF.\r\n\r\n\\*\\* Except for relative paths to the directory `ign gazebo` is called from, which I don't think is a common case.\r\n\r\n## Try it out\r\n\r\nYou'll need [this](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/433/handle-relative-uris/diff) `ign-gazebo` PR.\r\n\r\nLaunch `ign gazebo`:\r\n\r\n`ign gazebo -v 3`\r\n\r\nSpawn an example model with relative paths that I uploaded to Fuel:\r\n\r\n```\r\nign service -s /world/default/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/X1 Config 1 - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"vehicle\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\nSee that all meshes are properly loaded.\r\n\r\nTo try actors, you'll need [this ign-gazebo PR](https://bitbucket.org/mingfeisun/ign-gazebo/pull-requests/4/support-spawning-actors-at-runtime/diff), and you can spawn an actor with relative paths like this (world must use ogre 1):\r\n\r\n```\r\nign service -s /world/actors/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/actor - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"person\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\n## Questions\r\n\r\n* ~~With the current implementation, `mesh->Element()->Get<std::string>(\"uri\")` will be different from `mesh->Uri()`. Is it better to also change the `uri` within the element to keep them consistent?~~ Now `Uri()` is the same as the raw `<uri>`\r\n* ~~It could be argued that SDFormat shouldn't be changing the URI value and instead just reading it and passing it along. I'm fine with that, but for downstream applications that can't rely on `mesh->Element()` \\(because the mesh object is serialized\\), we'd need to add things like `Mesh::FilePath`, a `filepath` field to the equivalent ign-msg, etc, which break ABI. \\(ok, this is not a question, more like a disclaimer :grimacing: \\)~~ Now SDF is only storing `FilePath` and `ign-gazebo` is combining them before populating the message.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/558/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:6bb8c1cc6615%0D2077d3d18a67?from_pullrequest_id=558"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/558/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/558.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/558/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/558/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/558"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/558/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:6bb8c1cc6615%0D2077d3d18a67?from_pullrequest_id=558"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/558/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/558/statuses_page=1.json"}}, "title": "Accept relative path in <uri>", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}], "id": 558, "destination": {"commit": {"hash": "2077d3d18a67", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/2077d3d18a67.json"}, "html": {"href": "#!/osrf/sdformat/commits/2077d3d18a67"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "sdf8"}}, "created_on": "2019-09-05T02:47:40.715447+00:00", "summary": {"raw": "tl;dr\r\n\r\nSupport using paths relative to the SDF file within:\r\n\r\n* `<mesh><uri>`\r\n* `<actor><skin><filename>`\r\n* `<actor><animation><filename>` \r\n\r\nThat is, for this file tree:\r\n\r\n```\r\nsome_model/\r\n\u251c\u2500\u2500 meshes\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 some_mesh.dae\r\n\u251c\u2500\u2500 model.config\r\n\u2514\u2500\u2500 model.sdf\r\n```\r\n\r\n`model.sdf` may reference the mesh as follows:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\n## Alternatives\r\n\r\nOn Gazebo classic, it would usually have been like this:\r\n\r\n```\r\n                <geometry>\r\n                    <mesh>\r\n                        <uri>model://some_model/meshes/some_mesh.dae</uri>\r\n                    </mesh>\r\n                </geometry>\r\n```\r\n\r\nWhere `model://` would get substituted by paths in the user's `GAZEBO_MODEL_PATH` until a valid file was found.\r\n\r\nAs we move to models hosted on Ignition Fuel, just the model name becomes insufficient to fully identify a model, so we need better ways of referring to resources.\r\n\r\nSome alternatives considered:\r\n\r\n* `https://`\r\n\r\n    * Status:\r\n    \r\n        * Partial support on Gazebo 9\r\n        * Supported within `<include><uri>` on Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Full URL must be known while creating model. When referring to resources belonging to the same model, it's a chicken and egg problem: how to know the resource URL before uploading the model to the site?\r\n        * Tied to an online service\r\n        \r\n    \r\n* Absolute path \\(`file:///`, `/`\\)\r\n\r\n    * Status:\r\n    \r\n        * Supported both on Gazebo 9 and Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        \r\n    * Cons:\r\n    \r\n        * Not easily portable from one computer to another\r\n        * Exposes creator's username \\(`/home/username/...`\\)\r\n        \r\n    \r\n* `model://`\r\n\r\n    * Status:\r\n    \r\n        * Full support on Gazebo 9\r\n        * Partial support for meshes on Ignition. Gets converted to absolute path after downloaded from Fuel.\r\n        \r\n    * Pros:\r\n    \r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Ambiguous, no owner / host site info\r\n        \r\n    \r\n* Relative path `meshes/`\r\n\r\n    * Status:\r\n    \r\n        * Support added on this PR, to be used by Ignition\r\n        \r\n    * Pros:\r\n    \r\n        * No ambiguity\r\n        * Portable\r\n        \r\n    * Cons:\r\n    \r\n        * Hard to share resources across models\r\n        \r\n    \r\n\r\nGiven that all alternatives have pros and cons, there isn't one right answer, so we need to support multiple approaches. This pull request adds support for relative paths without breaking any of the previous use cases \\*\\*. We should still address its \"con\", which is the difficulty of sharing resources across models. But that isn't supported at all on Ignition yet, so I think it can be considered out of the scope of this PR.\r\n\r\nIt's also worth mentioning that we've already been using relative paths inside `DAE` and `OBJ` files for a while, so it's only natural to extend it to SDF.\r\n\r\n\\*\\* Except for relative paths to the directory `ign gazebo` is called from, which I don't think is a common case.\r\n\r\n## Try it out\r\n\r\nYou'll need [this](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/433/handle-relative-uris/diff) `ign-gazebo` PR.\r\n\r\nLaunch `ign gazebo`:\r\n\r\n`ign gazebo -v 3`\r\n\r\nSpawn an example model with relative paths that I uploaded to Fuel:\r\n\r\n```\r\nign service -s /world/default/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/X1 Config 1 - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"vehicle\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\nSee that all meshes are properly loaded.\r\n\r\nTo try actors, you'll need [this ign-gazebo PR](https://bitbucket.org/mingfeisun/ign-gazebo/pull-requests/4/support-spawning-actors-at-runtime/diff), and you can spawn an actor with relative paths like this (world must use ogre 1):\r\n\r\n```\r\nign service -s /world/actors/create \\\r\n--reqtype ignition.msgs.EntityFactory \\\r\n--reptype ignition.msgs.Boolean \\\r\n--timeout 5000 \\\r\n--req 'sdf: '\\\r\n'\"<?xml version=\\\"1.0\\\" ?>'\\\r\n'<sdf version=\\\"1.6\\\">'\\\r\n'<include>'\\\r\n'<uri>https://fuel.ignitionrobotics.org/1.0/chapulina/models/actor - relative paths</uri>'\\\r\n'</include>'\\\r\n'</sdf>\" '\\\r\n'pose: {position: {z: 1}} '\\\r\n'name: \"person\" '\\\r\n'allow_renaming: true'\r\n```\r\n\r\n## Questions\r\n\r\n* ~~With the current implementation, `mesh->Element()->Get<std::string>(\"uri\")` will be different from `mesh->Uri()`. Is it better to also change the `uri` within the element to keep them consistent?~~ Now `Uri()` is the same as the raw `<uri>`\r\n* ~~It could be argued that SDFormat shouldn't be changing the URI value and instead just reading it and passing it along. I'm fine with that, but for downstream applications that can't rely on `mesh->Element()` \\(because the mesh object is serialized\\), we'd need to add things like `Mesh::FilePath`, a `filepath` field to the equivalent ign-msg, etc, which break ABI. \\(ok, this is not a question, more like a disclaimer :grimacing: \\)~~ Now SDF is only storing `FilePath` and `ign-gazebo` is combining them before populating the message.", "markup": "markdown", "html": "<p>tl;dr</p>\n<p>Support using paths relative to the SDF file within:</p>\n<ul>\n<li><code>&lt;mesh&gt;&lt;uri&gt;</code></li>\n<li><code>&lt;actor&gt;&lt;skin&gt;&lt;filename&gt;</code></li>\n<li><code>&lt;actor&gt;&lt;animation&gt;&lt;filename&gt;</code> </li>\n</ul>\n<p>That is, for this file tree:</p>\n<div class=\"codehilite\"><pre><span></span>some_model/\n\u251c\u2500\u2500 meshes\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 some_mesh.dae\n\u251c\u2500\u2500 model.config\n\u2514\u2500\u2500 model.sdf\n</pre></div>\n\n\n<p><code>model.sdf</code> may reference the mesh as follows:</p>\n<div class=\"codehilite\"><pre><span></span>                <span class=\"nt\">&lt;geometry&gt;</span>\n                    <span class=\"nt\">&lt;mesh&gt;</span>\n                        <span class=\"nt\">&lt;uri&gt;</span>meshes/some_mesh.dae<span class=\"nt\">&lt;/uri&gt;</span>\n                    <span class=\"nt\">&lt;/mesh&gt;</span>\n                <span class=\"nt\">&lt;/geometry&gt;</span>\n</pre></div>\n\n\n<h2 id=\"markdown-header-alternatives\">Alternatives</h2>\n<p>On Gazebo classic, it would usually have been like this:</p>\n<div class=\"codehilite\"><pre><span></span>                <span class=\"nt\">&lt;geometry&gt;</span>\n                    <span class=\"nt\">&lt;mesh&gt;</span>\n                        <span class=\"nt\">&lt;uri&gt;</span>model://some_model/meshes/some_mesh.dae<span class=\"nt\">&lt;/uri&gt;</span>\n                    <span class=\"nt\">&lt;/mesh&gt;</span>\n                <span class=\"nt\">&lt;/geometry&gt;</span>\n</pre></div>\n\n\n<p>Where <code>model://</code> would get substituted by paths in the user's <code>GAZEBO_MODEL_PATH</code> until a valid file was found.</p>\n<p>As we move to models hosted on Ignition Fuel, just the model name becomes insufficient to fully identify a model, so we need better ways of referring to resources.</p>\n<p>Some alternatives considered:</p>\n<ul>\n<li>\n<p><code>https://</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Partial support on Gazebo 9</li>\n<li>Supported within <code>&lt;include&gt;&lt;uri&gt;</code> on Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Full URL must be known while creating model. When referring to resources belonging to the same model, it's a chicken and egg problem: how to know the resource URL before uploading the model to the site?</li>\n<li>Tied to an online service</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Absolute path (<code>file:///</code>, <code>/</code>)</p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Supported both on Gazebo 9 and Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Not easily portable from one computer to another</li>\n<li>Exposes creator's username (<code>/home/username/...</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>model://</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Full support on Gazebo 9</li>\n<li>Partial support for meshes on Ignition. Gets converted to absolute path after downloaded from Fuel.</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>Portable</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Ambiguous, no owner / host site info</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Relative path <code>meshes/</code></p>\n<ul>\n<li>\n<p>Status:</p>\n<ul>\n<li>Support added on this PR, to be used by Ignition</li>\n</ul>\n</li>\n<li>\n<p>Pros:</p>\n<ul>\n<li>No ambiguity</li>\n<li>Portable</li>\n</ul>\n</li>\n<li>\n<p>Cons:</p>\n<ul>\n<li>Hard to share resources across models</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Given that all alternatives have pros and cons, there isn't one right answer, so we need to support multiple approaches. This pull request adds support for relative paths without breaking any of the previous use cases **. We should still address its \"con\", which is the difficulty of sharing resources across models. But that isn't supported at all on Ignition yet, so I think it can be considered out of the scope of this PR.</p>\n<p>It's also worth mentioning that we've already been using relative paths inside <code>DAE</code> and <code>OBJ</code> files for a while, so it's only natural to extend it to SDF.</p>\n<p>** Except for relative paths to the directory <code>ign gazebo</code> is called from, which I don't think is a common case.</p>\n<h2 id=\"markdown-header-try-it-out\">Try it out</h2>\n<p>You'll need <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/433/handle-relative-uris/diff\" rel=\"nofollow\">this</a> <code>ign-gazebo</code> PR.</p>\n<p>Launch <code>ign gazebo</code>:</p>\n<p><code>ign gazebo -v 3</code></p>\n<p>Spawn an example model with relative paths that I uploaded to Fuel:</p>\n<div class=\"codehilite\"><pre><span></span>ign service -s /world/default/create \\\n--reqtype ignition.msgs.EntityFactory \\\n--reptype ignition.msgs.Boolean \\\n--timeout 5000 \\\n--req &#39;sdf: &#39;\\\n&#39;&quot;<span class=\"cp\">&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">\\&quot;1.6\\&quot;</span><span class=\"nt\">&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;uri&gt;</span>https://fuel.ignitionrobotics.org/1.0/chapulina/models/X1 Config 1 - relative paths<span class=\"nt\">&lt;/uri&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/sdf&gt;</span>&quot; &#39;\\\n&#39;pose: {position: {z: 1}} &#39;\\\n&#39;name: &quot;vehicle&quot; &#39;\\\n&#39;allow_renaming: true&#39;\n</pre></div>\n\n\n<p>See that all meshes are properly loaded.</p>\n<p>To try actors, you'll need <a data-is-external-link=\"true\" href=\"https://bitbucket.org/mingfeisun/ign-gazebo/pull-requests/4/support-spawning-actors-at-runtime/diff\" rel=\"nofollow\">this ign-gazebo PR</a>, and you can spawn an actor with relative paths like this (world must use ogre 1):</p>\n<div class=\"codehilite\"><pre><span></span>ign service -s /world/actors/create \\\n--reqtype ignition.msgs.EntityFactory \\\n--reptype ignition.msgs.Boolean \\\n--timeout 5000 \\\n--req &#39;sdf: &#39;\\\n&#39;&quot;<span class=\"cp\">&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;sdf</span> <span class=\"na\">version=</span><span class=\"s\">\\&quot;1.6\\&quot;</span><span class=\"nt\">&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;uri&gt;</span>https://fuel.ignitionrobotics.org/1.0/chapulina/models/actor - relative paths<span class=\"nt\">&lt;/uri&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/include&gt;</span>&#39;\\\n&#39;<span class=\"nt\">&lt;/sdf&gt;</span>&quot; &#39;\\\n&#39;pose: {position: {z: 1}} &#39;\\\n&#39;name: &quot;person&quot; &#39;\\\n&#39;allow_renaming: true&#39;\n</pre></div>\n\n\n<h2 id=\"markdown-header-questions\">Questions</h2>\n<ul>\n<li><del>With the current implementation, <code>mesh-&gt;Element()-&gt;Get&lt;std::string&gt;(\"uri\")</code> will be different from <code>mesh-&gt;Uri()</code>. Is it better to also change the <code>uri</code> within the element to keep them consistent?</del> Now <code>Uri()</code> is the same as the raw <code>&lt;uri&gt;</code></li>\n<li><del>It could be argued that SDFormat shouldn't be changing the URI value and instead just reading it and passing it along. I'm fine with that, but for downstream applications that can't rely on <code>mesh-&gt;Element()</code> (because the mesh object is serialized), we'd need to add things like <code>Mesh::FilePath</code>, a <code>filepath</code> field to the equivalent ign-msg, etc, which break ABI. (ok, this is not a question, more like a disclaimer <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f62c.png\" alt=\"\ud83d\ude2c\" title=\":grimacing:\" data-emoji-short-name=\":grimacing:\" /> )</del> Now SDF is only storing <code>FilePath</code> and <code>ign-gazebo</code> is combining them before populating the message.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "5b51ff12b340", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5b51ff12b340.json"}, "html": {"href": "#!/osrf/sdformat/commits/5b51ff12b340"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "rel_path"}}, "comment_count": 51, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-09-28T02:21:14.107248+00:00", "type": "participant", "approved": true, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}, {"role": "REVIEWER", "participated_on": "2019-09-20T22:35:09.567914+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-10-17T11:17:19.667594+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}], "reason": "", "updated_on": "2019-10-22T00:32:57.484363+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "6bb8c1cc6615", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/6bb8c1cc6615.json"}, "html": {"href": "#!/osrf/sdformat/commits/6bb8c1cc6615"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}