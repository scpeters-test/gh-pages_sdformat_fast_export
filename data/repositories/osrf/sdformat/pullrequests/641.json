{"rendered": {"description": {"raw": "When a move assignment was happening, the current contents of dataPtr were being leaked, as they were never free'd/deleted.\r\n\r\nThis was discovered when diagnosing [https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak](https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak). In that case, log playback was causing `EntityComponentManager::SetState` very frequently, which makes use of move assignments on different component types. Since some of our components are `sdf::*` objects, this was surfaced.\r\n\r\nThe leaking can be verified by running at of the `UNIT_*_TEST` tests in sdformat under `valgrind`\r\n\r\n```\r\n(blueprint)\u279c  sdformat8 valgrind --tool=memcheck --leak-check=full ./src/UNIT_Material_TEST \r\n==19839== Memcheck, a memory error detector\r\n==19839== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==19839== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==19839== Command: ./src/UNIT_Material_TEST\r\n==19839== \r\nRunning main() from gtest_main.cc\r\n[==========] Running 8 tests from 2 test cases.\r\n[----------] Global test environment set-up.\r\n[----------] 7 tests from DOMMaterial\r\n[ RUN      ] DOMMaterial.Construction\r\n[       OK ] DOMMaterial.Construction (10 ms)\r\n[ RUN      ] DOMMaterial.MoveConstructor\r\n[       OK ] DOMMaterial.MoveConstructor (6 ms)\r\n[ RUN      ] DOMMaterial.CopyConstructor\r\n[       OK ] DOMMaterial.CopyConstructor (5 ms)\r\n[ RUN      ] DOMMaterial.AssignmentOperator\r\n[       OK ] DOMMaterial.AssignmentOperator (4 ms)\r\n[ RUN      ] DOMMaterial.MoveAssignmentOperator\r\n[       OK ] DOMMaterial.MoveAssignmentOperator (5 ms)\r\n[ RUN      ] DOMMaterial.Set\r\n[       OK ] DOMMaterial.Set (16 ms)\r\n[ RUN      ] DOMMaterial.InvalidSdf\r\n[       OK ] DOMMaterial.InvalidSdf (6 ms)\r\n[----------] 7 tests from DOMMaterial (56 ms total)\r\n\r\n[----------] 1 test from DOMAtmosphere\r\n[ RUN      ] DOMAtmosphere.CopyAssignmentAfterMove\r\n[       OK ] DOMAtmosphere.CopyAssignmentAfterMove (2 ms)\r\n[----------] 1 test from DOMAtmosphere (3 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 8 tests from 2 test cases ran. (74 ms total)\r\n[  PASSED  ] 8 tests.\r\n==19839== \r\n==19839== HEAP SUMMARY:\r\n==19839==     in use at exit: 232 bytes in 1 blocks\r\n==19839==   total heap usage: 3,564 allocs, 3,563 frees, 3,916,665 bytes allocated\r\n==19839== \r\n==19839== 232 bytes in 1 blocks are definitely lost in loss record 1 of 1\r\n==19839==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==19839==    by 0x4EC5EDA: sdf::v8::Material::Material() (Material.cc:66)\r\n==19839==    by 0x11D0FA: DOMMaterial_MoveAssignmentOperator_Test::TestBody() (Material_TEST.cc:143)\r\n==19839==    by 0x14D029: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2421)\r\n==19839==    by 0x14D029: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x142E29: Run (gtest.cc:2495)\r\n==19839==    by 0x142E29: testing::Test::Run() (gtest.cc:2486)\r\n==19839==    by 0x142F77: Run (gtest.cc:2671)\r\n==19839==    by 0x142F77: testing::TestInfo::Run() (gtest.cc:2645)\r\n==19839==    by 0x143054: Run (gtest.cc:2789)\r\n==19839==    by 0x143054: testing::TestCase::Run() (gtest.cc:2774)\r\n==19839==    by 0x14357B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5051)\r\n==19839==    by 0x14D539: HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest.cc:2421)\r\n==19839==    by 0x14D539: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x1436AB: testing::UnitTest::Run() (gtest.cc:4667)\r\n==19839==    by 0x1194A8: RUN_ALL_TESTS (gtest.h:2329)\r\n==19839==    by 0x1194A8: main (gtest_main.cc:37)\r\n==19839== \r\n==19839== LEAK SUMMARY:\r\n==19839==    definitely lost: 232 bytes in 1 blocks\r\n==19839==    indirectly lost: 0 bytes in 0 blocks\r\n==19839==      possibly lost: 0 bytes in 0 blocks\r\n==19839==    still reachable: 0 bytes in 0 blocks\r\n==19839==         suppressed: 0 bytes in 0 blocks\r\n==19839== \r\n==19839== For counts of detected and suppressed errors, rerun with: -v\r\n==19839== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n\u200c\r\n\r\nThe leaks are gone after these modifications.", "markup": "markdown", "html": "<p>When a move assignment was happening, the current contents of dataPtr were being leaked, as they were never free'd/deleted.</p>\n<p>This was discovered when diagnosing <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak\" rel=\"nofollow\">https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak</a>. In that case, log playback was causing <code>EntityComponentManager::SetState</code> very frequently, which makes use of move assignments on different component types. Since some of our components are <code>sdf::*</code> objects, this was surfaced.</p>\n<p>The leaking can be verified by running at of the <code>UNIT_*_TEST</code> tests in sdformat under <code>valgrind</code></p>\n<div class=\"codehilite\"><pre><span></span>(blueprint)\u279c  sdformat8 valgrind --tool=memcheck --leak-check=full ./src/UNIT_Material_TEST \n==19839== Memcheck, a memory error detector\n==19839== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==19839== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==19839== Command: ./src/UNIT_Material_TEST\n==19839== \nRunning main() from gtest_main.cc\n[==========] Running 8 tests from 2 test cases.\n[----------] Global test environment set-up.\n[----------] 7 tests from DOMMaterial\n[ RUN      ] DOMMaterial.Construction\n[       OK ] DOMMaterial.Construction (10 ms)\n[ RUN      ] DOMMaterial.MoveConstructor\n[       OK ] DOMMaterial.MoveConstructor (6 ms)\n[ RUN      ] DOMMaterial.CopyConstructor\n[       OK ] DOMMaterial.CopyConstructor (5 ms)\n[ RUN      ] DOMMaterial.AssignmentOperator\n[       OK ] DOMMaterial.AssignmentOperator (4 ms)\n[ RUN      ] DOMMaterial.MoveAssignmentOperator\n[       OK ] DOMMaterial.MoveAssignmentOperator (5 ms)\n[ RUN      ] DOMMaterial.Set\n[       OK ] DOMMaterial.Set (16 ms)\n[ RUN      ] DOMMaterial.InvalidSdf\n[       OK ] DOMMaterial.InvalidSdf (6 ms)\n[----------] 7 tests from DOMMaterial (56 ms total)\n\n[----------] 1 test from DOMAtmosphere\n[ RUN      ] DOMAtmosphere.CopyAssignmentAfterMove\n[       OK ] DOMAtmosphere.CopyAssignmentAfterMove (2 ms)\n[----------] 1 test from DOMAtmosphere (3 ms total)\n\n[----------] Global test environment tear-down\n[==========] 8 tests from 2 test cases ran. (74 ms total)\n[  PASSED  ] 8 tests.\n==19839== \n==19839== HEAP SUMMARY:\n==19839==     in use at exit: 232 bytes in 1 blocks\n==19839==   total heap usage: 3,564 allocs, 3,563 frees, 3,916,665 bytes allocated\n==19839== \n==19839== 232 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==19839==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==19839==    by 0x4EC5EDA: sdf::v8::Material::Material() (Material.cc:66)\n==19839==    by 0x11D0FA: DOMMaterial_MoveAssignmentOperator_Test::TestBody() (Material_TEST.cc:143)\n==19839==    by 0x14D029: HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (gtest.cc:2421)\n==19839==    by 0x14D029: void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2457)\n==19839==    by 0x142E29: Run (gtest.cc:2495)\n==19839==    by 0x142E29: testing::Test::Run() (gtest.cc:2486)\n==19839==    by 0x142F77: Run (gtest.cc:2671)\n==19839==    by 0x142F77: testing::TestInfo::Run() (gtest.cc:2645)\n==19839==    by 0x143054: Run (gtest.cc:2789)\n==19839==    by 0x143054: testing::TestCase::Run() (gtest.cc:2774)\n==19839==    by 0x14357B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5051)\n==19839==    by 0x14D539: HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (gtest.cc:2421)\n==19839==    by 0x14D539: bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2457)\n==19839==    by 0x1436AB: testing::UnitTest::Run() (gtest.cc:4667)\n==19839==    by 0x1194A8: RUN_ALL_TESTS (gtest.h:2329)\n==19839==    by 0x1194A8: main (gtest_main.cc:37)\n==19839== \n==19839== LEAK SUMMARY:\n==19839==    definitely lost: 232 bytes in 1 blocks\n==19839==    indirectly lost: 0 bytes in 0 blocks\n==19839==      possibly lost: 0 bytes in 0 blocks\n==19839==    still reachable: 0 bytes in 0 blocks\n==19839==         suppressed: 0 bytes in 0 blocks\n==19839== \n==19839== For counts of detected and suppressed errors, rerun with: -v\n==19839== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The leaks are gone after these modifications.</p>", "type": "rendered"}, "title": {"raw": "Fix move assignment constructor leaks", "markup": "markdown", "html": "<p>Fix move assignment constructor leaks</p>", "type": "rendered"}}, "type": "pullrequest", "description": "When a move assignment was happening, the current contents of dataPtr were being leaked, as they were never free'd/deleted.\r\n\r\nThis was discovered when diagnosing [https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak](https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak). In that case, log playback was causing `EntityComponentManager::SetState` very frequently, which makes use of move assignments on different component types. Since some of our components are `sdf::*` objects, this was surfaced.\r\n\r\nThe leaking can be verified by running at of the `UNIT_*_TEST` tests in sdformat under `valgrind`\r\n\r\n```\r\n(blueprint)\u279c  sdformat8 valgrind --tool=memcheck --leak-check=full ./src/UNIT_Material_TEST \r\n==19839== Memcheck, a memory error detector\r\n==19839== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==19839== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==19839== Command: ./src/UNIT_Material_TEST\r\n==19839== \r\nRunning main() from gtest_main.cc\r\n[==========] Running 8 tests from 2 test cases.\r\n[----------] Global test environment set-up.\r\n[----------] 7 tests from DOMMaterial\r\n[ RUN      ] DOMMaterial.Construction\r\n[       OK ] DOMMaterial.Construction (10 ms)\r\n[ RUN      ] DOMMaterial.MoveConstructor\r\n[       OK ] DOMMaterial.MoveConstructor (6 ms)\r\n[ RUN      ] DOMMaterial.CopyConstructor\r\n[       OK ] DOMMaterial.CopyConstructor (5 ms)\r\n[ RUN      ] DOMMaterial.AssignmentOperator\r\n[       OK ] DOMMaterial.AssignmentOperator (4 ms)\r\n[ RUN      ] DOMMaterial.MoveAssignmentOperator\r\n[       OK ] DOMMaterial.MoveAssignmentOperator (5 ms)\r\n[ RUN      ] DOMMaterial.Set\r\n[       OK ] DOMMaterial.Set (16 ms)\r\n[ RUN      ] DOMMaterial.InvalidSdf\r\n[       OK ] DOMMaterial.InvalidSdf (6 ms)\r\n[----------] 7 tests from DOMMaterial (56 ms total)\r\n\r\n[----------] 1 test from DOMAtmosphere\r\n[ RUN      ] DOMAtmosphere.CopyAssignmentAfterMove\r\n[       OK ] DOMAtmosphere.CopyAssignmentAfterMove (2 ms)\r\n[----------] 1 test from DOMAtmosphere (3 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 8 tests from 2 test cases ran. (74 ms total)\r\n[  PASSED  ] 8 tests.\r\n==19839== \r\n==19839== HEAP SUMMARY:\r\n==19839==     in use at exit: 232 bytes in 1 blocks\r\n==19839==   total heap usage: 3,564 allocs, 3,563 frees, 3,916,665 bytes allocated\r\n==19839== \r\n==19839== 232 bytes in 1 blocks are definitely lost in loss record 1 of 1\r\n==19839==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==19839==    by 0x4EC5EDA: sdf::v8::Material::Material() (Material.cc:66)\r\n==19839==    by 0x11D0FA: DOMMaterial_MoveAssignmentOperator_Test::TestBody() (Material_TEST.cc:143)\r\n==19839==    by 0x14D029: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2421)\r\n==19839==    by 0x14D029: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x142E29: Run (gtest.cc:2495)\r\n==19839==    by 0x142E29: testing::Test::Run() (gtest.cc:2486)\r\n==19839==    by 0x142F77: Run (gtest.cc:2671)\r\n==19839==    by 0x142F77: testing::TestInfo::Run() (gtest.cc:2645)\r\n==19839==    by 0x143054: Run (gtest.cc:2789)\r\n==19839==    by 0x143054: testing::TestCase::Run() (gtest.cc:2774)\r\n==19839==    by 0x14357B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5051)\r\n==19839==    by 0x14D539: HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest.cc:2421)\r\n==19839==    by 0x14D539: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x1436AB: testing::UnitTest::Run() (gtest.cc:4667)\r\n==19839==    by 0x1194A8: RUN_ALL_TESTS (gtest.h:2329)\r\n==19839==    by 0x1194A8: main (gtest_main.cc:37)\r\n==19839== \r\n==19839== LEAK SUMMARY:\r\n==19839==    definitely lost: 232 bytes in 1 blocks\r\n==19839==    indirectly lost: 0 bytes in 0 blocks\r\n==19839==      possibly lost: 0 bytes in 0 blocks\r\n==19839==    still reachable: 0 bytes in 0 blocks\r\n==19839==         suppressed: 0 bytes in 0 blocks\r\n==19839== \r\n==19839== For counts of detected and suppressed errors, rerun with: -v\r\n==19839== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n\u200c\r\n\r\nThe leaks are gone after these modifications.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/641/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:96c3d6c300bc%0Ddc157404730f?from_pullrequest_id=641"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/641/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/641.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/641/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/641/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/641"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/641/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:96c3d6c300bc%0Ddc157404730f?from_pullrequest_id=641"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/641/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/641/statuses_page=1.json"}}, "title": "Fix move assignment constructor leaks", "close_source_branch": true, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}], "id": 641, "destination": {"commit": {"hash": "dc157404730f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/dc157404730f.json"}, "html": {"href": "#!/osrf/sdformat/commits/dc157404730f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "sdf8"}}, "created_on": "2020-01-10T04:09:07.132441+00:00", "summary": {"raw": "When a move assignment was happening, the current contents of dataPtr were being leaked, as they were never free'd/deleted.\r\n\r\nThis was discovered when diagnosing [https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak](https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak). In that case, log playback was causing `EntityComponentManager::SetState` very frequently, which makes use of move assignments on different component types. Since some of our components are `sdf::*` objects, this was surfaced.\r\n\r\nThe leaking can be verified by running at of the `UNIT_*_TEST` tests in sdformat under `valgrind`\r\n\r\n```\r\n(blueprint)\u279c  sdformat8 valgrind --tool=memcheck --leak-check=full ./src/UNIT_Material_TEST \r\n==19839== Memcheck, a memory error detector\r\n==19839== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==19839== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==19839== Command: ./src/UNIT_Material_TEST\r\n==19839== \r\nRunning main() from gtest_main.cc\r\n[==========] Running 8 tests from 2 test cases.\r\n[----------] Global test environment set-up.\r\n[----------] 7 tests from DOMMaterial\r\n[ RUN      ] DOMMaterial.Construction\r\n[       OK ] DOMMaterial.Construction (10 ms)\r\n[ RUN      ] DOMMaterial.MoveConstructor\r\n[       OK ] DOMMaterial.MoveConstructor (6 ms)\r\n[ RUN      ] DOMMaterial.CopyConstructor\r\n[       OK ] DOMMaterial.CopyConstructor (5 ms)\r\n[ RUN      ] DOMMaterial.AssignmentOperator\r\n[       OK ] DOMMaterial.AssignmentOperator (4 ms)\r\n[ RUN      ] DOMMaterial.MoveAssignmentOperator\r\n[       OK ] DOMMaterial.MoveAssignmentOperator (5 ms)\r\n[ RUN      ] DOMMaterial.Set\r\n[       OK ] DOMMaterial.Set (16 ms)\r\n[ RUN      ] DOMMaterial.InvalidSdf\r\n[       OK ] DOMMaterial.InvalidSdf (6 ms)\r\n[----------] 7 tests from DOMMaterial (56 ms total)\r\n\r\n[----------] 1 test from DOMAtmosphere\r\n[ RUN      ] DOMAtmosphere.CopyAssignmentAfterMove\r\n[       OK ] DOMAtmosphere.CopyAssignmentAfterMove (2 ms)\r\n[----------] 1 test from DOMAtmosphere (3 ms total)\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 8 tests from 2 test cases ran. (74 ms total)\r\n[  PASSED  ] 8 tests.\r\n==19839== \r\n==19839== HEAP SUMMARY:\r\n==19839==     in use at exit: 232 bytes in 1 blocks\r\n==19839==   total heap usage: 3,564 allocs, 3,563 frees, 3,916,665 bytes allocated\r\n==19839== \r\n==19839== 232 bytes in 1 blocks are definitely lost in loss record 1 of 1\r\n==19839==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==19839==    by 0x4EC5EDA: sdf::v8::Material::Material() (Material.cc:66)\r\n==19839==    by 0x11D0FA: DOMMaterial_MoveAssignmentOperator_Test::TestBody() (Material_TEST.cc:143)\r\n==19839==    by 0x14D029: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2421)\r\n==19839==    by 0x14D029: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x142E29: Run (gtest.cc:2495)\r\n==19839==    by 0x142E29: testing::Test::Run() (gtest.cc:2486)\r\n==19839==    by 0x142F77: Run (gtest.cc:2671)\r\n==19839==    by 0x142F77: testing::TestInfo::Run() (gtest.cc:2645)\r\n==19839==    by 0x143054: Run (gtest.cc:2789)\r\n==19839==    by 0x143054: testing::TestCase::Run() (gtest.cc:2774)\r\n==19839==    by 0x14357B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5051)\r\n==19839==    by 0x14D539: HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest.cc:2421)\r\n==19839==    by 0x14D539: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2457)\r\n==19839==    by 0x1436AB: testing::UnitTest::Run() (gtest.cc:4667)\r\n==19839==    by 0x1194A8: RUN_ALL_TESTS (gtest.h:2329)\r\n==19839==    by 0x1194A8: main (gtest_main.cc:37)\r\n==19839== \r\n==19839== LEAK SUMMARY:\r\n==19839==    definitely lost: 232 bytes in 1 blocks\r\n==19839==    indirectly lost: 0 bytes in 0 blocks\r\n==19839==      possibly lost: 0 bytes in 0 blocks\r\n==19839==    still reachable: 0 bytes in 0 blocks\r\n==19839==         suppressed: 0 bytes in 0 blocks\r\n==19839== \r\n==19839== For counts of detected and suppressed errors, rerun with: -v\r\n==19839== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n\u200c\r\n\r\nThe leaks are gone after these modifications.", "markup": "markdown", "html": "<p>When a move assignment was happening, the current contents of dataPtr were being leaked, as they were never free'd/deleted.</p>\n<p>This was discovered when diagnosing <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak\" rel=\"nofollow\">https://bitbucket.org/ignitionrobotics/ign-gazebo/issues/47/possible-log-playback-memory-leak</a>. In that case, log playback was causing <code>EntityComponentManager::SetState</code> very frequently, which makes use of move assignments on different component types. Since some of our components are <code>sdf::*</code> objects, this was surfaced.</p>\n<p>The leaking can be verified by running at of the <code>UNIT_*_TEST</code> tests in sdformat under <code>valgrind</code></p>\n<div class=\"codehilite\"><pre><span></span>(blueprint)\u279c  sdformat8 valgrind --tool=memcheck --leak-check=full ./src/UNIT_Material_TEST \n==19839== Memcheck, a memory error detector\n==19839== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==19839== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==19839== Command: ./src/UNIT_Material_TEST\n==19839== \nRunning main() from gtest_main.cc\n[==========] Running 8 tests from 2 test cases.\n[----------] Global test environment set-up.\n[----------] 7 tests from DOMMaterial\n[ RUN      ] DOMMaterial.Construction\n[       OK ] DOMMaterial.Construction (10 ms)\n[ RUN      ] DOMMaterial.MoveConstructor\n[       OK ] DOMMaterial.MoveConstructor (6 ms)\n[ RUN      ] DOMMaterial.CopyConstructor\n[       OK ] DOMMaterial.CopyConstructor (5 ms)\n[ RUN      ] DOMMaterial.AssignmentOperator\n[       OK ] DOMMaterial.AssignmentOperator (4 ms)\n[ RUN      ] DOMMaterial.MoveAssignmentOperator\n[       OK ] DOMMaterial.MoveAssignmentOperator (5 ms)\n[ RUN      ] DOMMaterial.Set\n[       OK ] DOMMaterial.Set (16 ms)\n[ RUN      ] DOMMaterial.InvalidSdf\n[       OK ] DOMMaterial.InvalidSdf (6 ms)\n[----------] 7 tests from DOMMaterial (56 ms total)\n\n[----------] 1 test from DOMAtmosphere\n[ RUN      ] DOMAtmosphere.CopyAssignmentAfterMove\n[       OK ] DOMAtmosphere.CopyAssignmentAfterMove (2 ms)\n[----------] 1 test from DOMAtmosphere (3 ms total)\n\n[----------] Global test environment tear-down\n[==========] 8 tests from 2 test cases ran. (74 ms total)\n[  PASSED  ] 8 tests.\n==19839== \n==19839== HEAP SUMMARY:\n==19839==     in use at exit: 232 bytes in 1 blocks\n==19839==   total heap usage: 3,564 allocs, 3,563 frees, 3,916,665 bytes allocated\n==19839== \n==19839== 232 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==19839==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==19839==    by 0x4EC5EDA: sdf::v8::Material::Material() (Material.cc:66)\n==19839==    by 0x11D0FA: DOMMaterial_MoveAssignmentOperator_Test::TestBody() (Material_TEST.cc:143)\n==19839==    by 0x14D029: HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (gtest.cc:2421)\n==19839==    by 0x14D029: void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2457)\n==19839==    by 0x142E29: Run (gtest.cc:2495)\n==19839==    by 0x142E29: testing::Test::Run() (gtest.cc:2486)\n==19839==    by 0x142F77: Run (gtest.cc:2671)\n==19839==    by 0x142F77: testing::TestInfo::Run() (gtest.cc:2645)\n==19839==    by 0x143054: Run (gtest.cc:2789)\n==19839==    by 0x143054: testing::TestCase::Run() (gtest.cc:2774)\n==19839==    by 0x14357B: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5051)\n==19839==    by 0x14D539: HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (gtest.cc:2421)\n==19839==    by 0x14D539: bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2457)\n==19839==    by 0x1436AB: testing::UnitTest::Run() (gtest.cc:4667)\n==19839==    by 0x1194A8: RUN_ALL_TESTS (gtest.h:2329)\n==19839==    by 0x1194A8: main (gtest_main.cc:37)\n==19839== \n==19839== LEAK SUMMARY:\n==19839==    definitely lost: 232 bytes in 1 blocks\n==19839==    indirectly lost: 0 bytes in 0 blocks\n==19839==      possibly lost: 0 bytes in 0 blocks\n==19839==    still reachable: 0 bytes in 0 blocks\n==19839==         suppressed: 0 bytes in 0 blocks\n==19839== \n==19839== For counts of detected and suppressed errors, rerun with: -v\n==19839== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The leaks are gone after these modifications.</p>", "type": "rendered"}, "source": {"commit": {"hash": "1f65f50bb6f8", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/1f65f50bb6f8.json"}, "html": {"href": "#!/osrf/sdformat/commits/1f65f50bb6f8"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "move_assignment_leaks"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-01-10T18:52:15.711195+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-10T18:48:40.230385+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2020-01-10T19:36:30.409196+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-10T19:31:24.483304+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "REVIEWER", "participated_on": "2020-01-10T18:39:40.723276+00:00", "type": "participant", "approved": true, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-01-10T19:42:43.724267+00:00", "author": {"display_name": "Michael Carroll", "uuid": "{17dbbc15-cbc0-42f0-a985-cde9061c78a0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D"}, "html": {"href": "https://bitbucket.org/%7B17dbbc15-cbc0-42f0-a985-cde9061c78a0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:65740f22-cc56-4418-9608-7e17d0ed47b7/2aa259f5-4de1-4f68-9156-eded72041d84/128"}}, "nickname": "Michael Carroll", "type": "user", "account_id": "557058:65740f22-cc56-4418-9608-7e17d0ed47b7"}, "merge_commit": {"hash": "96c3d6c300bc", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/96c3d6c300bc.json"}, "html": {"href": "#!/osrf/sdformat/commits/96c3d6c300bc"}}}, "closed_by": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}