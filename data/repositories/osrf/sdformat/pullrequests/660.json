{"rendered": {"description": {"raw": "Added the surface DOM with a contact object to store surface properties.\r\n\r\nFor now it only implements a single property \\(collide\\_bitmask\\), since it is already a quite large piece of code I thought I\u2019d check if it is correct from a style / idea point of view before adding the rest of the parameters \\(friction related\\).\r\n\r\nApart from the unit tests, a high level test can be done using the new collide\\_bitmask feature in the ign-physics branch, specifically in ign-physics:\r\n\r\n```\r\nhg checkout add_surface_dom\r\n<rebuild>\r\nign gazebo -v 4 shapes_bitmask.sdf\r\n```\r\n\r\nResult on my machine \\(on ogre1\\):\r\n\r\n![](data/bitbucket.org/repo/ak8x4z/images/902803472-image.png)\r\nAny feedback on style, API design, etc. more than welcome as always.\r\n\r\nThe main part I find tricky to understand is how to modify properties in subelements of a root node \\(and if it should be allowed\\).  \r\nFor example, since a function such as \r\n\r\n`const *Contact Cont() const`\r\n\r\nDoesn\u2019t allow modifying all the underlying properties, which means that it\u2019s illegal to do:\r\n\r\n```\r\nsdf::Surface surface;\r\nsurface.Cont()->SetCollideBitmask(0x12);\r\n```\r\n\r\nBut the only way to do such change is to replace the whole Contact subelement:\r\n\r\n```\r\nsdf::Contact contact;\r\ncontact.SetCollideBitmask(0x12);\r\nsurface.SetCont(contact);\r\n```\r\n\r\nIs this behavior intended?", "markup": "markdown", "html": "<p>Added the surface DOM with a contact object to store surface properties.</p>\n<p>For now it only implements a single property (collide_bitmask), since it is already a quite large piece of code I thought I\u2019d check if it is correct from a style / idea point of view before adding the rest of the parameters (friction related).</p>\n<p>Apart from the unit tests, a high level test can be done using the new collide_bitmask feature in the ign-physics branch, specifically in ign-physics:</p>\n<div class=\"codehilite\"><pre><span></span>hg checkout add_surface_dom\n&lt;rebuild&gt;\nign gazebo -v 4 shapes_bitmask.sdf\n</pre></div>\n\n\n<p>Result on my machine (on ogre1):</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/ak8x4z/images/902803472-image.png\" />\nAny feedback on style, API design, etc. more than welcome as always.</p>\n<p>The main part I find tricky to understand is how to modify properties in subelements of a root node (and if it should be allowed).<br />\nFor example, since a function such as </p>\n<p><code>const *Contact Cont() const</code></p>\n<p>Doesn\u2019t allow modifying all the underlying properties, which means that it\u2019s illegal to do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">Surface</span> <span class=\"nt\">surface</span><span class=\"o\">;</span>\n<span class=\"nt\">surface</span><span class=\"p\">.</span><span class=\"nc\">Cont</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetCollideBitmask</span><span class=\"o\">(</span><span class=\"nt\">0x12</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>But the only way to do such change is to replace the whole Contact subelement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">Contact</span> <span class=\"nt\">contact</span><span class=\"o\">;</span>\n<span class=\"nt\">contact</span><span class=\"p\">.</span><span class=\"nc\">SetCollideBitmask</span><span class=\"o\">(</span><span class=\"nt\">0x12</span><span class=\"o\">);</span>\n<span class=\"nt\">surface</span><span class=\"p\">.</span><span class=\"nc\">SetCont</span><span class=\"o\">(</span><span class=\"nt\">contact</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>Is this behavior intended?</p>", "type": "rendered"}, "title": {"raw": "[WIP] Adding surface DOM", "markup": "markdown", "html": "<p>[WIP] Adding surface DOM</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Added the surface DOM with a contact object to store surface properties.\r\n\r\nFor now it only implements a single property \\(collide\\_bitmask\\), since it is already a quite large piece of code I thought I\u2019d check if it is correct from a style / idea point of view before adding the rest of the parameters \\(friction related\\).\r\n\r\nApart from the unit tests, a high level test can be done using the new collide\\_bitmask feature in the ign-physics branch, specifically in ign-physics:\r\n\r\n```\r\nhg checkout add_surface_dom\r\n<rebuild>\r\nign gazebo -v 4 shapes_bitmask.sdf\r\n```\r\n\r\nResult on my machine \\(on ogre1\\):\r\n\r\n![](data/bitbucket.org/repo/ak8x4z/images/902803472-image.png)\r\nAny feedback on style, API design, etc. more than welcome as always.\r\n\r\nThe main part I find tricky to understand is how to modify properties in subelements of a root node \\(and if it should be allowed\\).  \r\nFor example, since a function such as \r\n\r\n`const *Contact Cont() const`\r\n\r\nDoesn\u2019t allow modifying all the underlying properties, which means that it\u2019s illegal to do:\r\n\r\n```\r\nsdf::Surface surface;\r\nsurface.Cont()->SetCollideBitmask(0x12);\r\n```\r\n\r\nBut the only way to do such change is to replace the whole Contact subelement:\r\n\r\n```\r\nsdf::Contact contact;\r\ncontact.SetCollideBitmask(0x12);\r\nsurface.SetCont(contact);\r\n```\r\n\r\nIs this behavior intended?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/660/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:0abb61e6b262%0Dc058c35d6532?from_pullrequest_id=660"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/660/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/660.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/660/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/660/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/660"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/660/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:0abb61e6b262%0Dc058c35d6532?from_pullrequest_id=660"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/660/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/660/statuses_page=1.json"}}, "title": "[WIP] Adding surface DOM", "close_source_branch": true, "reviewers": [], "id": 660, "destination": {"commit": {"hash": "c058c35d6532", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/c058c35d6532.json"}, "html": {"href": "#!/osrf/sdformat/commits/c058c35d6532"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "sdf9"}}, "created_on": "2020-02-07T08:29:37.641706+00:00", "summary": {"raw": "Added the surface DOM with a contact object to store surface properties.\r\n\r\nFor now it only implements a single property \\(collide\\_bitmask\\), since it is already a quite large piece of code I thought I\u2019d check if it is correct from a style / idea point of view before adding the rest of the parameters \\(friction related\\).\r\n\r\nApart from the unit tests, a high level test can be done using the new collide\\_bitmask feature in the ign-physics branch, specifically in ign-physics:\r\n\r\n```\r\nhg checkout add_surface_dom\r\n<rebuild>\r\nign gazebo -v 4 shapes_bitmask.sdf\r\n```\r\n\r\nResult on my machine \\(on ogre1\\):\r\n\r\n![](data/bitbucket.org/repo/ak8x4z/images/902803472-image.png)\r\nAny feedback on style, API design, etc. more than welcome as always.\r\n\r\nThe main part I find tricky to understand is how to modify properties in subelements of a root node \\(and if it should be allowed\\).  \r\nFor example, since a function such as \r\n\r\n`const *Contact Cont() const`\r\n\r\nDoesn\u2019t allow modifying all the underlying properties, which means that it\u2019s illegal to do:\r\n\r\n```\r\nsdf::Surface surface;\r\nsurface.Cont()->SetCollideBitmask(0x12);\r\n```\r\n\r\nBut the only way to do such change is to replace the whole Contact subelement:\r\n\r\n```\r\nsdf::Contact contact;\r\ncontact.SetCollideBitmask(0x12);\r\nsurface.SetCont(contact);\r\n```\r\n\r\nIs this behavior intended?", "markup": "markdown", "html": "<p>Added the surface DOM with a contact object to store surface properties.</p>\n<p>For now it only implements a single property (collide_bitmask), since it is already a quite large piece of code I thought I\u2019d check if it is correct from a style / idea point of view before adding the rest of the parameters (friction related).</p>\n<p>Apart from the unit tests, a high level test can be done using the new collide_bitmask feature in the ign-physics branch, specifically in ign-physics:</p>\n<div class=\"codehilite\"><pre><span></span>hg checkout add_surface_dom\n&lt;rebuild&gt;\nign gazebo -v 4 shapes_bitmask.sdf\n</pre></div>\n\n\n<p>Result on my machine (on ogre1):</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/ak8x4z/images/902803472-image.png\" />\nAny feedback on style, API design, etc. more than welcome as always.</p>\n<p>The main part I find tricky to understand is how to modify properties in subelements of a root node (and if it should be allowed).<br />\nFor example, since a function such as </p>\n<p><code>const *Contact Cont() const</code></p>\n<p>Doesn\u2019t allow modifying all the underlying properties, which means that it\u2019s illegal to do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">Surface</span> <span class=\"nt\">surface</span><span class=\"o\">;</span>\n<span class=\"nt\">surface</span><span class=\"p\">.</span><span class=\"nc\">Cont</span><span class=\"o\">()</span><span class=\"nt\">-</span><span class=\"o\">&gt;</span><span class=\"nt\">SetCollideBitmask</span><span class=\"o\">(</span><span class=\"nt\">0x12</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>But the only way to do such change is to replace the whole Contact subelement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">sdf</span><span class=\"p\">::</span><span class=\"nd\">Contact</span> <span class=\"nt\">contact</span><span class=\"o\">;</span>\n<span class=\"nt\">contact</span><span class=\"p\">.</span><span class=\"nc\">SetCollideBitmask</span><span class=\"o\">(</span><span class=\"nt\">0x12</span><span class=\"o\">);</span>\n<span class=\"nt\">surface</span><span class=\"p\">.</span><span class=\"nc\">SetCont</span><span class=\"o\">(</span><span class=\"nt\">contact</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>Is this behavior intended?</p>", "type": "rendered"}, "source": {"commit": {"hash": "0abb61e6b262", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/0abb61e6b262.json"}, "html": {"href": "#!/osrf/sdformat/commits/0abb61e6b262"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "add_surface_dom"}}, "comment_count": 4, "state": "OPEN", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2020-02-11T02:49:31.488010+00:00", "type": "participant", "approved": false, "user": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}}, {"role": "PARTICIPANT", "participated_on": "2020-02-11T04:40:28.591085+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "", "updated_on": "2020-02-20T05:51:51.607736+00:00", "author": {"display_name": "Luca Della Vedova", "uuid": "{dff01cd5-37c0-4865-84bc-7e6bc480a09c}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D"}, "html": {"href": "https://bitbucket.org/%7Bdff01cd5-37c0-4865-84bc-7e6bc480a09c%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b24bfc2f4a3853203ffffb2a97b47dbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLV-3.png"}}, "nickname": "luca_della_vedova", "type": "user", "account_id": "557058:798a6cdf-d171-444d-b8af-5d088f9feb2d"}, "merge_commit": null, "closed_by": null}