{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/640/comments/132148164.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/640/_/diff#comment-132148164"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 640, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/640.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/640"}}, "title": "Access the original parsed version of an SDF document with `Element::OriginalVersion`"}, "content": {"raw": "I found a use case where the result is somewhat unexpected. This following test fails because the version string in `sdf::SDF` or `sdf::Element` is not overwritten once it has been set, so it can't be reused to read in a different file. I have seen code in Gazebo and libsdformat where `sdf::SDF` is reused because instantiating a new one can is expensive. \n\n```\ndiff --git a/src/parser_TEST.cc b/src/parser_TEST.cc\n--- a/src/parser_TEST.cc\n+++ b/src/parser_TEST.cc\n@@ -99,2 +99,25 @@ TEST(Parser, readFileConversions)\n /////////////////////////////////////////////////\n+TEST(Parser, ReusedSDFVersion)\n+{\n+  std::string pathBase = PROJECT_SOURCE_PATH;\n+  pathBase += \"/test/sdf\";\n+  const std::string path17 = pathBase +\"/model_link_relative_to.sdf\";\n+  const std::string path16 = pathBase +\"/joint_complete.sdf\";\n+\n+  // Call readFile API that always converts\n+  sdf::SDFPtr sdf = InitSDF();\n+  EXPECT_TRUE(sdf::readFile(path17, sdf));\n+  EXPECT_EQ(\"1.7\", sdf->Root()->Get<std::string>(\"version\"));\n+  EXPECT_EQ(\"1.7\", sdf->OriginalVersion());\n+  EXPECT_EQ(\"1.7\", sdf->Root()->OriginalVersion());\n+\n+  sdf->Root()->ClearElements();\n+\n+  EXPECT_TRUE(sdf::readFile(path16, sdf));\n+  EXPECT_EQ(\"1.7\", sdf->Root()->Get<std::string>(\"version\"));\n+  EXPECT_EQ(\"1.6\", sdf->OriginalVersion());\n+  EXPECT_EQ(\"1.6\", sdf->Root()->OriginalVersion());\n+}\n+\n+/////////////////////////////////////////////////\n TEST(Parser, NameUniqueness)\n \n``` ", "markup": "markdown", "html": "<p>I found a use case where the result is somewhat unexpected. This following test fails because the version string in <code>sdf::SDF</code> or <code>sdf::Element</code> is not overwritten once it has been set, so it can't be reused to read in a different file. I have seen code in Gazebo and libsdformat where <code>sdf::SDF</code> is reused because instantiating a new one can is expensive. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/parser_TEST.cc b/src/parser_TEST.cc</span>\n<span class=\"gd\">--- a/src/parser_TEST.cc</span>\n<span class=\"gi\">+++ b/src/parser_TEST.cc</span>\n<span class=\"gu\">@@ -99,2 +99,25 @@ TEST(Parser, readFileConversions)</span>\n /////////////////////////////////////////////////\n<span class=\"gi\">+TEST(Parser, ReusedSDFVersion)</span>\n<span class=\"gi\">+{</span>\n<span class=\"gi\">+  std::string pathBase = PROJECT_SOURCE_PATH;</span>\n<span class=\"gi\">+  pathBase += &quot;/test/sdf&quot;;</span>\n<span class=\"gi\">+  const std::string path17 = pathBase +&quot;/model_link_relative_to.sdf&quot;;</span>\n<span class=\"gi\">+  const std::string path16 = pathBase +&quot;/joint_complete.sdf&quot;;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  // Call readFile API that always converts</span>\n<span class=\"gi\">+  sdf::SDFPtr sdf = InitSDF();</span>\n<span class=\"gi\">+  EXPECT_TRUE(sdf::readFile(path17, sdf));</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.7&quot;, sdf-&gt;Root()-&gt;Get&lt;std::string&gt;(&quot;version&quot;));</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.7&quot;, sdf-&gt;OriginalVersion());</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.7&quot;, sdf-&gt;Root()-&gt;OriginalVersion());</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  sdf-&gt;Root()-&gt;ClearElements();</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+  EXPECT_TRUE(sdf::readFile(path16, sdf));</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.7&quot;, sdf-&gt;Root()-&gt;Get&lt;std::string&gt;(&quot;version&quot;));</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.6&quot;, sdf-&gt;OriginalVersion());</span>\n<span class=\"gi\">+  EXPECT_EQ(&quot;1.6&quot;, sdf-&gt;Root()-&gt;OriginalVersion());</span>\n<span class=\"gi\">+}</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+/////////////////////////////////////////////////</span>\n TEST(Parser, NameUniqueness)\n</pre></div>", "type": "rendered"}, "created_on": "2020-01-17T16:32:27.394074+00:00", "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "updated_on": "2020-01-17T16:32:27.401169+00:00", "type": "pullrequest_comment", "id": 132148164}