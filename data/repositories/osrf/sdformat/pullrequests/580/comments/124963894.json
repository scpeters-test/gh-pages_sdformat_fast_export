{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/580/comments/124963894.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:32b9e0366c71..1dcb3d1ed413?path=src%2FConverter_TEST.cc"}, "html": {"href": "#!/osrf/sdformat/pull-requests/580/_/diff#comment-124963894"}}, "parent": {"id": 124924537, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/580/comments/124924537.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/580/_/diff#comment-124924537"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 580, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/580.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/580"}}, "title": "Converter: add `<map>` element for converting fixed values"}, "content": {"raw": "that is still correct and refers to the xml in the `.convert` file. I was trying to refer to the xml that is to be converted, and that only the first of repeated elements would be mapped\n\nfor example some convert xml:\n\n~~~\n<map>\n  <from name='elemD'>\n    <value>d</value>\n    <value>D</value>\n  </from>\n  <to name='elemF'>\n    <value>f</value>\n    <value>F</value>\n  </to>\n</map>\n~~~\n\nthat operates on the following xml:\n\n~~~\n<elemC attrC='C'>\n  <elemD>D</elemD>\n  <elemD>D</elemD>\n  <elemD>d</elemD>\n  <elemD>d</elemD>\n</elemC>\n~~~\n\ncurrently it only maps the first element, so the output would be the following (all the original `elemD` elements plus one new `elemF` element):\n\n~~~\n<elemC attrC='C'>\n  <elemD>D</elemD>\n  <elemD>D</elemD>\n  <elemD>d</elemD>\n  <elemD>d</elemD>\n  <elemF>F</elemF>\n</elemC>\n~~~", "markup": "markdown", "html": "<p>that is still correct and refers to the xml in the <code>.convert</code> file. I was trying to refer to the xml that is to be converted, and that only the first of repeated elements would be mapped</p>\n<p>for example some convert xml:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;map&gt;</span>\n  <span class=\"nt\">&lt;from</span> <span class=\"na\">name=</span><span class=\"s\">&#39;elemD&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>d<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>D<span class=\"nt\">&lt;/value&gt;</span>\n  <span class=\"nt\">&lt;/from&gt;</span>\n  <span class=\"nt\">&lt;to</span> <span class=\"na\">name=</span><span class=\"s\">&#39;elemF&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>f<span class=\"nt\">&lt;/value&gt;</span>\n    <span class=\"nt\">&lt;value&gt;</span>F<span class=\"nt\">&lt;/value&gt;</span>\n  <span class=\"nt\">&lt;/to&gt;</span>\n<span class=\"nt\">&lt;/map&gt;</span>\n</pre></div>\n\n\n<p>that operates on the following xml:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;elemC</span> <span class=\"na\">attrC=</span><span class=\"s\">&#39;C&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n<span class=\"nt\">&lt;/elemC&gt;</span>\n</pre></div>\n\n\n<p>currently it only maps the first element, so the output would be the following (all the original <code>elemD</code> elements plus one new <code>elemF</code> element):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">&lt;elemC</span> <span class=\"na\">attrC=</span><span class=\"s\">&#39;C&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>D<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemD&gt;</span>d<span class=\"nt\">&lt;/elemD&gt;</span>\n  <span class=\"nt\">&lt;elemF&gt;</span>F<span class=\"nt\">&lt;/elemF&gt;</span>\n<span class=\"nt\">&lt;/elemC&gt;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2019-11-15T09:36:29.324040+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": 1089, "from": null, "outdated": true, "path": "src/Converter_TEST.cc"}, "updated_on": "2019-11-15T09:36:29.335148+00:00", "type": "pullrequest_comment", "id": 124963894}