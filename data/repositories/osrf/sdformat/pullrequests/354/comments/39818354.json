{"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/354/comments/39818354.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/354/_/diff#comment-39818354"}}, "parent": {"id": 39770106, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/354/comments/39770106.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/354/_/diff#comment-39770106"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 354, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/354.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/354"}}, "title": "Converter fix"}, "content": {"raw": "There is no way you should have remembered; I never stated it, which I should have.\n\nThe basic problem shows up if you want to convert from (say) SDF 1.2 to SDF 1.6.  In that case, what we really want to do is to migrate from 1.2 -> 1.3, 1.3 -> 1.4, 1.4 -> 1.5, and 1.5 -> 1.6, in that order.  However, there is no guarantee that the directory iterator returns the directory names in lexicographical order, so when using a list to store the directories, they just get put into the list in whatever order the directory iterator happens to return them.  Using a set, on the other hand inserts them in ascending order, which is exactly what we want (I believe set is implemented as a red-black tree).  So that's the bug.\n\nThe reason you don't see the problem in testing is because of another, complex bug in our testing environment that this patch does not address (but which is on my radar, and we should eventually address).  Our testing environment sets up the SDF_PATH environment variable something like: SDF_PATH=sdf/1.2:sdf/1.3:sdf/1.4:sdf/1.5:sdf/1.6 .  When Converter::Convert() goes to look up a conversion file, it looks for a filename that looks like <frommajor>_<fromminor>.version.  Thus, when trying to convert *from* 1.2 to 1.6, it looks up 1_2.version.  Given the above SDF_PATH, it dutifully finds that file, but only the version that goes from 1.2 -> 1.3.  Because of the rest of the logic in Convert(), it thinks this is good enough, and just does that conversion.  The rest are skipped.  The reason this is a complex problem to fix is that *other* tests actually depend on SDF_PATH being what it is, and further, the whole way that sdf::findFile() goes about finding things seems odd.  There are several ways to tell sdf::findFile() that you want to use custom sdf files, but since sdf::findFile() is used to find individual files and directories full of files, it doesn't seem like there is a good, intuitive way to indicate the root of a tree to it.\n\nWhew, this is getting long, so just a couple more things.\n\n1.  I think we should merge this patch to fix the bug that is there.  You are right that the tests don't quite prevent it's recurrence in the future, but at the very least I know for sure what is there is wrong.\n1.  We can augment the tests in Converter_TEST.cc to actually check that the converted file they get back has the version they expect.  This will currently fail, though.\n1.  We should figure out how to make these tests pass correctly, which I believe means clarifying what sdf::findFile() is really supposed to be used for, and how it is implemented.\n\nThoughts?", "markup": "markdown", "html": "<p>There is no way you should have remembered; I never stated it, which I should have.</p>\n<p>The basic problem shows up if you want to convert from (say) SDF 1.2 to SDF 1.6.  In that case, what we really want to do is to migrate from 1.2 -&gt; 1.3, 1.3 -&gt; 1.4, 1.4 -&gt; 1.5, and 1.5 -&gt; 1.6, in that order.  However, there is no guarantee that the directory iterator returns the directory names in lexicographical order, so when using a list to store the directories, they just get put into the list in whatever order the directory iterator happens to return them.  Using a set, on the other hand inserts them in ascending order, which is exactly what we want (I believe set is implemented as a red-black tree).  So that's the bug.</p>\n<p>The reason you don't see the problem in testing is because of another, complex bug in our testing environment that this patch does not address (but which is on my radar, and we should eventually address).  Our testing environment sets up the SDF_PATH environment variable something like: SDF_PATH=sdf/1.2:sdf/1.3:sdf/1.4:sdf/1.5:sdf/1.6 .  When Converter::Convert() goes to look up a conversion file, it looks for a filename that looks like &lt;frommajor&gt;_&lt;fromminor&gt;.version.  Thus, when trying to convert <em>from</em> 1.2 to 1.6, it looks up 1_2.version.  Given the above SDF_PATH, it dutifully finds that file, but only the version that goes from 1.2 -&gt; 1.3.  Because of the rest of the logic in Convert(), it thinks this is good enough, and just does that conversion.  The rest are skipped.  The reason this is a complex problem to fix is that <em>other</em> tests actually depend on SDF_PATH being what it is, and further, the whole way that sdf::findFile() goes about finding things seems odd.  There are several ways to tell sdf::findFile() that you want to use custom sdf files, but since sdf::findFile() is used to find individual files and directories full of files, it doesn't seem like there is a good, intuitive way to indicate the root of a tree to it.</p>\n<p>Whew, this is getting long, so just a couple more things.</p>\n<ol>\n<li>I think we should merge this patch to fix the bug that is there.  You are right that the tests don't quite prevent it's recurrence in the future, but at the very least I know for sure what is there is wrong.</li>\n<li>We can augment the tests in Converter_TEST.cc to actually check that the converted file they get back has the version they expect.  This will currently fail, though.</li>\n<li>We should figure out how to make these tests pass correctly, which I believe means clarifying what sdf::findFile() is really supposed to be used for, and how it is implemented.</li>\n</ol>\n<p>Thoughts?</p>", "type": "rendered"}, "created_on": "2017-06-29T13:12:20.507073+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-06-29T13:12:20.509882+00:00", "type": "pullrequest_comment", "id": 39818354}