{"rendered": {"reason": {"raw": "Splitting up the pull request into smaller ones.", "markup": "markdown", "html": "<p>Splitting up the pull request into smaller ones.</p>", "type": "rendered"}, "description": {"raw": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "markup": "markdown", "html": "<p>This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.</p>\n<p>I've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.</p>\n<p>Once this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).</p>\n<ul>\n<li>\n<p>Fix trailing whitespace all over the tree.</p>\n<p>No functional change.</p>\n</li>\n<li>\n<p>Add brackets to all control statements.</p>\n<p>This makes the code consistent across the entire\ncodebase.  No functional change.</p>\n</li>\n<li>\n<p>Fix up style and indentation.</p>\n<p>No functional change, just making the code consistent.</p>\n</li>\n<li>\n<p>Rewrite parser_urdf_TEST.cc</p>\n<p>This just makes it look more like the other tests, and gets\nrid of some unnecessary infrastructure.</p>\n</li>\n<li>\n<p>Fix parsing of URDF with an empty origin.</p>\n<p>Previously, attempting to parse a URDF file with an empty\norigin attribute of xyz or rpy would lead to a crash (attempting\nto initialize a std::string with a NULL).  The new code detects\nthis situation and just adds an origin of 0,0,0,0,0,0 for an\nempty origin.  Tests for this are also added.</p>\n</li>\n<li>\n<p>Switch away from using boost::lexical_cast for parser_urdf.</p>\n<p>Instead we use the std::sto{d,i} where appropriate.</p>\n</li>\n<li>\n<p>Add in a test for an invalid origin value.</p>\n<p>That is, it is basically one that we can't successfully run std::stod\non.</p>\n</li>\n<li>\n<p>Write a couple of tests for the stod conversions in parser_urdf.cc</p>\n<p>In the first test, we iterate over a map that contains a list\nof elements that we want to test for.  For each element, we\nparse the XML and then check to make sure that all of the\nelements that we expect to be there are actually there.  We\nalso check that the final number represented is what we expect.\nThe second test just checks that an invalid number throws a\nstd::invalid_argument like we expect.</p>\n</li>\n<li>\n<p>Get rid of BOOST_ASSERT.</p>\n<p>Instead, make SDF_ASSERT throw an exception.  This is different\nbehavior than what BOOST_ASSERT does by default, but it makes\nmore sense for a library to throw an exception rather than\nabort the whole program.</p>\n</li>\n<li>\n<p>Update the copyright headers on a bunch of files.</p>\n</li>\n<li>\n<p>Remove include of unused boost version.hpp header.</p>\n</li>\n<li>\n<p>Replace a couple of uses of boost::replace_all with std::replace.</p>\n<p>This works fine since we are just replacing a single character.</p>\n</li>\n<li>\n<p>Replace boost::ilexicographical_compare with a std:: version.</p>\n<p>We use std::lexicographical_compare with a custom compare function\nto ensure that we do the compare case-insensitively.</p>\n</li>\n<li>\n<p>Use the split function instead of boost::split.</p>\n<p>This gets rid of the last boost user in Converter.cc, so remove\nthe include as well.</p>\n</li>\n<li>\n<p>Remove a use of boost::trim and open-code it ourselves.</p>\n</li>\n<li>\n<p>Replace uses of boost::replace_all with our own home-grown version.</p>\n</li>\n<li>\n<p>Make the split function visible to the entire program.</p>\n<p>We are going to be using it in several other places.</p>\n</li>\n<li>\n<p>Use sdf::split to replace boost::split.</p>\n</li>\n<li>\n<p>Remove winGetEnv.</p>\n<p>The same thing can be accomplished just by calling std::getenv,\nwhich Windows implements.</p>\n</li>\n<li>\n<p>Deal with Windows in a slightly nicer way.</p>\n<p>We can get rid of the #ifdef and the resulting weirdness in\nthe function signature just by adding (void)_color inside\nthe function body.</p>\n</li>\n<li>\n<p>Add in tests for the joint parameters.</p>\n</li>\n<li>\n<p>Remove initialJointPosition, stopKp, and stopKd.</p>\n<p>They were never used for anything, so having the code for\nthem seems kind of pointless.</p>\n</li>\n<li>\n<p>Remove a lexical_cast to string.</p>\n</li>\n<li>\n<p>Remove unused functions.</p>\n<p>This gets rid of dead code, and also removes a couple of uses\nof boost from the library.</p>\n</li>\n<li>\n<p>Replace a use of boost::replace_first with std:: equivalents.</p>\n</li>\n<li>\n<p>Use the trim function in Param.cc</p>\n<p>This removes one more boost call.</p>\n</li>\n<li>\n<p>Add in a new test file for the main parser.cc</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Remove boost2", "markup": "markdown", "html": "<p>Remove boost2</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/310/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:95363e2544ab%0D5ee36f97cb76?from_pullrequest_id=310"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/310/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/310/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/310/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:95363e2544ab%0D5ee36f97cb76?from_pullrequest_id=310"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/310/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/310/statuses_page=1.json"}}, "title": "Remove boost2", "close_source_branch": false, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}], "id": 310, "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "created_on": "2017-02-15T20:42:47.192742+00:00", "summary": {"raw": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "markup": "markdown", "html": "<p>This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.</p>\n<p>I've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.</p>\n<p>Once this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).</p>\n<ul>\n<li>\n<p>Fix trailing whitespace all over the tree.</p>\n<p>No functional change.</p>\n</li>\n<li>\n<p>Add brackets to all control statements.</p>\n<p>This makes the code consistent across the entire\ncodebase.  No functional change.</p>\n</li>\n<li>\n<p>Fix up style and indentation.</p>\n<p>No functional change, just making the code consistent.</p>\n</li>\n<li>\n<p>Rewrite parser_urdf_TEST.cc</p>\n<p>This just makes it look more like the other tests, and gets\nrid of some unnecessary infrastructure.</p>\n</li>\n<li>\n<p>Fix parsing of URDF with an empty origin.</p>\n<p>Previously, attempting to parse a URDF file with an empty\norigin attribute of xyz or rpy would lead to a crash (attempting\nto initialize a std::string with a NULL).  The new code detects\nthis situation and just adds an origin of 0,0,0,0,0,0 for an\nempty origin.  Tests for this are also added.</p>\n</li>\n<li>\n<p>Switch away from using boost::lexical_cast for parser_urdf.</p>\n<p>Instead we use the std::sto{d,i} where appropriate.</p>\n</li>\n<li>\n<p>Add in a test for an invalid origin value.</p>\n<p>That is, it is basically one that we can't successfully run std::stod\non.</p>\n</li>\n<li>\n<p>Write a couple of tests for the stod conversions in parser_urdf.cc</p>\n<p>In the first test, we iterate over a map that contains a list\nof elements that we want to test for.  For each element, we\nparse the XML and then check to make sure that all of the\nelements that we expect to be there are actually there.  We\nalso check that the final number represented is what we expect.\nThe second test just checks that an invalid number throws a\nstd::invalid_argument like we expect.</p>\n</li>\n<li>\n<p>Get rid of BOOST_ASSERT.</p>\n<p>Instead, make SDF_ASSERT throw an exception.  This is different\nbehavior than what BOOST_ASSERT does by default, but it makes\nmore sense for a library to throw an exception rather than\nabort the whole program.</p>\n</li>\n<li>\n<p>Update the copyright headers on a bunch of files.</p>\n</li>\n<li>\n<p>Remove include of unused boost version.hpp header.</p>\n</li>\n<li>\n<p>Replace a couple of uses of boost::replace_all with std::replace.</p>\n<p>This works fine since we are just replacing a single character.</p>\n</li>\n<li>\n<p>Replace boost::ilexicographical_compare with a std:: version.</p>\n<p>We use std::lexicographical_compare with a custom compare function\nto ensure that we do the compare case-insensitively.</p>\n</li>\n<li>\n<p>Use the split function instead of boost::split.</p>\n<p>This gets rid of the last boost user in Converter.cc, so remove\nthe include as well.</p>\n</li>\n<li>\n<p>Remove a use of boost::trim and open-code it ourselves.</p>\n</li>\n<li>\n<p>Replace uses of boost::replace_all with our own home-grown version.</p>\n</li>\n<li>\n<p>Make the split function visible to the entire program.</p>\n<p>We are going to be using it in several other places.</p>\n</li>\n<li>\n<p>Use sdf::split to replace boost::split.</p>\n</li>\n<li>\n<p>Remove winGetEnv.</p>\n<p>The same thing can be accomplished just by calling std::getenv,\nwhich Windows implements.</p>\n</li>\n<li>\n<p>Deal with Windows in a slightly nicer way.</p>\n<p>We can get rid of the #ifdef and the resulting weirdness in\nthe function signature just by adding (void)_color inside\nthe function body.</p>\n</li>\n<li>\n<p>Add in tests for the joint parameters.</p>\n</li>\n<li>\n<p>Remove initialJointPosition, stopKp, and stopKd.</p>\n<p>They were never used for anything, so having the code for\nthem seems kind of pointless.</p>\n</li>\n<li>\n<p>Remove a lexical_cast to string.</p>\n</li>\n<li>\n<p>Remove unused functions.</p>\n<p>This gets rid of dead code, and also removes a couple of uses\nof boost from the library.</p>\n</li>\n<li>\n<p>Replace a use of boost::replace_first with std:: equivalents.</p>\n</li>\n<li>\n<p>Use the trim function in Param.cc</p>\n<p>This removes one more boost call.</p>\n</li>\n<li>\n<p>Add in a new test file for the main parser.cc</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "95363e2544ab", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/95363e2544ab.json"}, "html": {"href": "#!/osrf/sdformat/commits/95363e2544ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "comment_count": 18, "state": "DECLINED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-02-16T18:32:47.358897+00:00", "type": "participant", "approved": false, "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2017-02-16T18:31:16.031067+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-02-16T00:50:15.440151+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}}], "reason": "Splitting up the pull request into smaller ones.", "updated_on": "2017-02-16T18:32:47.388723+00:00", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "merge_commit": null, "closed_by": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}}