{"rendered": {"description": {"raw": "This PR adds missing constructors and assignment operators to various DOM classes to comply with the rule of five. I believe the violation of this rule has led to test failures in [this PR](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/267/blueprint-remove-pimpl-from-component/diff). The failures are segfaults and they arise when `std::swap` is used in resizing a `std::vector` containing DOM classes (more precisely, ign-gazebo components containing DOM classes).\r\n \r\nHere is possible implementation of `std::swap`: \r\n```\r\nvoid swap(T &_a, T &_b)\r\nT tmp = std::move(_a);\r\n_a = std::move(_b);\r\n_b = std::move(_a);\r\n```\r\nSince a copy assignment is used if a move assignment is missing, some DOM classes will use a move constructor in `T tmp = std::move(_a);` and a copy assignment in `a = std::move(_b)`. This leads to a segfault because the `dataPtr` in `_a` is set to `nullptr` when it was moved from. \r\n\r\nThe fix is to allocate a new `dataPtr` in copy assignment functions if its `nullptr`. Note that this problem wouldn't have surfaced if the class had a move assignment operator, so I added a test that explicitly exercises a copy assignment on an object that has been moved from.", "markup": "markdown", "html": "<p>This PR adds missing constructors and assignment operators to various DOM classes to comply with the rule of five. I believe the violation of this rule has led to test failures in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/267/blueprint-remove-pimpl-from-component/diff\" rel=\"nofollow\">this PR</a>. The failures are segfaults and they arise when <code>std::swap</code> is used in resizing a <code>std::vector</code> containing DOM classes (more precisely, ign-gazebo components containing DOM classes).</p>\n<p>Here is possible implementation of <code>std::swap</code>: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">void</span> <span class=\"nt\">swap</span><span class=\"o\">(</span><span class=\"nt\">T</span> <span class=\"o\">&amp;</span><span class=\"nt\">_a</span><span class=\"o\">,</span> <span class=\"nt\">T</span> <span class=\"o\">&amp;</span><span class=\"nt\">_b</span><span class=\"o\">)</span>\n<span class=\"nt\">T</span> <span class=\"nt\">tmp</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_a</span><span class=\"o\">);</span>\n<span class=\"nt\">_a</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_b</span><span class=\"o\">);</span>\n<span class=\"nt\">_b</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_a</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>Since a copy assignment is used if a move assignment is missing, some DOM classes will use a move constructor in <code>T tmp = std::move(_a);</code> and a copy assignment in <code>a = std::move(_b)</code>. This leads to a segfault because the <code>dataPtr</code> in <code>_a</code> is set to <code>nullptr</code> when it was moved from. </p>\n<p>The fix is to allocate a new <code>dataPtr</code> in copy assignment functions if its <code>nullptr</code>. Note that this problem wouldn't have surfaced if the class had a move assignment operator, so I added a test that explicitly exercises a copy assignment on an object that has been moved from.</p>", "type": "rendered"}, "title": {"raw": "Rule of five for various DOM classes", "markup": "markdown", "html": "<p>Rule of five for various DOM classes</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR adds missing constructors and assignment operators to various DOM classes to comply with the rule of five. I believe the violation of this rule has led to test failures in [this PR](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/267/blueprint-remove-pimpl-from-component/diff). The failures are segfaults and they arise when `std::swap` is used in resizing a `std::vector` containing DOM classes (more precisely, ign-gazebo components containing DOM classes).\r\n \r\nHere is possible implementation of `std::swap`: \r\n```\r\nvoid swap(T &_a, T &_b)\r\nT tmp = std::move(_a);\r\n_a = std::move(_b);\r\n_b = std::move(_a);\r\n```\r\nSince a copy assignment is used if a move assignment is missing, some DOM classes will use a move constructor in `T tmp = std::move(_a);` and a copy assignment in `a = std::move(_b)`. This leads to a segfault because the `dataPtr` in `_a` is set to `nullptr` when it was moved from. \r\n\r\nThe fix is to allocate a new `dataPtr` in copy assignment functions if its `nullptr`. Note that this problem wouldn't have surfaced if the class had a move assignment operator, so I added a test that explicitly exercises a copy assignment on an object that has been moved from.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/524/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:4245c12a1bf6%0D234d73a893ad?from_pullrequest_id=524"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/524/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/524.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/524/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/524/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/524"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/524/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:4245c12a1bf6%0D234d73a893ad?from_pullrequest_id=524"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/524/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/524/statuses_page=1.json"}}, "title": "Rule of five for various DOM classes", "close_source_branch": true, "reviewers": [], "id": 524, "destination": {"commit": {"hash": "234d73a893ad", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/234d73a893ad.json"}, "html": {"href": "#!/osrf/sdformat/commits/234d73a893ad"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "sdf8"}}, "created_on": "2019-04-23T18:57:08.137242+00:00", "summary": {"raw": "This PR adds missing constructors and assignment operators to various DOM classes to comply with the rule of five. I believe the violation of this rule has led to test failures in [this PR](https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/267/blueprint-remove-pimpl-from-component/diff). The failures are segfaults and they arise when `std::swap` is used in resizing a `std::vector` containing DOM classes (more precisely, ign-gazebo components containing DOM classes).\r\n \r\nHere is possible implementation of `std::swap`: \r\n```\r\nvoid swap(T &_a, T &_b)\r\nT tmp = std::move(_a);\r\n_a = std::move(_b);\r\n_b = std::move(_a);\r\n```\r\nSince a copy assignment is used if a move assignment is missing, some DOM classes will use a move constructor in `T tmp = std::move(_a);` and a copy assignment in `a = std::move(_b)`. This leads to a segfault because the `dataPtr` in `_a` is set to `nullptr` when it was moved from. \r\n\r\nThe fix is to allocate a new `dataPtr` in copy assignment functions if its `nullptr`. Note that this problem wouldn't have surfaced if the class had a move assignment operator, so I added a test that explicitly exercises a copy assignment on an object that has been moved from.", "markup": "markdown", "html": "<p>This PR adds missing constructors and assignment operators to various DOM classes to comply with the rule of five. I believe the violation of this rule has led to test failures in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/ignitionrobotics/ign-gazebo/pull-requests/267/blueprint-remove-pimpl-from-component/diff\" rel=\"nofollow\">this PR</a>. The failures are segfaults and they arise when <code>std::swap</code> is used in resizing a <code>std::vector</code> containing DOM classes (more precisely, ign-gazebo components containing DOM classes).</p>\n<p>Here is possible implementation of <code>std::swap</code>: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nt\">void</span> <span class=\"nt\">swap</span><span class=\"o\">(</span><span class=\"nt\">T</span> <span class=\"o\">&amp;</span><span class=\"nt\">_a</span><span class=\"o\">,</span> <span class=\"nt\">T</span> <span class=\"o\">&amp;</span><span class=\"nt\">_b</span><span class=\"o\">)</span>\n<span class=\"nt\">T</span> <span class=\"nt\">tmp</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_a</span><span class=\"o\">);</span>\n<span class=\"nt\">_a</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_b</span><span class=\"o\">);</span>\n<span class=\"nt\">_b</span> <span class=\"o\">=</span> <span class=\"nt\">std</span><span class=\"p\">::</span><span class=\"nd\">move</span><span class=\"o\">(</span><span class=\"nt\">_a</span><span class=\"o\">);</span>\n</pre></div>\n\n\n<p>Since a copy assignment is used if a move assignment is missing, some DOM classes will use a move constructor in <code>T tmp = std::move(_a);</code> and a copy assignment in <code>a = std::move(_b)</code>. This leads to a segfault because the <code>dataPtr</code> in <code>_a</code> is set to <code>nullptr</code> when it was moved from. </p>\n<p>The fix is to allocate a new <code>dataPtr</code> in copy assignment functions if its <code>nullptr</code>. Note that this problem wouldn't have surfaced if the class had a move assignment operator, so I added a test that explicitly exercises a copy assignment on an object that has been moved from.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c1bc643a950b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/c1bc643a950b.json"}, "html": {"href": "#!/osrf/sdformat/commits/c1bc643a950b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "dom_rule_of_five"}}, "comment_count": 20, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-04-25T15:54:57.841198+00:00", "type": "participant", "approved": true, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-26T00:02:23.123544+00:00", "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-26T00:07:45.738330+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-25T18:41:21.938764+00:00", "type": "participant", "approved": false, "user": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}}], "reason": "", "updated_on": "2019-04-26T00:07:52.278349+00:00", "author": {"display_name": "Addisu Z. Taddese", "uuid": "{9d7fdc68-d270-4080-bf03-4df0d0dbf635}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D"}, "html": {"href": "https://bitbucket.org/%7B9d7fdc68-d270-4080-bf03-4df0d0dbf635%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:90bc87b0-2886-4377-a17c-3a6629a697ff/afbf9be5-1e4c-4810-89d4-e58831f34b11/128"}}, "nickname": "azeey", "type": "user", "account_id": "557058:90bc87b0-2886-4377-a17c-3a6629a697ff"}, "merge_commit": {"hash": "4245c12a1bf6", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/4245c12a1bf6.json"}, "html": {"href": "#!/osrf/sdformat/commits/4245c12a1bf6"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}