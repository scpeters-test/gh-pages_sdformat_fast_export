{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31637988.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31637988"}}, "parent": {"id": 31637864, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31637864.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31637864"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Thanks.  I did manage to build it on my local Windows VM, but when I do, it succeeds.  I'll look through the build script to see how it is done differently there.", "markup": "markdown", "html": "<p>Thanks.  I did manage to build it on my local Windows VM, but when I do, it succeeds.  I'll look through the build script to see how it is done differently there.</p>", "type": "rendered"}, "created_on": "2017-02-16T18:32:47.354798+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-16T18:32:47.358897+00:00", "type": "pullrequest_comment", "id": 31637988}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31637879.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31637879"}}, "parent": {"id": 31623882, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31623882.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31623882"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "thanks, I appreciate it :)", "markup": "markdown", "html": "<p>thanks, I appreciate it :)</p>", "type": "rendered"}, "created_on": "2017-02-16T18:31:16.028066+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-16T18:31:16.031067+00:00", "type": "pullrequest_comment", "id": 31637879}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31637864.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31637864"}}, "parent": {"id": 31616242, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31616242.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31616242"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "I'm not sure if we have a tutorial, but we do have a jenkins build script:\n\n* https://bitbucket.org/osrf/release-tools/src/default/jenkins-scripts/lib/sdformat-base-windows.bat", "markup": "markdown", "html": "<p>I'm not sure if we have a tutorial, but we do have a jenkins build script:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/osrf/release-tools/src/default/jenkins-scripts/lib/sdformat-base-windows.bat\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/release-tools/src/default/jenkins-scripts/lib/sdformat-base-windows.bat</a></li>\n</ul>", "type": "rendered"}, "created_on": "2017-02-16T18:30:56.815242+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-16T18:30:56.817894+00:00", "type": "pullrequest_comment", "id": 31637864}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "Splitting up the pull request into smaller ones.", "source": {"commit": {"hash": "95363e2544ab", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/95363e2544ab.json"}, "html": {"href": "#!/osrf/sdformat/commits/95363e2544ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "DECLINED", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-16T15:43:12.861962+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31623882.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31623882"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "I'm going to close out this PR, and open a few new ones to split this review up.", "markup": "markdown", "html": "<p>I'm going to close out this PR, and open a few new ones to split this review up.</p>", "type": "rendered"}, "created_on": "2017-02-16T15:42:58.211489+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-16T15:42:58.217552+00:00", "type": "pullrequest_comment", "id": 31623882}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "95363e2544ab", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/95363e2544ab.json"}, "html": {"href": "#!/osrf/sdformat/commits/95363e2544ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-16T14:37:14.295026+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31616242.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31616242"}}, "parent": {"id": 31570864, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31570864.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31570864"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Yeah, I really don't understand that one.  Basically that (new) test is testing to ensure that if a NULL is passed into Converter::Convert(), it properly throws an exception.   I don't know why Windows is upset with that.  I'm going to disable that test for the moment, and try to re-enable when I get some time to look at it again.", "markup": "markdown", "html": "<p>Yeah, I really don't understand that one.  Basically that (new) test is testing to ensure that if a NULL is passed into Converter::Convert(), it properly throws an exception.   I don't know why Windows is upset with that.  I'm going to disable that test for the moment, and try to re-enable when I get some time to look at it again.</p>", "type": "rendered"}, "created_on": "2017-02-16T14:31:58.835609+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-16T14:32:31.880923+00:00", "type": "pullrequest_comment", "id": 31616242}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31615990.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31615990"}}, "parent": {"id": 31573245, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31573245.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31573245"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Yeah, but its hard to trust what is on those sites.  There are contradictory answers, and it is not at all clear what is really needed.\n\nPersonally, I do like to have the copyright date manually modified; it shows that someone cares enough about the code to have updated it.  I update it on all of my personal projects any time I touch a file in a new year.\n\nAll of that being said, I'm not religious about it, so I could go either way.  Just let me know.", "markup": "markdown", "html": "<p>Yeah, but its hard to trust what is on those sites.  There are contradictory answers, and it is not at all clear what is really needed.</p>\n<p>Personally, I do like to have the copyright date manually modified; it shows that someone cares enough about the code to have updated it.  I update it on all of my personal projects any time I touch a file in a new year.</p>\n<p>All of that being said, I'm not religious about it, so I could go either way.  Just let me know.</p>", "type": "rendered"}, "created_on": "2017-02-16T14:29:31.791904+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-16T14:29:31.795332+00:00", "type": "pullrequest_comment", "id": 31615990}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31573245.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31573245"}}, "parent": {"id": 31571200, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31571200.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31571200"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "while reviewing that pull request and I did some googling and it seems that the end year is not necessary, e.g. see [here](http://softwareengineering.stackexchange.com/questions/124687/copyright-statements-in-source-code), and [here](http://softwareengineering.stackexchange.com/questions/130478/what-copyright-date-for-an-update-to-an-open-source-project-from-last-year)", "markup": "markdown", "html": "<p>while reviewing that pull request and I did some googling and it seems that the end year is not necessary, e.g. see <a data-is-external-link=\"true\" href=\"http://softwareengineering.stackexchange.com/questions/124687/copyright-statements-in-source-code\" rel=\"nofollow\">here</a>, and <a data-is-external-link=\"true\" href=\"http://softwareengineering.stackexchange.com/questions/130478/what-copyright-date-for-an-update-to-an-open-source-project-from-last-year\" rel=\"nofollow\">here</a></p>", "type": "rendered"}, "created_on": "2017-02-16T00:50:15.437711+00:00", "user": {"display_name": "Ian Chen", "uuid": "{eaa6fca5-6deb-43f6-907f-971c144735dd}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D"}, "html": {"href": "https://bitbucket.org/%7Beaa6fca5-6deb-43f6-907f-971c144735dd%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5/1e4adcdf-1946-4280-9aea-eb5f15a7f912/128"}}, "nickname": "Ian Chen", "type": "user", "account_id": "557058:10b01d41-a2e9-4a41-a907-e6e2f03b6cd5"}, "updated_on": "2017-02-16T00:50:15.440151+00:00", "type": "pullrequest_comment", "id": 31573245}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31571200.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31571200"}}, "parent": {"id": 31567129, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567129.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567129"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "see also pull request #301 for when we removed the end dates from this code", "markup": "markdown", "html": "<p>see also <a href=\"#!/osrf/sdformat/pull-requests/301/remove-end-year-from-copyright\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #301</a> for when we removed the end dates from this code</p>", "type": "rendered"}, "created_on": "2017-02-15T23:59:34.563441+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T23:59:34.565679+00:00", "type": "pullrequest_comment", "id": 31571200}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31570864.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31570864"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "[Converter test fails to run on windows](http://build.osrfoundation.org/job/sdformat-ci-pr_any-windows7-amd64/138/testReport/(root)/Results/test_ran/):\n\n~~~\n41: [ RUN      ] Converter.NullDoc\n41/50 Test #41: UNIT_Converter_TEST ....................................***Exception: Other  1.63 sec\n~~~", "markup": "markdown", "html": "<p><a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/sdformat-ci-pr_any-windows7-amd64/138/testReport/(root)/Results/test_ran/\" rel=\"nofollow\">Converter test fails to run on windows</a>:</p>\n<div class=\"codehilite\"><pre><span></span>41: [ RUN      ] Converter.NullDoc\n41/50 Test #41: UNIT_Converter_TEST ....................................***Exception: Other  1.63 sec\n</pre></div>", "type": "rendered"}, "created_on": "2017-02-15T23:51:36.640680+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T23:51:36.642964+00:00", "type": "pullrequest_comment", "id": 31570864}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31570697.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31570697"}}, "parent": {"id": 31567129, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567129.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567129"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "actually, it just says \"2012\"\n\n* https://bitbucket.org/osrf/gazebo/src/default/gazebo/Server.hh#Server.hh-2\n\nI'm not a lawyer, so I don't know what's best. It would be great if the version-control metadata could be used for this purpose.", "markup": "markdown", "html": "<p>actually, it just says \"2012\"</p>\n<ul>\n<li><a href=\"https://bitbucket.org/osrf/gazebo/src/default/gazebo/Server.hh#Server.hh-2\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/osrf/gazebo/src/default/gazebo/Server.hh#Server.hh-2</a></li>\n</ul>\n<p>I'm not a lawyer, so I don't know what's best. It would be great if the version-control metadata could be used for this purpose.</p>", "type": "rendered"}, "created_on": "2017-02-15T23:47:18.643268+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T23:47:18.645812+00:00", "type": "pullrequest_comment", "id": 31570697}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31570639.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31570639"}}, "parent": {"id": 31567001, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567001.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567001"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Yeah, you can `hg graft` (cherry-pick) commits onto a separate branch for each PR.", "markup": "markdown", "html": "<p>Yeah, you can <code>hg graft</code> (cherry-pick) commits onto a separate branch for each PR.</p>", "type": "rendered"}, "created_on": "2017-02-15T23:45:50.129979+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T23:45:50.132490+00:00", "type": "pullrequest_comment", "id": 31570639}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1c97fff8ccba", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/1c97fff8ccba.json"}, "html": {"href": "#!/osrf/sdformat/commits/1c97fff8ccba"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-15T22:33:34.402418+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567186.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567186"}}, "parent": {"id": 31566997, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566997.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566997"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Actually, yeah, good point, I can split after the colon, and then use a \\ continuation.", "markup": "markdown", "html": "<p>Actually, yeah, good point, I can split after the colon, and then use a \\ continuation.</p>", "type": "rendered"}, "created_on": "2017-02-15T22:29:12.802117+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "inline": {}, "updated_on": "2017-02-15T22:29:12.804481+00:00", "type": "pullrequest_comment", "id": 31567186}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567129.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567129"}}, "parent": {"id": 31566943, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566943.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566943"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "I actually don't have a strong preference, but I noticed they were out of date.  Does Gazebo now just do \"2012-\"?", "markup": "markdown", "html": "<p>I actually don't have a strong preference, but I noticed they were out of date.  Does Gazebo now just do \"2012-\"?</p>", "type": "rendered"}, "created_on": "2017-02-15T22:28:05.667147+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-15T22:28:05.669815+00:00", "type": "pullrequest_comment", "id": 31567129}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31567001.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31567001"}}, "parent": {"id": 31566887, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566887.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566887"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Yeah, that's no problem.  What's the preferred way of doing that; one branch per PR?", "markup": "markdown", "html": "<p>Yeah, that's no problem.  What's the preferred way of doing that; one branch per PR?</p>", "type": "rendered"}, "created_on": "2017-02-15T22:25:38.960907+00:00", "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "updated_on": "2017-02-15T22:25:38.963859+00:00", "type": "pullrequest_comment", "id": 31567001}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566997.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566997"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "can this be split over multiple lines with `\\`?", "markup": "markdown", "html": "<p>can this be split over multiple lines with <code>\\</code>?</p>", "type": "rendered"}, "created_on": "2017-02-15T22:25:36.823251+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {}, "updated_on": "2017-02-15T22:25:36.826678+00:00", "type": "pullrequest_comment", "id": 31566997}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566943.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566943"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "Regarding dates in copyright headers, we just took the end years out of gazebo because it was an annual headache. Do you think it's better to have the end years?", "markup": "markdown", "html": "<p>Regarding dates in copyright headers, we just took the end years out of gazebo because it was an annual headache. Do you think it's better to have the end years?</p>", "type": "rendered"}, "created_on": "2017-02-15T22:24:46.579546+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T22:24:46.583233+00:00", "type": "pullrequest_comment", "id": 31566943}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566887.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566887"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "It would be easier to review if this were split up into a few separate pull requests; would you mind doing that?", "markup": "markdown", "html": "<p>It would be easier to review if this were split up into a few separate pull requests; would you mind doing that?</p>", "type": "rendered"}, "created_on": "2017-02-15T22:24:00.492281+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T22:24:00.494488+00:00", "type": "pullrequest_comment", "id": 31566887}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"comment": {"links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310/comments/31566744.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310/_/diff#comment-31566744"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}, "content": {"raw": "diff without whitespace:\n\n* #!/osrf/sdformat/pull-requests/310/remove-boost2/diff?w=1", "markup": "markdown", "html": "<p>diff without whitespace:</p>\n<ul>\n<li><a href=\"#!/osrf/sdformat/pull-requests/310/remove-boost2/diff?w=1\" rel=\"nofollow\" class=\"ap-connect-link\">#!/osrf/sdformat/pull-requests/310/remove-boost2/diff?w=1</a></li>\n</ul>", "type": "rendered"}, "created_on": "2017-02-15T22:21:12.568516+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2017-02-15T22:21:12.572182+00:00", "type": "pullrequest_comment", "id": 31566744}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e56ebe8a073e", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/e56ebe8a073e.json"}, "html": {"href": "#!/osrf/sdformat/commits/e56ebe8a073e"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-15T21:35:57.432775+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1d7da4e62d06", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/1d7da4e62d06.json"}, "html": {"href": "#!/osrf/sdformat/commits/1d7da4e62d06"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-15T21:13:23.332141+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "beb676231259", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/beb676231259.json"}, "html": {"href": "#!/osrf/sdformat/commits/beb676231259"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-15T20:42:47.253380+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}, {"update": {"description": "This is a large series of patches to remove more of boost from sdformat.  I'm sorry it is so big; my best advice for reviewing it is to review each of the patches separately, rather than all in one diff.  Alternatively, I can open up smaller pull requests with a subset of the functionality; just let me know.\r\n\r\nI've tested this both on Ubuntu 16.04 and Ubuntu 14.04, and it seems happy both of those places.  I don't have a good way to test on Windows, so I'm going to rely on CI to help me out here.\r\n\r\nOnce this patch set goes in, almost all remaining uses of boost are for boost::filesystem, which will be harder to remove (but which I have a plan for).\r\n\r\n* Fix trailing whitespace all over the tree.\r\n\r\n    No functional change.\r\n\r\n* Add brackets to all control statements.\r\n\r\n    This makes the code consistent across the entire\r\n    codebase.  No functional change.\r\n\r\n* Fix up style and indentation.\r\n\r\n    No functional change, just making the code consistent.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Get rid of BOOST_ASSERT.\r\n\r\n    Instead, make SDF_ASSERT throw an exception.  This is different\r\n    behavior than what BOOST_ASSERT does by default, but it makes\r\n    more sense for a library to throw an exception rather than\r\n    abort the whole program.\r\n\r\n* Update the copyright headers on a bunch of files.\r\n\r\n* Remove include of unused boost version.hpp header.\r\n\r\n* Replace a couple of uses of boost::replace_all with std::replace.\r\n\r\n    This works fine since we are just replacing a single character.\r\n\r\n* Replace boost::ilexicographical_compare with a std:: version.\r\n\r\n    We use std::lexicographical_compare with a custom compare function\r\n    to ensure that we do the compare case-insensitively.\r\n\r\n* Use the split function instead of boost::split.\r\n\r\n    This gets rid of the last boost user in Converter.cc, so remove\r\n    the include as well.\r\n\r\n* Remove a use of boost::trim and open-code it ourselves.\r\n\r\n* Replace uses of boost::replace_all with our own home-grown version.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Use sdf::split to replace boost::split.\r\n\r\n* Remove winGetEnv.\r\n\r\n    The same thing can be accomplished just by calling std::getenv,\r\n    which Windows implements.\r\n\r\n* Deal with Windows in a slightly nicer way.\r\n\r\n    We can get rid of the #ifdef and the resulting weirdness in\r\n    the function signature just by adding (void)_color inside\r\n    the function body.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.\r\n\r\n* Replace a use of boost::replace_first with std:: equivalents.\r\n\r\n* Use the trim function in Param.cc\r\n\r\n    This removes one more boost call.\r\n\r\n* Add in a new test file for the main parser.cc", "title": "Remove boost2", "destination": {"commit": {"hash": "5ee36f97cb76", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/5ee36f97cb76.json"}, "html": {"href": "#!/osrf/sdformat/commits/5ee36f97cb76"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "beb676231259", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/beb676231259.json"}, "html": {"href": "#!/osrf/sdformat/commits/beb676231259"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost2"}}, "state": "OPEN", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "date": "2017-02-15T20:42:47.201874+00:00"}, "pull_request": {"type": "pullrequest", "id": 310, "links": {"self": {"href": "data/repositories/osrf/sdformat/pullrequests/310.json"}, "html": {"href": "#!/osrf/sdformat/pull-requests/310"}}, "title": "Remove boost2"}}]}