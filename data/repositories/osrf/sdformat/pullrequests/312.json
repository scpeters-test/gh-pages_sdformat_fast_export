{"rendered": {"description": {"raw": "This is the second of the pull requests intended to replace an earlier pull request. The purpose of this series of pull requests is to do more removal of boost from sdformat. Each branch builds upon the last one, so we'll end up with a giant octopus merge in the end.  Note that I've requested to merge this branch *into* remove-boost-2, so that here we only see the diffs between this and remove-boost-2.  However, the ultimate goal is to get all of this onto default.\r\n\r\nThis particular PR removes boost from parser_urdf.cc, and adds a bunch of tests for that.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Remove parser_urdf.cc uses of boost::split.\r\n\r\n    Use the home-grown one instead.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.", "markup": "markdown", "html": "<p>This is the second of the pull requests intended to replace an earlier pull request. The purpose of this series of pull requests is to do more removal of boost from sdformat. Each branch builds upon the last one, so we'll end up with a giant octopus merge in the end.  Note that I've requested to merge this branch <em>into</em> remove-boost-2, so that here we only see the diffs between this and remove-boost-2.  However, the ultimate goal is to get all of this onto default.</p>\n<p>This particular PR removes boost from parser_urdf.cc, and adds a bunch of tests for that.</p>\n<ul>\n<li>\n<p>Rewrite parser_urdf_TEST.cc</p>\n<p>This just makes it look more like the other tests, and gets\nrid of some unnecessary infrastructure.</p>\n</li>\n<li>\n<p>Fix parsing of URDF with an empty origin.</p>\n<p>Previously, attempting to parse a URDF file with an empty\norigin attribute of xyz or rpy would lead to a crash (attempting\nto initialize a std::string with a NULL).  The new code detects\nthis situation and just adds an origin of 0,0,0,0,0,0 for an\nempty origin.  Tests for this are also added.</p>\n</li>\n<li>\n<p>Switch away from using boost::lexical_cast for parser_urdf.</p>\n<p>Instead we use the std::sto{d,i} where appropriate.</p>\n</li>\n<li>\n<p>Add in a test for an invalid origin value.</p>\n<p>That is, it is basically one that we can't successfully run std::stod\non.</p>\n</li>\n<li>\n<p>Write a couple of tests for the stod conversions in parser_urdf.cc</p>\n<p>In the first test, we iterate over a map that contains a list\nof elements that we want to test for.  For each element, we\nparse the XML and then check to make sure that all of the\nelements that we expect to be there are actually there.  We\nalso check that the final number represented is what we expect.\nThe second test just checks that an invalid number throws a\nstd::invalid_argument like we expect.</p>\n</li>\n<li>\n<p>Make the split function visible to the entire program.</p>\n<p>We are going to be using it in several other places.</p>\n</li>\n<li>\n<p>Remove parser_urdf.cc uses of boost::split.</p>\n<p>Use the home-grown one instead.</p>\n</li>\n<li>\n<p>Add in tests for the joint parameters.</p>\n</li>\n<li>\n<p>Remove initialJointPosition, stopKp, and stopKd.</p>\n<p>They were never used for anything, so having the code for\nthem seems kind of pointless.</p>\n</li>\n<li>\n<p>Remove a lexical_cast to string.</p>\n</li>\n<li>\n<p>Remove unused functions.</p>\n<p>This gets rid of dead code, and also removes a couple of uses\nof boost from the library.</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Remove boost - from parser_urdf.cc (PR 2/5)", "markup": "markdown", "html": "<p>Remove boost - from parser_urdf.cc (PR 2/5)</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is the second of the pull requests intended to replace an earlier pull request. The purpose of this series of pull requests is to do more removal of boost from sdformat. Each branch builds upon the last one, so we'll end up with a giant octopus merge in the end.  Note that I've requested to merge this branch *into* remove-boost-2, so that here we only see the diffs between this and remove-boost-2.  However, the ultimate goal is to get all of this onto default.\r\n\r\nThis particular PR removes boost from parser_urdf.cc, and adds a bunch of tests for that.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Remove parser_urdf.cc uses of boost::split.\r\n\r\n    Use the home-grown one instead.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/312/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/osrf/sdformat:30f59880ce7b%0Dba7b4344ae62?from_pullrequest_id=312"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/312/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/312.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/312/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/312/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/312"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/312/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/osrf/sdformat:30f59880ce7b%0Dba7b4344ae62?from_pullrequest_id=312"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/312/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/312/statuses_page=1.json"}}, "title": "Remove boost - from parser_urdf.cc (PR 2/5)", "close_source_branch": true, "reviewers": [{"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}, {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}], "id": 312, "destination": {"commit": {"hash": "ba7b4344ae62", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/ba7b4344ae62.json"}, "html": {"href": "#!/osrf/sdformat/commits/ba7b4344ae62"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "created_on": "2017-02-16T15:52:02.841804+00:00", "summary": {"raw": "This is the second of the pull requests intended to replace an earlier pull request. The purpose of this series of pull requests is to do more removal of boost from sdformat. Each branch builds upon the last one, so we'll end up with a giant octopus merge in the end.  Note that I've requested to merge this branch *into* remove-boost-2, so that here we only see the diffs between this and remove-boost-2.  However, the ultimate goal is to get all of this onto default.\r\n\r\nThis particular PR removes boost from parser_urdf.cc, and adds a bunch of tests for that.\r\n\r\n* Rewrite parser_urdf_TEST.cc\r\n\r\n    This just makes it look more like the other tests, and gets\r\n    rid of some unnecessary infrastructure.\r\n\r\n* Fix parsing of URDF with an empty origin.\r\n\r\n    Previously, attempting to parse a URDF file with an empty\r\n    origin attribute of xyz or rpy would lead to a crash (attempting\r\n    to initialize a std::string with a NULL).  The new code detects\r\n    this situation and just adds an origin of 0,0,0,0,0,0 for an\r\n    empty origin.  Tests for this are also added.\r\n\r\n* Switch away from using boost::lexical_cast for parser_urdf.\r\n\r\n    Instead we use the std::sto{d,i} where appropriate.\r\n\r\n* Add in a test for an invalid origin value.\r\n\r\n    That is, it is basically one that we can't successfully run std::stod\r\n    on.\r\n\r\n* Write a couple of tests for the stod conversions in parser_urdf.cc\r\n\r\n    In the first test, we iterate over a map that contains a list\r\n    of elements that we want to test for.  For each element, we\r\n    parse the XML and then check to make sure that all of the\r\n    elements that we expect to be there are actually there.  We\r\n    also check that the final number represented is what we expect.\r\n    The second test just checks that an invalid number throws a\r\n    std::invalid_argument like we expect.\r\n\r\n* Make the split function visible to the entire program.\r\n\r\n    We are going to be using it in several other places.\r\n\r\n* Remove parser_urdf.cc uses of boost::split.\r\n\r\n    Use the home-grown one instead.\r\n\r\n* Add in tests for the joint parameters.\r\n\r\n* Remove initialJointPosition, stopKp, and stopKd.\r\n\r\n    They were never used for anything, so having the code for\r\n    them seems kind of pointless.\r\n\r\n* Remove a lexical_cast to string.\r\n\r\n* Remove unused functions.\r\n\r\n    This gets rid of dead code, and also removes a couple of uses\r\n    of boost from the library.", "markup": "markdown", "html": "<p>This is the second of the pull requests intended to replace an earlier pull request. The purpose of this series of pull requests is to do more removal of boost from sdformat. Each branch builds upon the last one, so we'll end up with a giant octopus merge in the end.  Note that I've requested to merge this branch <em>into</em> remove-boost-2, so that here we only see the diffs between this and remove-boost-2.  However, the ultimate goal is to get all of this onto default.</p>\n<p>This particular PR removes boost from parser_urdf.cc, and adds a bunch of tests for that.</p>\n<ul>\n<li>\n<p>Rewrite parser_urdf_TEST.cc</p>\n<p>This just makes it look more like the other tests, and gets\nrid of some unnecessary infrastructure.</p>\n</li>\n<li>\n<p>Fix parsing of URDF with an empty origin.</p>\n<p>Previously, attempting to parse a URDF file with an empty\norigin attribute of xyz or rpy would lead to a crash (attempting\nto initialize a std::string with a NULL).  The new code detects\nthis situation and just adds an origin of 0,0,0,0,0,0 for an\nempty origin.  Tests for this are also added.</p>\n</li>\n<li>\n<p>Switch away from using boost::lexical_cast for parser_urdf.</p>\n<p>Instead we use the std::sto{d,i} where appropriate.</p>\n</li>\n<li>\n<p>Add in a test for an invalid origin value.</p>\n<p>That is, it is basically one that we can't successfully run std::stod\non.</p>\n</li>\n<li>\n<p>Write a couple of tests for the stod conversions in parser_urdf.cc</p>\n<p>In the first test, we iterate over a map that contains a list\nof elements that we want to test for.  For each element, we\nparse the XML and then check to make sure that all of the\nelements that we expect to be there are actually there.  We\nalso check that the final number represented is what we expect.\nThe second test just checks that an invalid number throws a\nstd::invalid_argument like we expect.</p>\n</li>\n<li>\n<p>Make the split function visible to the entire program.</p>\n<p>We are going to be using it in several other places.</p>\n</li>\n<li>\n<p>Remove parser_urdf.cc uses of boost::split.</p>\n<p>Use the home-grown one instead.</p>\n</li>\n<li>\n<p>Add in tests for the joint parameters.</p>\n</li>\n<li>\n<p>Remove initialJointPosition, stopKp, and stopKd.</p>\n<p>They were never used for anything, so having the code for\nthem seems kind of pointless.</p>\n</li>\n<li>\n<p>Remove a lexical_cast to string.</p>\n</li>\n<li>\n<p>Remove unused functions.</p>\n<p>This gets rid of dead code, and also removes a couple of uses\nof boost from the library.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "a740489894be", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/a740489894be.json"}, "html": {"href": "#!/osrf/sdformat/commits/a740489894be"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "remove-boost-3"}}, "comment_count": 44, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2017-02-16T19:50:03.878033+00:00", "type": "participant", "approved": false, "user": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}, {"role": "REVIEWER", "participated_on": "2017-02-22T11:16:53.407810+00:00", "type": "participant", "approved": true, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-02-17T17:00:46.043178+00:00", "type": "participant", "approved": false, "user": {"display_name": "Shane Loretz", "uuid": "{656e3311-aad9-45a1-aaf7-b0ee0e84b287}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D"}, "html": {"href": "https://bitbucket.org/%7B656e3311-aad9-45a1-aaf7-b0ee0e84b287%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:684383ab-ac95-4859-a350-4a6f41a94a22/c7a1ebf5-cade-4115-9f26-9d3facb776db/128"}}, "nickname": "Shane Loretz", "type": "user", "account_id": "557058:684383ab-ac95-4859-a350-4a6f41a94a22"}}, {"role": "REVIEWER", "participated_on": "2017-02-21T20:11:26.479844+00:00", "type": "participant", "approved": true, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-02-21T20:17:52.494151+00:00", "type": "participant", "approved": false, "user": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}}], "reason": "", "updated_on": "2017-02-22T13:31:12.080250+00:00", "author": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}, "merge_commit": {"hash": "30f59880ce7b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/30f59880ce7b.json"}, "html": {"href": "#!/osrf/sdformat/commits/30f59880ce7b"}}}, "closed_by": {"display_name": "clalancette", "uuid": "{02b311e1-297d-4232-89c4-5485d0a02911}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D"}, "html": {"href": "https://bitbucket.org/%7B02b311e1-297d-4232-89c4-5485d0a02911%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f/048a0933-60ac-4910-a6a5-ed058bdea8eb/128"}}, "nickname": "clalancette", "type": "user", "account_id": "557058:ad6ed80b-ec66-45cb-9504-b1094a415b7f"}}