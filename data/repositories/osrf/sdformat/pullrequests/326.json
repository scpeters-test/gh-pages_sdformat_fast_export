{"rendered": {"reason": {"raw": "Thanks for the contribution. We will move this project to use ign-cmake, which will bring in mult-version installation.", "markup": "markdown", "html": "<p>Thanks for the contribution. We will move this project to use ign-cmake, which will bring in mult-version installation.</p>", "type": "rendered"}, "description": {"raw": "Flexible build can be configured by adding SDFORMAT_NAME_POSTFIX to cmake defines. For example:\r\n\r\n   cmake -DSDFORMAT_NAME_POSTFIX=XXX <src>\r\n\r\nwill generate the sdformat library libsdformatXXX.so.<version> and other associated directory/files with a different name.\r\n\r\nNote, I'm not very familiar with making pull requests so please let me know if I should be doing things differently.\r\n\r\nDiscussion note:\r\n\r\nIn making these changes I've realised that there are some things about the packaging philosophy behind gazebo and associated libraries (e.g., sdformat, ignition-math) that I don't quite understand and these change how I would want to make the build more flexible.\r\n\r\nTo set the scene, many software projects allow different versions of the software to be installed on the same system. For example, python 2.X and 3.X. To do this they install to different locations (e.g., /usr/include/python2.7/ and /usr/include/python3.4) and have different filenames (e.g, libpython2.7.so and libpython3.4.so). When they are package for distribution they also have different names (e.g., debian packages python2.7-dev and python3.4-dev).  This all makes sense to me and won't be news to anyone here.\r\n\r\nHowever, when it comes to gazebo and libraries it is packaged in a way that I don't understand. It seems to be packaged almost in flexible/multi-version... but not really. For example, it uses different debian package names for each version (eg., libsdformat3, libsdformat4). Similarly,  the include files are given unique locations based on the version (e.g., /usr/include/sdformat-3.0, /usr/include/sdformat-4.0). Yet the libraries themselves are not given this flexibility and all end up pointing to the same name (e.g., /usr/lib/libsdformat.so). Similarly, extra resource files are installed in a single version manner (e.g., all packages of libsdformat install to same directory: /usr/share/sdformat). The upshot is that different package versions cannot be installed on the same system.\r\n\r\nIt seems it would be better to follow a similar pattern to projects like python. So assuming that incompatibilities of libraries occur at major versions then:\r\n\r\n- package names stay as they currently are: e.g. libsdformat3\r\n\r\n- include directories have the major version number: e.g., /usr/include/sdformat3.\r\n\r\n- library name includes the major version number: e.g., /usr/lib/libsdformat3.so, and are sym linked to the full version numbers: e.g., libsformat3.so -> libformat3.so.3, and libformat3.so.3.0.0.\r\n\r\n- extra resource also include the major version number: e.g., /usr/share/sdformat3.\r\n\r\nThis is not what I have done in this pull request. But I think would be a more consistent and flexible build strategy that could be adopted throughout gazebo and its associated libraries.", "markup": "markdown", "html": "<p>Flexible build can be configured by adding SDFORMAT_NAME_POSTFIX to cmake defines. For example:</p>\n<p>cmake -DSDFORMAT_NAME_POSTFIX=XXX &lt;src&gt;</p>\n<p>will generate the sdformat library libsdformatXXX.so.&lt;version&gt; and other associated directory/files with a different name.</p>\n<p>Note, I'm not very familiar with making pull requests so please let me know if I should be doing things differently.</p>\n<p>Discussion note:</p>\n<p>In making these changes I've realised that there are some things about the packaging philosophy behind gazebo and associated libraries (e.g., sdformat, ignition-math) that I don't quite understand and these change how I would want to make the build more flexible.</p>\n<p>To set the scene, many software projects allow different versions of the software to be installed on the same system. For example, python 2.X and 3.X. To do this they install to different locations (e.g., /usr/include/python2.7/ and /usr/include/python3.4) and have different filenames (e.g, libpython2.7.so and libpython3.4.so). When they are package for distribution they also have different names (e.g., debian packages python2.7-dev and python3.4-dev).  This all makes sense to me and won't be news to anyone here.</p>\n<p>However, when it comes to gazebo and libraries it is packaged in a way that I don't understand. It seems to be packaged almost in flexible/multi-version... but not really. For example, it uses different debian package names for each version (eg., libsdformat3, libsdformat4). Similarly,  the include files are given unique locations based on the version (e.g., /usr/include/sdformat-3.0, /usr/include/sdformat-4.0). Yet the libraries themselves are not given this flexibility and all end up pointing to the same name (e.g., /usr/lib/libsdformat.so). Similarly, extra resource files are installed in a single version manner (e.g., all packages of libsdformat install to same directory: /usr/share/sdformat). The upshot is that different package versions cannot be installed on the same system.</p>\n<p>It seems it would be better to follow a similar pattern to projects like python. So assuming that incompatibilities of libraries occur at major versions then:</p>\n<ul>\n<li>\n<p>package names stay as they currently are: e.g. libsdformat3</p>\n</li>\n<li>\n<p>include directories have the major version number: e.g., /usr/include/sdformat3.</p>\n</li>\n<li>\n<p>library name includes the major version number: e.g., /usr/lib/libsdformat3.so, and are sym linked to the full version numbers: e.g., libsformat3.so -&gt; libformat3.so.3, and libformat3.so.3.0.0.</p>\n</li>\n<li>\n<p>extra resource also include the major version number: e.g., /usr/share/sdformat3.</p>\n</li>\n</ul>\n<p>This is not what I have done in this pull request. But I think would be a more consistent and flexible build strategy that could be adopted throughout gazebo and its associated libraries.</p>", "type": "rendered"}, "title": {"raw": "More flexible build allowing for multi-version installation.", "markup": "markdown", "html": "<p>More flexible build allowing for multi-version installation.</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Flexible build can be configured by adding SDFORMAT_NAME_POSTFIX to cmake defines. For example:\r\n\r\n   cmake -DSDFORMAT_NAME_POSTFIX=XXX <src>\r\n\r\nwill generate the sdformat library libsdformatXXX.so.<version> and other associated directory/files with a different name.\r\n\r\nNote, I'm not very familiar with making pull requests so please let me know if I should be doing things differently.\r\n\r\nDiscussion note:\r\n\r\nIn making these changes I've realised that there are some things about the packaging philosophy behind gazebo and associated libraries (e.g., sdformat, ignition-math) that I don't quite understand and these change how I would want to make the build more flexible.\r\n\r\nTo set the scene, many software projects allow different versions of the software to be installed on the same system. For example, python 2.X and 3.X. To do this they install to different locations (e.g., /usr/include/python2.7/ and /usr/include/python3.4) and have different filenames (e.g, libpython2.7.so and libpython3.4.so). When they are package for distribution they also have different names (e.g., debian packages python2.7-dev and python3.4-dev).  This all makes sense to me and won't be news to anyone here.\r\n\r\nHowever, when it comes to gazebo and libraries it is packaged in a way that I don't understand. It seems to be packaged almost in flexible/multi-version... but not really. For example, it uses different debian package names for each version (eg., libsdformat3, libsdformat4). Similarly,  the include files are given unique locations based on the version (e.g., /usr/include/sdformat-3.0, /usr/include/sdformat-4.0). Yet the libraries themselves are not given this flexibility and all end up pointing to the same name (e.g., /usr/lib/libsdformat.so). Similarly, extra resource files are installed in a single version manner (e.g., all packages of libsdformat install to same directory: /usr/share/sdformat). The upshot is that different package versions cannot be installed on the same system.\r\n\r\nIt seems it would be better to follow a similar pattern to projects like python. So assuming that incompatibilities of libraries occur at major versions then:\r\n\r\n- package names stay as they currently are: e.g. libsdformat3\r\n\r\n- include directories have the major version number: e.g., /usr/include/sdformat3.\r\n\r\n- library name includes the major version number: e.g., /usr/lib/libsdformat3.so, and are sym linked to the full version numbers: e.g., libsformat3.so -> libformat3.so.3, and libformat3.so.3.0.0.\r\n\r\n- extra resource also include the major version number: e.g., /usr/share/sdformat3.\r\n\r\nThis is not what I have done in this pull request. But I think would be a more consistent and flexible build strategy that could be adopted throughout gazebo and its associated libraries.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/326/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diffstat/daveraja/sdformat:7fad912b0471%0D278eefccef6b?from_pullrequest_id=326"}, "commits": {"href": "data/repositories/osrf/sdformat/pullrequests/326/commits.json"}, "self": {"href": "data/repositories/osrf/sdformat/pullrequests/326.json"}, "comments": {"href": "data/repositories/osrf/sdformat/pullrequests/326/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/326/merge"}, "html": {"href": "#!/osrf/sdformat/pull-requests/326"}, "activity": {"href": "data/repositories/osrf/sdformat/pullrequests/326/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/diff/daveraja/sdformat:7fad912b0471%0D278eefccef6b?from_pullrequest_id=326"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdformat/pullrequests/326/approve"}, "statuses": {"href": "data/repositories/osrf/sdformat/pullrequests/326/statuses_page=1.json"}}, "title": "More flexible build allowing for multi-version installation.", "close_source_branch": false, "reviewers": [{"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}], "id": 326, "destination": {"commit": {"hash": "278eefccef6b", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/sdformat/commit/278eefccef6b.json"}, "html": {"href": "#!/osrf/sdformat/commits/278eefccef6b"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/sdformat.json"}, "html": {"href": "#!/osrf/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b6d52f9f-b070-41c0-807c-94af07ea375b}ts=1606789"}}, "type": "repository", "name": "sdformat", "full_name": "osrf/sdformat", "uuid": "{b6d52f9f-b070-41c0-807c-94af07ea375b}"}, "branch": {"name": "default"}}, "created_on": "2017-03-17T01:17:45.240652+00:00", "summary": {"raw": "Flexible build can be configured by adding SDFORMAT_NAME_POSTFIX to cmake defines. For example:\r\n\r\n   cmake -DSDFORMAT_NAME_POSTFIX=XXX <src>\r\n\r\nwill generate the sdformat library libsdformatXXX.so.<version> and other associated directory/files with a different name.\r\n\r\nNote, I'm not very familiar with making pull requests so please let me know if I should be doing things differently.\r\n\r\nDiscussion note:\r\n\r\nIn making these changes I've realised that there are some things about the packaging philosophy behind gazebo and associated libraries (e.g., sdformat, ignition-math) that I don't quite understand and these change how I would want to make the build more flexible.\r\n\r\nTo set the scene, many software projects allow different versions of the software to be installed on the same system. For example, python 2.X and 3.X. To do this they install to different locations (e.g., /usr/include/python2.7/ and /usr/include/python3.4) and have different filenames (e.g, libpython2.7.so and libpython3.4.so). When they are package for distribution they also have different names (e.g., debian packages python2.7-dev and python3.4-dev).  This all makes sense to me and won't be news to anyone here.\r\n\r\nHowever, when it comes to gazebo and libraries it is packaged in a way that I don't understand. It seems to be packaged almost in flexible/multi-version... but not really. For example, it uses different debian package names for each version (eg., libsdformat3, libsdformat4). Similarly,  the include files are given unique locations based on the version (e.g., /usr/include/sdformat-3.0, /usr/include/sdformat-4.0). Yet the libraries themselves are not given this flexibility and all end up pointing to the same name (e.g., /usr/lib/libsdformat.so). Similarly, extra resource files are installed in a single version manner (e.g., all packages of libsdformat install to same directory: /usr/share/sdformat). The upshot is that different package versions cannot be installed on the same system.\r\n\r\nIt seems it would be better to follow a similar pattern to projects like python. So assuming that incompatibilities of libraries occur at major versions then:\r\n\r\n- package names stay as they currently are: e.g. libsdformat3\r\n\r\n- include directories have the major version number: e.g., /usr/include/sdformat3.\r\n\r\n- library name includes the major version number: e.g., /usr/lib/libsdformat3.so, and are sym linked to the full version numbers: e.g., libsformat3.so -> libformat3.so.3, and libformat3.so.3.0.0.\r\n\r\n- extra resource also include the major version number: e.g., /usr/share/sdformat3.\r\n\r\nThis is not what I have done in this pull request. But I think would be a more consistent and flexible build strategy that could be adopted throughout gazebo and its associated libraries.", "markup": "markdown", "html": "<p>Flexible build can be configured by adding SDFORMAT_NAME_POSTFIX to cmake defines. For example:</p>\n<p>cmake -DSDFORMAT_NAME_POSTFIX=XXX &lt;src&gt;</p>\n<p>will generate the sdformat library libsdformatXXX.so.&lt;version&gt; and other associated directory/files with a different name.</p>\n<p>Note, I'm not very familiar with making pull requests so please let me know if I should be doing things differently.</p>\n<p>Discussion note:</p>\n<p>In making these changes I've realised that there are some things about the packaging philosophy behind gazebo and associated libraries (e.g., sdformat, ignition-math) that I don't quite understand and these change how I would want to make the build more flexible.</p>\n<p>To set the scene, many software projects allow different versions of the software to be installed on the same system. For example, python 2.X and 3.X. To do this they install to different locations (e.g., /usr/include/python2.7/ and /usr/include/python3.4) and have different filenames (e.g, libpython2.7.so and libpython3.4.so). When they are package for distribution they also have different names (e.g., debian packages python2.7-dev and python3.4-dev).  This all makes sense to me and won't be news to anyone here.</p>\n<p>However, when it comes to gazebo and libraries it is packaged in a way that I don't understand. It seems to be packaged almost in flexible/multi-version... but not really. For example, it uses different debian package names for each version (eg., libsdformat3, libsdformat4). Similarly,  the include files are given unique locations based on the version (e.g., /usr/include/sdformat-3.0, /usr/include/sdformat-4.0). Yet the libraries themselves are not given this flexibility and all end up pointing to the same name (e.g., /usr/lib/libsdformat.so). Similarly, extra resource files are installed in a single version manner (e.g., all packages of libsdformat install to same directory: /usr/share/sdformat). The upshot is that different package versions cannot be installed on the same system.</p>\n<p>It seems it would be better to follow a similar pattern to projects like python. So assuming that incompatibilities of libraries occur at major versions then:</p>\n<ul>\n<li>\n<p>package names stay as they currently are: e.g. libsdformat3</p>\n</li>\n<li>\n<p>include directories have the major version number: e.g., /usr/include/sdformat3.</p>\n</li>\n<li>\n<p>library name includes the major version number: e.g., /usr/lib/libsdformat3.so, and are sym linked to the full version numbers: e.g., libsformat3.so -&gt; libformat3.so.3, and libformat3.so.3.0.0.</p>\n</li>\n<li>\n<p>extra resource also include the major version number: e.g., /usr/share/sdformat3.</p>\n</li>\n</ul>\n<p>This is not what I have done in this pull request. But I think would be a more consistent and flexible build strategy that could be adopted throughout gazebo and its associated libraries.</p>", "type": "rendered"}, "source": {"commit": {"hash": "7fad912b0471", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/daveraja/sdformat/commit/7fad912b0471"}, "html": {"href": "https://bitbucket.org/daveraja/sdformat/commits/7fad912b0471"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/daveraja/sdformat"}, "html": {"href": "https://bitbucket.org/daveraja/sdformat"}, "avatar": {"href": "data/bytebucket.org/ravatar/{8e3ddb1b-2624-47fa-ab35-1b0f72ea81aa}ts=c_plus_plus"}}, "type": "repository", "name": "sdformat", "full_name": "daveraja/sdformat", "uuid": "{8e3ddb1b-2624-47fa-ab35-1b0f72ea81aa}"}, "branch": {"name": "configurable_library_name"}}, "comment_count": 2, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-27T16:17:31.609151+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-27T17:50:07.760515+00:00", "type": "participant", "approved": false, "user": {"display_name": "Michael Grey", "uuid": "{c1cdfe52-2887-474c-ae99-72fdc53a59c9}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D"}, "html": {"href": "https://bitbucket.org/%7Bc1cdfe52-2887-474c-ae99-72fdc53a59c9%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:67759e29-d1df-465f-868d-047738e36fc9/d42d74cf-c1bd-4431-8288-07f543bbe325/128"}}, "nickname": "mxgrey", "type": "user", "account_id": "557058:67759e29-d1df-465f-868d-047738e36fc9"}}], "reason": "Thanks for the contribution. We will move this project to use ign-cmake, which will bring in mult-version installation.", "updated_on": "2018-04-30T20:31:57.833238+00:00", "author": {"display_name": "David Rajaratnam", "uuid": "{fd1ab40d-0066-4f24-a9cf-f0d31e2f3b94}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bfd1ab40d-0066-4f24-a9cf-f0d31e2f3b94%7D"}, "html": {"href": "https://bitbucket.org/%7Bfd1ab40d-0066-4f24-a9cf-f0d31e2f3b94%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/0606003bcb8fedcc1f6e5b0e35a76d3ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDR-1.png"}}, "nickname": "daveraja", "type": "user", "account_id": "557058:0e570377-5e6f-4dc1-bf90-f8da9be9e584"}, "merge_commit": null, "closed_by": {"display_name": "Nate Koenig", "uuid": "{c862cdd9-fcc8-4419-9fc7-e20db14b8fcb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D"}, "html": {"href": "https://bitbucket.org/%7Bc862cdd9-fcc8-4419-9fc7-e20db14b8fcb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:095b1e12-74ed-4e20-b44f-2f0745b616e0/ca24bb11-4787-4b14-a20d-d91835e9bde2/128"}}, "nickname": "Nathan Koenig", "type": "user", "account_id": "557058:095b1e12-74ed-4e20-b44f-2f0745b616e0"}}